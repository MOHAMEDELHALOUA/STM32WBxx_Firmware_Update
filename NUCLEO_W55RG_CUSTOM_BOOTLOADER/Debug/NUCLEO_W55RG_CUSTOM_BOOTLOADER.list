
NUCLEO_W55RG_CUSTOM_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  08005918  08005918  00006918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005c7c  08005c7c  00006c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005c84  08005c84  00006c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005c88  08005c88  00006c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000fc  20000008  08005c8c  00007008  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          000002b8  20000104  08005d88  00007104  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200003bc  08005d88  000073bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00007104  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011d7c  00000000  00000000  00007134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c04  00000000  00000000  00018eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001490  00000000  00000000  0001bab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f95  00000000  00000000  0001cf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000229e5  00000000  00000000  0001dedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010f8d  00000000  00000000  000408c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d920e  00000000  00000000  0005184f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0012aa5d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d04  00000000  00000000  0012aaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008c  00000000  00000000  001307a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000104 	.word	0x20000104
 800015c:	00000000 	.word	0x00000000
 8000160:	080058f8 	.word	0x080058f8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000108 	.word	0x20000108
 800017c:	080058f8 	.word	0x080058f8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000558:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800055a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000570:	68fb      	ldr	r3, [r7, #12]
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
	...

08000580 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
   * Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the
   * Systick.
   */
  HAL_Init();
 8000586:	f001 f81b 	bl	80015c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f865 	bl	8000658 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800058e:	f000 f8bb 	bl	8000708 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f96f 	bl	8000874 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000596:	f000 f921 	bl	80007dc <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 800059a:	f000 f8d3 	bl	8000744 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Custom Starting Bootloader(%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 800059e:	2302      	movs	r3, #2
 80005a0:	2200      	movs	r2, #0
 80005a2:	4619      	mov	r1, r3
 80005a4:	4828      	ldr	r0, [pc, #160]	@ (8000648 <main+0xc8>)
 80005a6:	f004 fadd 	bl	8004b64 <iprintf>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 ff10 	bl	80013d0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80005b0:	2001      	movs	r0, #1
 80005b2:	f000 ff0d 	bl	80013d0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005b6:	2002      	movs	r0, #2
 80005b8:	f000 ff0a 	bl	80013d0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each
   * time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80005bc:	2101      	movs	r1, #1
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 ff8e 	bl	80014e0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80005c4:	2101      	movs	r1, #1
 80005c6:	2001      	movs	r0, #1
 80005c8:	f000 ff8a 	bl	80014e0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80005cc:	2101      	movs	r1, #1
 80005ce:	2002      	movs	r0, #2
 80005d0:	f000 ff86 	bl	80014e0 <BSP_PB_Init>

  /* USER CODE BEGIN BSP */
  for (uint8_t i = 0; i < 5; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	e01a      	b.n	8000610 <main+0x90>
    printf("%d\r\n", 4 - i);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f1c3 0304 	rsb	r3, r3, #4
 80005e0:	4619      	mov	r1, r3
 80005e2:	481a      	ldr	r0, [pc, #104]	@ (800064c <main+0xcc>)
 80005e4:	f004 fabe 	bl	8004b64 <iprintf>
    BSP_LED_Off(LED_RED);
 80005e8:	2002      	movs	r0, #2
 80005ea:	f000 ff45 	bl	8001478 <BSP_LED_Off>
    HAL_Delay(1500);
 80005ee:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80005f2:	f001 f86b 	bl	80016cc <HAL_Delay>
    BSP_LED_On(LED_RED);
 80005f6:	2002      	movs	r0, #2
 80005f8:	f000 ff24 	bl	8001444 <BSP_LED_On>
    HAL_Delay(1500);
 80005fc:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000600:	f001 f864 	bl	80016cc <HAL_Delay>
    BSP_LED_Off(LED_RED);
 8000604:	2002      	movs	r0, #2
 8000606:	f000 ff37 	bl	8001478 <BSP_LED_Off>
  for (uint8_t i = 0; i < 5; i++) {
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	3301      	adds	r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b04      	cmp	r3, #4
 8000614:	d9e1      	bls.n	80005da <main+0x5a>
  }
  // check for firmware update:
  Firmware_Update();
 8000616:	f000 fac1 	bl	8000b9c <Firmware_Update>
  // Jump to application
  if (is_application_valid(0x08010000)) {
 800061a:	480d      	ldr	r0, [pc, #52]	@ (8000650 <main+0xd0>)
 800061c:	f000 fc58 	bl	8000ed0 <is_application_valid>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d009      	beq.n	800063a <main+0xba>
    BSP_LED_On(LED_GREEN);
 8000626:	2001      	movs	r0, #1
 8000628:	f000 ff0c 	bl	8001444 <BSP_LED_On>
    HAL_Delay(1500);
 800062c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000630:	f001 f84c 	bl	80016cc <HAL_Delay>
    goto_application();
 8000634:	f000 fc74 	bl	8000f20 <goto_application>
 8000638:	e003      	b.n	8000642 <main+0xc2>
  } else {
    printf("No valid application found, staying in bootloader\r\n");
 800063a:	4806      	ldr	r0, [pc, #24]	@ (8000654 <main+0xd4>)
 800063c:	f004 fafa 	bl	8004c34 <puts>
  }
  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <main+0xc2>
 8000646:	bf00      	nop
 8000648:	08005918 	.word	0x08005918
 800064c:	0800593c 	.word	0x0800593c
 8000650:	08010000 	.word	0x08010000
 8000654:	08005944 	.word	0x08005944

08000658 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b09a      	sub	sp, #104	@ 0x68
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2248      	movs	r2, #72	@ 0x48
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f004 fbc4 	bl	8004df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067e:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <SystemClock_Config+0xac>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000686:	4a1f      	ldr	r2, [pc, #124]	@ (8000704 <SystemClock_Config+0xac>)
 8000688:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <SystemClock_Config+0xac>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType =
 800069a:	2322      	movs	r3, #34	@ 0x22
 800069c:	623b      	str	r3, [r7, #32]
      RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2340      	movs	r3, #64	@ 0x40
 80006aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80006b0:	23a0      	movs	r3, #160	@ 0xa0
 80006b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 f847 	bl	8002750 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x74>
    Error_Handler();
 80006c8:	f000 fc40 	bl	8000f4c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2 |
 80006cc:	236f      	movs	r3, #111	@ 0x6f
 80006ce:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2101      	movs	r1, #1
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 fba3 	bl	8002e38 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xa4>
    Error_Handler();
 80006f8:	f000 fc28 	bl	8000f4c <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3768      	adds	r7, #104	@ 0x68
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	58000400 	.word	0x58000400

08000708 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2250      	movs	r2, #80	@ 0x50
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f004 fb6d 	bl	8004df4 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800071a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000724:	2300      	movs	r3, #0
 8000726:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000728:	463b      	mov	r3, r7
 800072a:	4618      	mov	r0, r3
 800072c:	f002 ffc1 	bl	80036b2 <HAL_RCCEx_PeriphCLKConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <PeriphCommonClock_Config+0x32>
    Error_Handler();
 8000736:	f000 fc09 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	@ 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 800074a:	4a23      	ldr	r2, [pc, #140]	@ (80007d8 <MX_LPUART1_UART_Init+0x94>)
 800074c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800074e:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000762:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000774:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800077a:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 800078c:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 800078e:	f003 fa37 	bl	8003c00 <HAL_UART_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_LPUART1_UART_Init+0x58>
    Error_Handler();
 8000798:	f000 fbd8 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) !=
 800079c:	2100      	movs	r1, #0
 800079e:	480d      	ldr	r0, [pc, #52]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 80007a0:	f004 f854 	bl	800484c <HAL_UARTEx_SetTxFifoThreshold>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_LPUART1_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 80007aa:	f000 fbcf 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) !=
 80007ae:	2100      	movs	r1, #0
 80007b0:	4808      	ldr	r0, [pc, #32]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 80007b2:	f004 f889 	bl	80048c8 <HAL_UARTEx_SetRxFifoThreshold>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_LPUART1_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 80007bc:	f000 fbc6 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 80007c0:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 80007c2:	f004 f80a 	bl	80047da <HAL_UARTEx_DisableFifoMode>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_LPUART1_UART_Init+0x8c>
    Error_Handler();
 80007cc:	f000 fbbe 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000120 	.word	0x20000120
 80007d8:	40008000 	.word	0x40008000

080007dc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e0:	4b22      	ldr	r3, [pc, #136]	@ (800086c <MX_USART1_UART_Init+0x90>)
 80007e2:	4a23      	ldr	r2, [pc, #140]	@ (8000870 <MX_USART1_UART_Init+0x94>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007e6:	4b21      	ldr	r3, [pc, #132]	@ (800086c <MX_USART1_UART_Init+0x90>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <MX_USART1_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_USART1_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <MX_USART1_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_USART1_UART_Init+0x90>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b19      	ldr	r3, [pc, #100]	@ (800086c <MX_USART1_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_USART1_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_USART1_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000818:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_USART1_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <MX_USART1_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000824:	4811      	ldr	r0, [pc, #68]	@ (800086c <MX_USART1_UART_Init+0x90>)
 8000826:	f003 f9eb 	bl	8003c00 <HAL_UART_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART1_UART_Init+0x58>
    Error_Handler();
 8000830:	f000 fb8c 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) !=
 8000834:	2100      	movs	r1, #0
 8000836:	480d      	ldr	r0, [pc, #52]	@ (800086c <MX_USART1_UART_Init+0x90>)
 8000838:	f004 f808 	bl	800484c <HAL_UARTEx_SetTxFifoThreshold>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART1_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 8000842:	f000 fb83 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) !=
 8000846:	2100      	movs	r1, #0
 8000848:	4808      	ldr	r0, [pc, #32]	@ (800086c <MX_USART1_UART_Init+0x90>)
 800084a:	f004 f83d 	bl	80048c8 <HAL_UARTEx_SetRxFifoThreshold>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_USART1_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 8000854:	f000 fb7a 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000858:	4804      	ldr	r0, [pc, #16]	@ (800086c <MX_USART1_UART_Init+0x90>)
 800085a:	f003 ffbe 	bl	80047da <HAL_UARTEx_DisableFifoMode>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART1_UART_Init+0x8c>
    Error_Handler();
 8000864:	f000 fb72 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200001b4 	.word	0x200001b4
 8000870:	40013800 	.word	0x40013800

08000874 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	2004      	movs	r0, #4
 800088a:	f7ff fe5f 	bl	800054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2001      	movs	r0, #1
 8000890:	f7ff fe5c 	bl	800054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000894:	2002      	movs	r0, #2
 8000896:	f7ff fe59 	bl	800054c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin | USB_DP_Pin;
 800089a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800089e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80008ac:	230a      	movs	r3, #10
 80008ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b8:	f001 fa14 	bl	8001ce4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <__io_putchar>:
   set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART1 and Loop until the end of
   * transmission
   */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008cc:	1d39      	adds	r1, r7, #4
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008d2:	2201      	movs	r2, #1
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <__io_putchar+0x20>)
 80008d6:	f003 f9e3 	bl	8003ca0 <HAL_UART_Transmit>
  return ch;
 80008da:	687b      	ldr	r3, [r7, #4]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000120 	.word	0x20000120

080008e8 <UART_Write_Loop>:

static int UART_Write_Loop(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
  char tx = 'g';
 80008ee:	2367      	movs	r3, #103	@ 0x67
 80008f0:	71bb      	strb	r3, [r7, #6]
  char rx = '0';
 80008f2:	2330      	movs	r3, #48	@ 0x30
 80008f4:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef ex;
  int ret = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  int count = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  while (1) {
    // Toggle GPIO
    BSP_LED_Toggle(LED_GREEN);
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 fdd4 	bl	80014ac <BSP_LED_Toggle>
    HAL_UART_Transmit(&huart1, (uint8_t *)&tx, 1, HAL_MAX_DELAY);
 8000904:	1db9      	adds	r1, r7, #6
 8000906:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800090a:	2201      	movs	r2, #1
 800090c:	4814      	ldr	r0, [pc, #80]	@ (8000960 <UART_Write_Loop+0x78>)
 800090e:	f003 f9c7 	bl	8003ca0 <HAL_UART_Transmit>
    ex = HAL_UART_Receive(&huart1, (uint8_t *)&rx, 1, 10);
 8000912:	1d79      	adds	r1, r7, #5
 8000914:	230a      	movs	r3, #10
 8000916:	2201      	movs	r2, #1
 8000918:	4811      	ldr	r0, [pc, #68]	@ (8000960 <UART_Write_Loop+0x78>)
 800091a:	f003 fa4f 	bl	8003dbc <HAL_UART_Receive>
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
    if ((ex == HAL_OK) && (rx == 'r')) {
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d108      	bne.n	800093a <UART_Write_Loop+0x52>
 8000928:	797b      	ldrb	r3, [r7, #5]
 800092a:	2b72      	cmp	r3, #114	@ 0x72
 800092c:	d105      	bne.n	800093a <UART_Write_Loop+0x52>
      // received data
      printf("Firmware Update Started\r\n");
 800092e:	480d      	ldr	r0, [pc, #52]	@ (8000964 <UART_Write_Loop+0x7c>)
 8000930:	f004 f980 	bl	8004c34 <puts>
      ret = 1;
 8000934:	2301      	movs	r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
      break;
 8000938:	e00d      	b.n	8000956 <UART_Write_Loop+0x6e>
    }
    if (count == 100) {
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	2b64      	cmp	r3, #100	@ 0x64
 800093e:	d103      	bne.n	8000948 <UART_Write_Loop+0x60>
      // received nothing
      printf("No Data Received for Firmware Update\r\n");
 8000940:	4809      	ldr	r0, [pc, #36]	@ (8000968 <UART_Write_Loop+0x80>)
 8000942:	f004 f977 	bl	8004c34 <puts>
      break;
 8000946:	e006      	b.n	8000956 <UART_Write_Loop+0x6e>
    }
    count++;
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	3301      	adds	r3, #1
 800094c:	60bb      	str	r3, [r7, #8]
    HAL_Delay(20); // 20ms delay
 800094e:	2014      	movs	r0, #20
 8000950:	f000 febc 	bl	80016cc <HAL_Delay>
    BSP_LED_Toggle(LED_GREEN);
 8000954:	e7d3      	b.n	80008fe <UART_Write_Loop+0x16>
  }
  return ret;
 8000956:	68fb      	ldr	r3, [r7, #12]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200001b4 	.word	0x200001b4
 8000964:	08005978 	.word	0x08005978
 8000968:	08005994 	.word	0x08005994

0800096c <write_data_to_flash_app>:
 * @param data_len data length
 * @is_first_block true - if this is first block, false - not first block
 * @retval HAL_StatusTypeDef
 */
static HAL_StatusTypeDef
write_data_to_flash_app(uint8_t *data, uint16_t data_len, bool is_first_block) {
 800096c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000970:	b096      	sub	sp, #88	@ 0x58
 8000972:	af00      	add	r7, sp, #0
 8000974:	61f8      	str	r0, [r7, #28]
 8000976:	460b      	mov	r3, r1
 8000978:	837b      	strh	r3, [r7, #26]
 800097a:	4613      	mov	r3, r2
 800097c:	767b      	strb	r3, [r7, #25]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_FLASH_Unlock();
 800097e:	f001 f81d 	bl	80019bc <HAL_FLASH_Unlock>
 8000982:	4603      	mov	r3, r0
 8000984:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (ret != HAL_OK) {
 8000988:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800098c:	2b00      	cmp	r3, #0
 800098e:	f040 80f2 	bne.w	8000b76 <write_data_to_flash_app+0x20a>
      break;
    }

    if (is_first_block) {
 8000992:	7e7b      	ldrb	r3, [r7, #25]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d020      	beq.n	80009da <write_data_to_flash_app+0x6e>
      printf("Erasing the Flash memory...\r\n");
 8000998:	487c      	ldr	r0, [pc, #496]	@ (8000b8c <write_data_to_flash_app+0x220>)
 800099a:	f004 f94b 	bl	8004c34 <puts>
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t PageError;

      EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800099e:	2302      	movs	r3, #2
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
      // Calculate page number from address
      EraseInitStruct.Page =
 80009a2:	2310      	movs	r3, #16
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
          (ETX_APP_START_ADDRESS - FLASH_BASE) / FLASH_PAGE_SIZE;
      EraseInitStruct.NbPages = 33;
 80009a6:	2321      	movs	r3, #33	@ 0x21
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

      ret = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	4610      	mov	r0, r2
 80009b6:	f001 f8d1 	bl	8001b5c <HAL_FLASHEx_Erase>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (ret != HAL_OK) {
 80009c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d005      	beq.n	80009d4 <write_data_to_flash_app+0x68>
        printf("Flash Erase Error: PageError = %lu\r\n", PageError);
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4870      	ldr	r0, [pc, #448]	@ (8000b90 <write_data_to_flash_app+0x224>)
 80009ce:	f004 f8c9 	bl	8004b64 <iprintf>
 80009d2:	e0d3      	b.n	8000b7c <write_data_to_flash_app+0x210>
        break;
      }
      application_write_idx = 0;
 80009d4:	4b6f      	ldr	r3, [pc, #444]	@ (8000b94 <write_data_to_flash_app+0x228>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
    }

    // STM32WB uses 64-bit (doubleword) programming
    for (int i = 0; i < data_len / 8; i++) {
 80009da:	2300      	movs	r3, #0
 80009dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80009de:	e05b      	b.n	8000a98 <write_data_to_flash_app+0x12c>
      uint64_t doubleword_data = 0;
 80009e0:	f04f 0200 	mov.w	r2, #0
 80009e4:	f04f 0300 	mov.w	r3, #0
 80009e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
      for (int j = 0; j < 8; j++) {
 80009ec:	2300      	movs	r3, #0
 80009ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80009f0:	e030      	b.n	8000a54 <write_data_to_flash_app+0xe8>
        doubleword_data |= ((uint64_t)data[i * 8 + j] << (j * 8));
 80009f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80009f4:	00da      	lsls	r2, r3, #3
 80009f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009f8:	4413      	add	r3, r2
 80009fa:	461a      	mov	r2, r3
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2200      	movs	r2, #0
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	617a      	str	r2, [r7, #20]
 8000a0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	f1a3 0120 	sub.w	r1, r3, #32
 8000a12:	f1c3 0220 	rsb	r2, r3, #32
 8000a16:	6978      	ldr	r0, [r7, #20]
 8000a18:	fa00 f903 	lsl.w	r9, r0, r3
 8000a1c:	6938      	ldr	r0, [r7, #16]
 8000a1e:	fa00 f101 	lsl.w	r1, r0, r1
 8000a22:	ea49 0901 	orr.w	r9, r9, r1
 8000a26:	6939      	ldr	r1, [r7, #16]
 8000a28:	fa21 f202 	lsr.w	r2, r1, r2
 8000a2c:	ea49 0902 	orr.w	r9, r9, r2
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	fa02 f803 	lsl.w	r8, r2, r3
 8000a36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000a3a:	ea42 0108 	orr.w	r1, r2, r8
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	ea43 0309 	orr.w	r3, r3, r9
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a4a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
      for (int j = 0; j < 8; j++) {
 8000a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a50:	3301      	adds	r3, #1
 8000a52:	647b      	str	r3, [r7, #68]	@ 0x44
 8000a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	ddcb      	ble.n	80009f2 <write_data_to_flash_app+0x86>
      }

      ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8000b94 <write_data_to_flash_app+0x228>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000a62:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 8000a66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f000 ff62 	bl	8001934 <HAL_FLASH_Program>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                              (ETX_APP_START_ADDRESS + application_write_idx),
                              doubleword_data);
      if (ret == HAL_OK) {
 8000a76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d105      	bne.n	8000a8a <write_data_to_flash_app+0x11e>
        application_write_idx += 8;
 8000a7e:	4b45      	ldr	r3, [pc, #276]	@ (8000b94 <write_data_to_flash_app+0x228>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3308      	adds	r3, #8
 8000a84:	4a43      	ldr	r2, [pc, #268]	@ (8000b94 <write_data_to_flash_app+0x228>)
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	e003      	b.n	8000a92 <write_data_to_flash_app+0x126>
      } else {
        printf("Flash Write Error...HALT!!!\r\n");
 8000a8a:	4843      	ldr	r0, [pc, #268]	@ (8000b98 <write_data_to_flash_app+0x22c>)
 8000a8c:	f004 f8d2 	bl	8004c34 <puts>
        break;
 8000a90:	e009      	b.n	8000aa6 <write_data_to_flash_app+0x13a>
    for (int i = 0; i < data_len / 8; i++) {
 8000a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000a94:	3301      	adds	r3, #1
 8000a96:	653b      	str	r3, [r7, #80]	@ 0x50
 8000a98:	8b7b      	ldrh	r3, [r7, #26]
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	db9c      	blt.n	80009e0 <write_data_to_flash_app+0x74>
      }
    }

    // Handle remaining bytes (if data_len is not multiple of 8)
    int remaining = data_len % 8;
 8000aa6:	8b7b      	ldrh	r3, [r7, #26]
 8000aa8:	f003 0307 	and.w	r3, r3, #7
 8000aac:	633b      	str	r3, [r7, #48]	@ 0x30
    if (remaining > 0 && ret == HAL_OK) {
 8000aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	dd53      	ble.n	8000b5c <write_data_to_flash_app+0x1f0>
 8000ab4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14f      	bne.n	8000b5c <write_data_to_flash_app+0x1f0>
      uint64_t doubleword_data = 0;
 8000abc:	f04f 0200 	mov.w	r2, #0
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
      for (int j = 0; j < remaining; j++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8000acc:	e02b      	b.n	8000b26 <write_data_to_flash_app+0x1ba>
        doubleword_data |= ((uint64_t)data[(data_len / 8) * 8 + j] << (j * 8));
 8000ace:	8b7b      	ldrh	r3, [r7, #26]
 8000ad0:	08db      	lsrs	r3, r3, #3
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	00da      	lsls	r2, r3, #3
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ad8:	4413      	add	r3, r2
 8000ada:	461a      	mov	r2, r3
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	469a      	mov	sl, r3
 8000ae8:	4693      	mov	fp, r2
 8000aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	f1a3 0120 	sub.w	r1, r3, #32
 8000af2:	f1c3 0220 	rsb	r2, r3, #32
 8000af6:	fa0b f503 	lsl.w	r5, fp, r3
 8000afa:	fa0a f101 	lsl.w	r1, sl, r1
 8000afe:	430d      	orrs	r5, r1
 8000b00:	fa2a f202 	lsr.w	r2, sl, r2
 8000b04:	4315      	orrs	r5, r2
 8000b06:	fa0a f403 	lsl.w	r4, sl, r3
 8000b0a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000b0e:	ea42 0104 	orr.w	r1, r2, r4
 8000b12:	6039      	str	r1, [r7, #0]
 8000b14:	432b      	orrs	r3, r5
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
      for (int j = 0; j < remaining; j++) {
 8000b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b22:	3301      	adds	r3, #1
 8000b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	dbcf      	blt.n	8000ace <write_data_to_flash_app+0x162>
      }
      ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <write_data_to_flash_app+0x228>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000b36:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 8000b3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f000 fef8 	bl	8001934 <HAL_FLASH_Program>
 8000b44:	4603      	mov	r3, r0
 8000b46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                              (ETX_APP_START_ADDRESS + application_write_idx),
                              doubleword_data);
      if (ret == HAL_OK) {
 8000b4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d104      	bne.n	8000b5c <write_data_to_flash_app+0x1f0>
        application_write_idx += 8;
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <write_data_to_flash_app+0x228>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	3308      	adds	r3, #8
 8000b58:	4a0e      	ldr	r2, [pc, #56]	@ (8000b94 <write_data_to_flash_app+0x228>)
 8000b5a:	6013      	str	r3, [r2, #0]
      }
    }

    if (ret != HAL_OK) {
 8000b5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10a      	bne.n	8000b7a <write_data_to_flash_app+0x20e>
      break;
    }
    ret = HAL_FLASH_Lock();
 8000b64:	f000 ff4c 	bl	8001a00 <HAL_FLASH_Lock>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (ret != HAL_OK) {
 8000b6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	e002      	b.n	8000b7c <write_data_to_flash_app+0x210>
      break;
 8000b76:	bf00      	nop
 8000b78:	e000      	b.n	8000b7c <write_data_to_flash_app+0x210>
      break;
 8000b7a:	bf00      	nop
      break;
    }
  } while (false);
  return ret;
 8000b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3758      	adds	r7, #88	@ 0x58
 8000b84:	46bd      	mov	sp, r7
 8000b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000b8a:	bf00      	nop
 8000b8c:	080059bc 	.word	0x080059bc
 8000b90:	080059dc 	.word	0x080059dc
 8000b94:	20000248 	.word	0x20000248
 8000b98:	08005a04 	.word	0x08005a04

08000b9c <Firmware_Update>:
/**
 * @brief Check for Firmware Update and update the Firmware
 * @retval None
 */
static void Firmware_Update(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
  uint8_t xx, yy;
  uint8_t x = 'x';
 8000ba6:	2378      	movs	r3, #120	@ 0x78
 8000ba8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000bac:	f102 0207 	add.w	r2, r2, #7
 8000bb0:	7013      	strb	r3, [r2, #0]
  uint8_t y = 'y';
 8000bb2:	2379      	movs	r3, #121	@ 0x79
 8000bb4:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000bb8:	f102 0206 	add.w	r2, r2, #6
 8000bbc:	7013      	strb	r3, [r2, #0]
  HAL_StatusTypeDef ex = HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000bc4:	f102 020f 	add.w	r2, r2, #15
 8000bc8:	7013      	strb	r3, [r2, #0]
  uint16_t current_app_size = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000bd0:	f102 020c 	add.w	r2, r2, #12
 8000bd4:	8013      	strh	r3, [r2, #0]
  uint16_t i = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000bdc:	f102 020a 	add.w	r2, r2, #10
 8000be0:	8013      	strh	r3, [r2, #0]
  uint8_t block[MAX_BLOCK_SIZE] = {0};
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	3b0c      	subs	r3, #12
 8000be8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f004 f900 	bl	8004df4 <memset>
  do {
    if (UART_Write_Loop() != 0) {
 8000bf4:	f7ff fe78 	bl	80008e8 <UART_Write_Loop>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f000 8149 	beq.w	8000e92 <Firmware_Update+0x2f6>
      // Sender is ready. Receive the Firmware Size
      //  Ask yy
      HAL_UART_Transmit(&huart1, &y, 1, HAL_MAX_DELAY);
 8000c00:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 8000c04:	f101 0106 	add.w	r1, r1, #6
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	48a8      	ldr	r0, [pc, #672]	@ (8000eb0 <Firmware_Update+0x314>)
 8000c10:	f003 f846 	bl	8003ca0 <HAL_UART_Transmit>
      ex = HAL_UART_Receive(&huart1, &yy, 1, 5000);
 8000c14:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 8000c18:	f101 0108 	add.w	r1, r1, #8
 8000c1c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c20:	2201      	movs	r2, #1
 8000c22:	48a3      	ldr	r0, [pc, #652]	@ (8000eb0 <Firmware_Update+0x314>)
 8000c24:	f003 f8ca 	bl	8003dbc <HAL_UART_Receive>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000c2e:	f102 020f 	add.w	r2, r2, #15
 8000c32:	7013      	strb	r3, [r2, #0]
      if (ex != HAL_OK) {
 8000c34:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c38:	f103 030f 	add.w	r3, r3, #15
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <Firmware_Update+0xae>
        printf("Get application Size error (yy)...HALT!!!\r\n");
 8000c42:	489c      	ldr	r0, [pc, #624]	@ (8000eb4 <Firmware_Update+0x318>)
 8000c44:	f003 fff6 	bl	8004c34 <puts>
        break;
 8000c48:	e123      	b.n	8000e92 <Firmware_Update+0x2f6>
      }
      // Ask xx
      HAL_UART_Transmit(&huart1, &x, 1, HAL_MAX_DELAY);
 8000c4a:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 8000c4e:	f101 0107 	add.w	r1, r1, #7
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c56:	2201      	movs	r2, #1
 8000c58:	4895      	ldr	r0, [pc, #596]	@ (8000eb0 <Firmware_Update+0x314>)
 8000c5a:	f003 f821 	bl	8003ca0 <HAL_UART_Transmit>
      ex = HAL_UART_Receive(&huart1, &xx, 1, 5000);
 8000c5e:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 8000c62:	f101 0109 	add.w	r1, r1, #9
 8000c66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4890      	ldr	r0, [pc, #576]	@ (8000eb0 <Firmware_Update+0x314>)
 8000c6e:	f003 f8a5 	bl	8003dbc <HAL_UART_Receive>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000c78:	f102 020f 	add.w	r2, r2, #15
 8000c7c:	7013      	strb	r3, [r2, #0]
      if (ex != HAL_OK) {
 8000c7e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c82:	f103 030f 	add.w	r3, r3, #15
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <Firmware_Update+0xf8>
        printf("Get application Size error(XX)...HALT!!!\r\n");
 8000c8c:	488a      	ldr	r0, [pc, #552]	@ (8000eb8 <Firmware_Update+0x31c>)
 8000c8e:	f003 ffd1 	bl	8004c34 <puts>
        break;
 8000c92:	e0fe      	b.n	8000e92 <Firmware_Update+0x2f6>
      }
      application_size = yy | (xx << 8);
 8000c94:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c98:	f103 0308 	add.w	r3, r3, #8
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000ca4:	f103 0309 	add.w	r3, r3, #9
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	4313      	orrs	r3, r2
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b82      	ldr	r3, [pc, #520]	@ (8000ebc <Firmware_Update+0x320>)
 8000cb2:	601a      	str	r2, [r3, #0]
      printf("Application Size = %d bytes\r\n", application_size);
 8000cb4:	4b81      	ldr	r3, [pc, #516]	@ (8000ebc <Firmware_Update+0x320>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4881      	ldr	r0, [pc, #516]	@ (8000ec0 <Firmware_Update+0x324>)
 8000cbc:	f003 ff52 	bl	8004b64 <iprintf>
      while (1) {
        if ((i == MAX_BLOCK_SIZE) || (current_app_size >= application_size)) {
 8000cc0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cc4:	f103 030a 	add.w	r3, r3, #10
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000cce:	d008      	beq.n	8000ce2 <Firmware_Update+0x146>
 8000cd0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cd4:	f103 030c 	add.w	r3, r3, #12
 8000cd8:	881a      	ldrh	r2, [r3, #0]
 8000cda:	4b78      	ldr	r3, [pc, #480]	@ (8000ebc <Firmware_Update+0x320>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d33a      	bcc.n	8000d58 <Firmware_Update+0x1bc>
          printf("Received Block[%d]\r\n", current_app_size / MAX_BLOCK_SIZE);
 8000ce2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000ce6:	f103 030c 	add.w	r3, r3, #12
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	0b1b      	lsrs	r3, r3, #12
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4874      	ldr	r0, [pc, #464]	@ (8000ec4 <Firmware_Update+0x328>)
 8000cf4:	f003 ff36 	bl	8004b64 <iprintf>
          // write to flash
          ex = write_data_to_flash_app(block, MAX_BLOCK_SIZE,
 8000cf8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cfc:	f103 030c 	add.w	r3, r3, #12
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d06:	bf94      	ite	ls
 8000d08:	2301      	movls	r3, #1
 8000d0a:	2300      	movhi	r3, #0
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	3b0c      	subs	r3, #12
 8000d14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fe27 	bl	800096c <write_data_to_flash_app>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000d24:	f102 020f 	add.w	r2, r2, #15
 8000d28:	7013      	strb	r3, [r2, #0]
                                       (current_app_size <= MAX_BLOCK_SIZE));
          if (ex != HAL_OK) {
 8000d2a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000d2e:	f103 030f 	add.w	r3, r3, #15
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f040 80ab 	bne.w	8000e90 <Firmware_Update+0x2f4>
            break;
          }
          // clear the memory
          memset(block, 0, MAX_BLOCK_SIZE);
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	3b0c      	subs	r3, #12
 8000d40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 f854 	bl	8004df4 <memset>
          i = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000d52:	f102 020a 	add.w	r2, r2, #10
 8000d56:	8013      	strh	r3, [r2, #0]
        }
        if (current_app_size >= application_size) {
 8000d58:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000d5c:	f103 030c 	add.w	r3, r3, #12
 8000d60:	881a      	ldrh	r2, [r3, #0]
 8000d62:	4b56      	ldr	r3, [pc, #344]	@ (8000ebc <Firmware_Update+0x320>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d306      	bcc.n	8000d78 <Firmware_Update+0x1dc>
          // received all data. exit
          ex = HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000d70:	f102 020f 	add.w	r2, r2, #15
 8000d74:	7013      	strb	r3, [r2, #0]
          break;
 8000d76:	e08c      	b.n	8000e92 <Firmware_Update+0x2f6>
        }
        // Ask yy
        HAL_UART_Transmit(&huart1, &y, 1, HAL_MAX_DELAY);
 8000d78:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 8000d7c:	f101 0106 	add.w	r1, r1, #6
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d84:	2201      	movs	r2, #1
 8000d86:	484a      	ldr	r0, [pc, #296]	@ (8000eb0 <Firmware_Update+0x314>)
 8000d88:	f002 ff8a 	bl	8003ca0 <HAL_UART_Transmit>
        ex = HAL_UART_Receive(&huart1, &yy, 1, 5000);
 8000d8c:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 8000d90:	f101 0108 	add.w	r1, r1, #8
 8000d94:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4845      	ldr	r0, [pc, #276]	@ (8000eb0 <Firmware_Update+0x314>)
 8000d9c:	f003 f80e 	bl	8003dbc <HAL_UART_Receive>
 8000da0:	4603      	mov	r3, r0
 8000da2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000da6:	f102 020f 	add.w	r2, r2, #15
 8000daa:	7013      	strb	r3, [r2, #0]
        if (ex != HAL_OK) {
 8000dac:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000db0:	f103 030f 	add.w	r3, r3, #15
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d009      	beq.n	8000dce <Firmware_Update+0x232>
          printf("Get application data[index:%d] error (yy)...HALT!!!\r\n", i);
 8000dba:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000dbe:	f103 030a 	add.w	r3, r3, #10
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4840      	ldr	r0, [pc, #256]	@ (8000ec8 <Firmware_Update+0x32c>)
 8000dc8:	f003 fecc 	bl	8004b64 <iprintf>
          break;
 8000dcc:	e061      	b.n	8000e92 <Firmware_Update+0x2f6>
        }
        // Ask xx
        HAL_UART_Transmit(&huart1, &x, 1, HAL_MAX_DELAY);
 8000dce:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 8000dd2:	f101 0107 	add.w	r1, r1, #7
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4834      	ldr	r0, [pc, #208]	@ (8000eb0 <Firmware_Update+0x314>)
 8000dde:	f002 ff5f 	bl	8003ca0 <HAL_UART_Transmit>
        ex = HAL_UART_Receive(&huart1, &xx, 1, 5000);
 8000de2:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 8000de6:	f101 0109 	add.w	r1, r1, #9
 8000dea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000dee:	2201      	movs	r2, #1
 8000df0:	482f      	ldr	r0, [pc, #188]	@ (8000eb0 <Firmware_Update+0x314>)
 8000df2:	f002 ffe3 	bl	8003dbc <HAL_UART_Receive>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000dfc:	f102 020f 	add.w	r2, r2, #15
 8000e00:	7013      	strb	r3, [r2, #0]
        if (ex != HAL_OK) {
 8000e02:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000e06:	f103 030f 	add.w	r3, r3, #15
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d009      	beq.n	8000e24 <Firmware_Update+0x288>
          printf("Get application data[index:%d] error(XX)...HALT!!!\r\n", i);
 8000e10:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000e14:	f103 030a 	add.w	r3, r3, #10
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	482b      	ldr	r0, [pc, #172]	@ (8000ecc <Firmware_Update+0x330>)
 8000e1e:	f003 fea1 	bl	8004b64 <iprintf>
          break;
 8000e22:	e036      	b.n	8000e92 <Firmware_Update+0x2f6>
        }
        //--- Save xxyy in block[i]
        block[i++] = yy;
 8000e24:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000e28:	f103 030a 	add.w	r3, r3, #10
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 8000e34:	f101 010a 	add.w	r1, r1, #10
 8000e38:	800a      	strh	r2, [r1, #0]
 8000e3a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000e3e:	f102 0208 	add.w	r2, r2, #8
 8000e42:	7812      	ldrb	r2, [r2, #0]
 8000e44:	f107 0110 	add.w	r1, r7, #16
 8000e48:	440b      	add	r3, r1
 8000e4a:	f803 2c0c 	strb.w	r2, [r3, #-12]
        block[i++] = xx;
 8000e4e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000e52:	f103 030a 	add.w	r3, r3, #10
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 8000e5e:	f101 010a 	add.w	r1, r1, #10
 8000e62:	800a      	strh	r2, [r1, #0]
 8000e64:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000e68:	f102 0209 	add.w	r2, r2, #9
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	f107 0110 	add.w	r1, r7, #16
 8000e72:	440b      	add	r3, r1
 8000e74:	f803 2c0c 	strb.w	r2, [r3, #-12]
        current_app_size += 2;
 8000e78:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000e7c:	f103 030c 	add.w	r3, r3, #12
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	3302      	adds	r3, #2
 8000e84:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000e88:	f102 020c 	add.w	r2, r2, #12
 8000e8c:	8013      	strh	r3, [r2, #0]
        if ((i == MAX_BLOCK_SIZE) || (current_app_size >= application_size)) {
 8000e8e:	e717      	b.n	8000cc0 <Firmware_Update+0x124>
            break;
 8000e90:	bf00      	nop
      }
    }
  } while (false);
  if (ex != HAL_OK) {
 8000e92:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000e96:	f103 030f 	add.w	r3, r3, #15
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <Firmware_Update+0x308>
    while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <Firmware_Update+0x304>
      ;
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200001b4 	.word	0x200001b4
 8000eb4:	08005a24 	.word	0x08005a24
 8000eb8:	08005a50 	.word	0x08005a50
 8000ebc:	2000024c 	.word	0x2000024c
 8000ec0:	08005a7c 	.word	0x08005a7c
 8000ec4:	08005a9c 	.word	0x08005a9c
 8000ec8:	08005ab4 	.word	0x08005ab4
 8000ecc:	08005aec 	.word	0x08005aec

08000ed0 <is_application_valid>:

// check if application valide
static uint8_t is_application_valid(uint32_t app_addr) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t stack_ptr = *(volatile uint32_t *)app_addr;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  uint32_t reset_handler = *(volatile uint32_t *)(app_addr + 4);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60bb      	str	r3, [r7, #8]

  // Check if stack pointer is in RAM range
  if ((stack_ptr & 0xFFE00000) != 0x20000000) {
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	0d5b      	lsrs	r3, r3, #21
 8000eea:	055b      	lsls	r3, r3, #21
 8000eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ef0:	d001      	beq.n	8000ef6 <is_application_valid+0x26>
    return 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e00d      	b.n	8000f12 <is_application_valid+0x42>
  }

  // Check if reset handler is in application flash range and is thumb code
  if (((reset_handler & 0xFFF00000) != 0x08000000) || !(reset_handler & 0x1)) {
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	0d1b      	lsrs	r3, r3, #20
 8000efa:	051b      	lsls	r3, r3, #20
 8000efc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000f00:	d104      	bne.n	8000f0c <is_application_valid+0x3c>
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <is_application_valid+0x40>
    return 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e000      	b.n	8000f12 <is_application_valid+0x42>
  }
  return 1;
 8000f10:	2301      	movs	r3, #1
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <goto_application>:
static void goto_application(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
  printf("Gonna Jump to Application\n");
 8000f26:	4807      	ldr	r0, [pc, #28]	@ (8000f44 <goto_application+0x24>)
 8000f28:	f003 fe84 	bl	8004c34 <puts>
  void (*app_reset_handler)(void) =
      (void *)(*((volatile uint32_t *)(0x08010000 + 4U)));
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <goto_application+0x28>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
  void (*app_reset_handler)(void) =
 8000f30:	607b      	str	r3, [r7, #4]
  //__set_MSP(*(volatile uint32_t*) 0x08010000);
  // Turn OFF the Green Led to tell the user that Bootloader is not running
  // Green LED OFF
  BSP_LED_Off(LED_GREEN);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f000 faa0 	bl	8001478 <BSP_LED_Off>
  //  //__set_MSP(*(volatile uint32_t*) 0x08010000);
  //  SysTick->CTRL = 0;
  //  SysTick->LOAD = 0;
  //  SysTick->VAL = 0;
  /* Jump to application */
  app_reset_handler(); // call the app reset handler
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4798      	blx	r3
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	08005b24 	.word	0x08005b24
 8000f48:	08010004 	.word	0x08010004

08000f4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <Error_Handler+0x8>

08000f58 <LL_AHB2_GRP1_EnableClock>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4013      	ands	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000fca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fd8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b09c      	sub	sp, #112	@ 0x70
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2250      	movs	r2, #80	@ 0x50
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f003 fee9 	bl	8004df4 <memset>
  if(huart->Instance==LPUART1)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a2b      	ldr	r2, [pc, #172]	@ (80010d4 <HAL_UART_MspInit+0xd8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d124      	bne.n	8001076 <HAL_UART_MspInit+0x7a>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800102c:	2302      	movs	r3, #2
 800102e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001030:	2300      	movs	r3, #0
 8001032:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4618      	mov	r0, r3
 800103a:	f002 fb3a 	bl	80036b2 <HAL_RCCEx_PeriphCLKConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001044:	f7ff ff82 	bl	8000f4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff ff9e 	bl	8000f8a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	2004      	movs	r0, #4
 8001050:	f7ff ff82 	bl	8000f58 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001054:	2303      	movs	r3, #3
 8001056:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001064:	2308      	movs	r3, #8
 8001066:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800106c:	4619      	mov	r1, r3
 800106e:	481a      	ldr	r0, [pc, #104]	@ (80010d8 <HAL_UART_MspInit+0xdc>)
 8001070:	f000 fe38 	bl	8001ce4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8001074:	e029      	b.n	80010ca <HAL_UART_MspInit+0xce>
  else if(huart->Instance==USART1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a18      	ldr	r2, [pc, #96]	@ (80010dc <HAL_UART_MspInit+0xe0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d124      	bne.n	80010ca <HAL_UART_MspInit+0xce>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001080:	2301      	movs	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4618      	mov	r0, r3
 800108e:	f002 fb10 	bl	80036b2 <HAL_RCCEx_PeriphCLKConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001098:	f7ff ff58 	bl	8000f4c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800109c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80010a0:	f7ff ff8c 	bl	8000fbc <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	2002      	movs	r0, #2
 80010a6:	f7ff ff57 	bl	8000f58 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010aa:	23c0      	movs	r3, #192	@ 0xc0
 80010ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ba:	2307      	movs	r3, #7
 80010bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010c2:	4619      	mov	r1, r3
 80010c4:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <HAL_UART_MspInit+0xe4>)
 80010c6:	f000 fe0d 	bl	8001ce4 <HAL_GPIO_Init>
}
 80010ca:	bf00      	nop
 80010cc:	3770      	adds	r7, #112	@ 0x70
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40008000 	.word	0x40008000
 80010d8:	48000800 	.word	0x48000800
 80010dc:	40013800 	.word	0x40013800
 80010e0:	48000400 	.word	0x48000400

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <NMI_Handler+0x4>

080010ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <MemManage_Handler+0x4>

080010fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <UsageFault_Handler+0x4>

0800110c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113a:	f000 fa9b 	bl	8001674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}

08001142 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	e00a      	b.n	800116a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001154:	f3af 8000 	nop.w
 8001158:	4601      	mov	r1, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	60ba      	str	r2, [r7, #8]
 8001160:	b2ca      	uxtb	r2, r1
 8001162:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	3301      	adds	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	429a      	cmp	r2, r3
 8001170:	dbf0      	blt.n	8001154 <_read+0x12>
  }

  return len;
 8001172:	687b      	ldr	r3, [r7, #4]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	e009      	b.n	80011a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	60ba      	str	r2, [r7, #8]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fb94 	bl	80008c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3301      	adds	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	dbf1      	blt.n	800118e <_write+0x12>
  }
  return len;
 80011aa:	687b      	ldr	r3, [r7, #4]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_close>:

int _close(int file)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011dc:	605a      	str	r2, [r3, #4]
  return 0;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_isatty>:

int _isatty(int file)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011f4:	2301      	movs	r3, #1
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001202:	b480      	push	{r7}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001224:	4a14      	ldr	r2, [pc, #80]	@ (8001278 <_sbrk+0x5c>)
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <_sbrk+0x60>)
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <_sbrk+0x64>)
 800123a:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <_sbrk+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	429a      	cmp	r2, r3
 800124a:	d207      	bcs.n	800125c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800124c:	f003 fe20 	bl	8004e90 <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	220c      	movs	r2, #12
 8001254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800125a:	e009      	b.n	8001270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800125c:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001262:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <_sbrk+0x64>)
 800126c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20030000 	.word	0x20030000
 800127c:	00000400 	.word	0x00000400
 8001280:	20000250 	.word	0x20000250
 8001284:	200003c0 	.word	0x200003c0

08001288 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800128c:	4b24      	ldr	r3, [pc, #144]	@ (8001320 <SystemInit+0x98>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001292:	4a23      	ldr	r2, [pc, #140]	@ (8001320 <SystemInit+0x98>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800129c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80012ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012b0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80012b4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80012b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <SystemInit+0x9c>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80012c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012d2:	f023 0305 	bic.w	r3, r3, #5
 80012d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80012da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80012ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001328 <SystemInit+0xa0>)
 80012f4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80012f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001328 <SystemInit+0xa0>)
 80012fc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001308:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800130c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800130e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00
 8001324:	faf6fefb 	.word	0xfaf6fefb
 8001328:	22041000 	.word	0x22041000

0800132c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800132c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800132e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001330:	3304      	adds	r3, #4

08001332 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001332:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001334:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001336:	d3f9      	bcc.n	800132c <CopyDataInit>
  bx lr
 8001338:	4770      	bx	lr

0800133a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800133a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800133c:	3004      	adds	r0, #4

0800133e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800133e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001340:	d3fb      	bcc.n	800133a <FillZerobss>
  bx lr
 8001342:	4770      	bx	lr

08001344 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001346:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001348:	f7ff ff9e 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800134c:	480b      	ldr	r0, [pc, #44]	@ (800137c <LoopForever+0x6>)
 800134e:	490c      	ldr	r1, [pc, #48]	@ (8001380 <LoopForever+0xa>)
 8001350:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <LoopForever+0xe>)
 8001352:	2300      	movs	r3, #0
 8001354:	f7ff ffed 	bl	8001332 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001358:	480b      	ldr	r0, [pc, #44]	@ (8001388 <LoopForever+0x12>)
 800135a:	490c      	ldr	r1, [pc, #48]	@ (800138c <LoopForever+0x16>)
 800135c:	4a0c      	ldr	r2, [pc, #48]	@ (8001390 <LoopForever+0x1a>)
 800135e:	2300      	movs	r3, #0
 8001360:	f7ff ffe7 	bl	8001332 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001364:	480b      	ldr	r0, [pc, #44]	@ (8001394 <LoopForever+0x1e>)
 8001366:	490c      	ldr	r1, [pc, #48]	@ (8001398 <LoopForever+0x22>)
 8001368:	2300      	movs	r3, #0
 800136a:	f7ff ffe8 	bl	800133e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800136e:	f003 fd95 	bl	8004e9c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001372:	f7ff f905 	bl	8000580 <main>

08001376 <LoopForever>:

LoopForever:
  b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   r0, =_estack
 8001378:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800137c:	20000008 	.word	0x20000008
 8001380:	20000104 	.word	0x20000104
 8001384:	08005c8c 	.word	0x08005c8c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001388:	20030000 	.word	0x20030000
 800138c:	20030000 	.word	0x20030000
 8001390:	08005d88 	.word	0x08005d88
  INIT_BSS _sbss, _ebss
 8001394:	20000104 	.word	0x20000104
 8001398:	200003bc 	.word	0x200003bc

0800139c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_IRQHandler>

0800139e <LL_AHB2_GRP1_EnableClock>:
{
 800139e:	b480      	push	{r7}
 80013a0:	b085      	sub	sp, #20
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4013      	ands	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80013ea:	2002      	movs	r0, #2
 80013ec:	f7ff ffd7 	bl	800139e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	4a12      	ldr	r2, [pc, #72]	@ (800143c <BSP_LED_Init+0x6c>)
 80013f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013f8:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <BSP_LED_Init+0x70>)
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	f107 020c 	add.w	r2, r7, #12
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fc65 	bl	8001ce4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <BSP_LED_Init+0x70>)
 800141e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4a05      	ldr	r2, [pc, #20]	@ (800143c <BSP_LED_Init+0x6c>)
 8001426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800142a:	2200      	movs	r2, #0
 800142c:	4619      	mov	r1, r3
 800142e:	f000 fdc9 	bl	8001fc4 <HAL_GPIO_WritePin>
}
 8001432:	bf00      	nop
 8001434:	3720      	adds	r7, #32
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	08005c0c 	.word	0x08005c0c
 8001440:	2000000c 	.word	0x2000000c

08001444 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4a07      	ldr	r2, [pc, #28]	@ (8001470 <BSP_LED_On+0x2c>)
 8001452:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	4a06      	ldr	r2, [pc, #24]	@ (8001474 <BSP_LED_On+0x30>)
 800145a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800145e:	2201      	movs	r2, #1
 8001460:	4619      	mov	r1, r3
 8001462:	f000 fdaf 	bl	8001fc4 <HAL_GPIO_WritePin>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000000c 	.word	0x2000000c
 8001474:	08005c0c 	.word	0x08005c0c

08001478 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <BSP_LED_Off+0x2c>)
 8001486:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4a06      	ldr	r2, [pc, #24]	@ (80014a8 <BSP_LED_Off+0x30>)
 800148e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	f000 fd95 	bl	8001fc4 <HAL_GPIO_WritePin>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000000c 	.word	0x2000000c
 80014a8:	08005c0c 	.word	0x08005c0c

080014ac <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4a07      	ldr	r2, [pc, #28]	@ (80014d8 <BSP_LED_Toggle+0x2c>)
 80014ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	4906      	ldr	r1, [pc, #24]	@ (80014dc <BSP_LED_Toggle+0x30>)
 80014c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4610      	mov	r0, r2
 80014ca:	f000 fd93 	bl	8001ff4 <HAL_GPIO_TogglePin>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000000c 	.word	0x2000000c
 80014dc:	08005c0c 	.word	0x08005c0c

080014e0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	460a      	mov	r2, r1
 80014ea:	71fb      	strb	r3, [r7, #7]
 80014ec:	4613      	mov	r3, r2
 80014ee:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <BSP_PB_Init+0x2e>
 8001506:	2004      	movs	r0, #4
 8001508:	f7ff ff49 	bl	800139e <LL_AHB2_GRP1_EnableClock>
 800150c:	e00c      	b.n	8001528 <BSP_PB_Init+0x48>
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d103      	bne.n	800151c <BSP_PB_Init+0x3c>
 8001514:	2008      	movs	r0, #8
 8001516:	f7ff ff42 	bl	800139e <LL_AHB2_GRP1_EnableClock>
 800151a:	e005      	b.n	8001528 <BSP_PB_Init+0x48>
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d102      	bne.n	8001528 <BSP_PB_Init+0x48>
 8001522:	2008      	movs	r0, #8
 8001524:	f7ff ff3b 	bl	800139e <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001528:	79bb      	ldrb	r3, [r7, #6]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d117      	bne.n	800155e <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	4a20      	ldr	r2, [pc, #128]	@ (80015b4 <BSP_PB_Init+0xd4>)
 8001532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001536:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800153c:	2301      	movs	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001540:	2302      	movs	r3, #2
 8001542:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4a1c      	ldr	r2, [pc, #112]	@ (80015b8 <BSP_PB_Init+0xd8>)
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	f107 020c 	add.w	r2, r7, #12
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fbc6 	bl	8001ce4 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001558:	2001      	movs	r0, #1
 800155a:	f000 f8b7 	bl	80016cc <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800155e:	79bb      	ldrb	r3, [r7, #6]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d123      	bne.n	80015ac <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	4a13      	ldr	r2, [pc, #76]	@ (80015b4 <BSP_PB_Init+0xd4>)
 8001568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800156c:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800156e:	2301      	movs	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8001572:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001576:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	4a0f      	ldr	r2, [pc, #60]	@ (80015b8 <BSP_PB_Init+0xd8>)
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	f107 020c 	add.w	r2, r7, #12
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fbac 	bl	8001ce4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	4a0b      	ldr	r2, [pc, #44]	@ (80015bc <BSP_PB_Init+0xdc>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	b25b      	sxtb	r3, r3
 8001594:	2200      	movs	r2, #0
 8001596:	210f      	movs	r1, #15
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f996 	bl	80018ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4a06      	ldr	r2, [pc, #24]	@ (80015bc <BSP_PB_Init+0xdc>)
 80015a2:	5cd3      	ldrb	r3, [r2, r3]
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f9a9 	bl	80018fe <HAL_NVIC_EnableIRQ>
  }
}
 80015ac:	bf00      	nop
 80015ae:	3720      	adds	r7, #32
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	08005c14 	.word	0x08005c14
 80015b8:	20000018 	.word	0x20000018
 80015bc:	08005c1c 	.word	0x08005c1c

080015c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ca:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <HAL_Init+0x3c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a0b      	ldr	r2, [pc, #44]	@ (80015fc <HAL_Init+0x3c>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d6:	2003      	movs	r0, #3
 80015d8:	f000 f96c 	bl	80018b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015dc:	2000      	movs	r0, #0
 80015de:	f000 f80f 	bl	8001600 <HAL_InitTick>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	e001      	b.n	80015f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ee:	f7ff fcfe 	bl	8000fee <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	58004000 	.word	0x58004000

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800160c:	4b17      	ldr	r3, [pc, #92]	@ (800166c <HAL_InitTick+0x6c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d024      	beq.n	800165e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001614:	f001 fdbc 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 8001618:	4602      	mov	r2, r0
 800161a:	4b14      	ldr	r3, [pc, #80]	@ (800166c <HAL_InitTick+0x6c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	4619      	mov	r1, r3
 8001620:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001624:	fbb3 f3f1 	udiv	r3, r3, r1
 8001628:	fbb2 f3f3 	udiv	r3, r2, r3
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f974 	bl	800191a <HAL_SYSTICK_Config>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10f      	bne.n	8001658 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	d809      	bhi.n	8001652 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163e:	2200      	movs	r2, #0
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001646:	f000 f940 	bl	80018ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800164a:	4a09      	ldr	r2, [pc, #36]	@ (8001670 <HAL_InitTick+0x70>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	e007      	b.n	8001662 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	e004      	b.n	8001662 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e001      	b.n	8001662 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000028 	.word	0x20000028
 8001670:	20000024 	.word	0x20000024

08001674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_IncTick+0x20>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_IncTick+0x24>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a04      	ldr	r2, [pc, #16]	@ (8001698 <HAL_IncTick+0x24>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000028 	.word	0x20000028
 8001698:	20000254 	.word	0x20000254

0800169c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b03      	ldr	r3, [pc, #12]	@ (80016b0 <HAL_GetTick+0x14>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000254 	.word	0x20000254

080016b4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80016b8:	4b03      	ldr	r3, [pc, #12]	@ (80016c8 <HAL_GetTickPrio+0x14>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000024 	.word	0x20000024

080016cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff ffe2 	bl	800169c <HAL_GetTick>
 80016d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016e4:	d005      	beq.n	80016f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_Delay+0x44>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016f2:	bf00      	nop
 80016f4:	f7ff ffd2 	bl	800169c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d8f7      	bhi.n	80016f4 <HAL_Delay+0x28>
  {
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000028 	.word	0x20000028

08001714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800173c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	@ (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <__NVIC_GetPriorityGrouping+0x18>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0307 	and.w	r3, r3, #7
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db0b      	blt.n	80017a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	4907      	ldr	r1, [pc, #28]	@ (80017b0 <__NVIC_EnableIRQ+0x38>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	2001      	movs	r0, #1
 800179a:	fa00 f202 	lsl.w	r2, r0, r2
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000e100 	.word	0xe000e100

080017b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	db0a      	blt.n	80017de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	490c      	ldr	r1, [pc, #48]	@ (8001800 <__NVIC_SetPriority+0x4c>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	0112      	lsls	r2, r2, #4
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	440b      	add	r3, r1
 80017d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017dc:	e00a      	b.n	80017f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4908      	ldr	r1, [pc, #32]	@ (8001804 <__NVIC_SetPriority+0x50>)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	3b04      	subs	r3, #4
 80017ec:	0112      	lsls	r2, r2, #4
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	440b      	add	r3, r1
 80017f2:	761a      	strb	r2, [r3, #24]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000e100 	.word	0xe000e100
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	@ 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f1c3 0307 	rsb	r3, r3, #7
 8001822:	2b04      	cmp	r3, #4
 8001824:	bf28      	it	cs
 8001826:	2304      	movcs	r3, #4
 8001828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3304      	adds	r3, #4
 800182e:	2b06      	cmp	r3, #6
 8001830:	d902      	bls.n	8001838 <NVIC_EncodePriority+0x30>
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3b03      	subs	r3, #3
 8001836:	e000      	b.n	800183a <NVIC_EncodePriority+0x32>
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	401a      	ands	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001850:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	43d9      	mvns	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	4313      	orrs	r3, r2
         );
}
 8001862:	4618      	mov	r0, r3
 8001864:	3724      	adds	r7, #36	@ 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001880:	d301      	bcc.n	8001886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001882:	2301      	movs	r3, #1
 8001884:	e00f      	b.n	80018a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001886:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <SysTick_Config+0x40>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800188e:	210f      	movs	r1, #15
 8001890:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001894:	f7ff ff8e 	bl	80017b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001898:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <SysTick_Config+0x40>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189e:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <SysTick_Config+0x40>)
 80018a0:	2207      	movs	r2, #7
 80018a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	e000e010 	.word	0xe000e010

080018b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ff29 	bl	8001714 <__NVIC_SetPriorityGrouping>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018d8:	f7ff ff40 	bl	800175c <__NVIC_GetPriorityGrouping>
 80018dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	6978      	ldr	r0, [r7, #20]
 80018e4:	f7ff ff90 	bl	8001808 <NVIC_EncodePriority>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff5f 	bl	80017b4 <__NVIC_SetPriority>
}
 80018f6:	bf00      	nop
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff33 	bl	8001778 <__NVIC_EnableIRQ>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffa4 	bl	8001870 <SysTick_Config>
 8001928:	4603      	mov	r3, r0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001942:	4b1c      	ldr	r3, [pc, #112]	@ (80019b4 <HAL_FLASH_Program+0x80>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_FLASH_Program+0x1a>
 800194a:	2302      	movs	r3, #2
 800194c:	e02d      	b.n	80019aa <HAL_FLASH_Program+0x76>
 800194e:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <HAL_FLASH_Program+0x80>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001954:	4b17      	ldr	r3, [pc, #92]	@ (80019b4 <HAL_FLASH_Program+0x80>)
 8001956:	2200      	movs	r2, #0
 8001958:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800195a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800195e:	f000 f869 	bl	8001a34 <FLASH_WaitForLastOperation>
 8001962:	4603      	mov	r3, r0
 8001964:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d11a      	bne.n	80019a2 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d105      	bne.n	800197e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f000 f8ca 	bl	8001b10 <FLASH_Program_DoubleWord>
 800197c:	e004      	b.n	8001988 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	68b8      	ldr	r0, [r7, #8]
 8001984:	f003 ffc4 	bl	8005910 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001988:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800198c:	f000 f852 	bl	8001a34 <FLASH_WaitForLastOperation>
 8001990:	4603      	mov	r3, r0
 8001992:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <HAL_FLASH_Program+0x84>)
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	43db      	mvns	r3, r3
 800199c:	4906      	ldr	r1, [pc, #24]	@ (80019b8 <HAL_FLASH_Program+0x84>)
 800199e:	4013      	ands	r3, r2
 80019a0:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019a2:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <HAL_FLASH_Program+0x80>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000258 	.word	0x20000258
 80019b8:	58004000 	.word	0x58004000

080019bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <HAL_FLASH_Unlock+0x38>)
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	da0b      	bge.n	80019e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <HAL_FLASH_Unlock+0x38>)
 80019d0:	4a09      	ldr	r2, [pc, #36]	@ (80019f8 <HAL_FLASH_Unlock+0x3c>)
 80019d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019d4:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <HAL_FLASH_Unlock+0x38>)
 80019d6:	4a09      	ldr	r2, [pc, #36]	@ (80019fc <HAL_FLASH_Unlock+0x40>)
 80019d8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_FLASH_Unlock+0x38>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	da01      	bge.n	80019e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80019e6:	79fb      	ldrb	r3, [r7, #7]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	58004000 	.word	0x58004000
 80019f8:	45670123 	.word	0x45670123
 80019fc:	cdef89ab 	.word	0xcdef89ab

08001a00 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_FLASH_Lock+0x30>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	4a08      	ldr	r2, [pc, #32]	@ (8001a30 <HAL_FLASH_Lock+0x30>)
 8001a10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a14:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_FLASH_Lock+0x30>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db01      	blt.n	8001a22 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001a22:	79fb      	ldrb	r3, [r7, #7]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	58004000 	.word	0x58004000

08001a34 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff fe2e 	bl	800169c <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001a42:	e009      	b.n	8001a58 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001a44:	f7ff fe2a 	bl	800169c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d801      	bhi.n	8001a58 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e053      	b.n	8001b00 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001a58:	4b2b      	ldr	r3, [pc, #172]	@ (8001b08 <FLASH_WaitForLastOperation+0xd4>)
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a64:	d0ee      	beq.n	8001a44 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8001a66:	4b28      	ldr	r3, [pc, #160]	@ (8001b08 <FLASH_WaitForLastOperation+0xd4>)
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a76:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <FLASH_WaitForLastOperation+0xd4>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a86:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <FLASH_WaitForLastOperation+0xd4>)
 8001a88:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a8c:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001a94:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aa6:	d307      	bcc.n	8001ab8 <FLASH_WaitForLastOperation+0x84>
 8001aa8:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <FLASH_WaitForLastOperation+0xd4>)
 8001aaa:	699a      	ldr	r2, [r3, #24]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001ab2:	4915      	ldr	r1, [pc, #84]	@ (8001b08 <FLASH_WaitForLastOperation+0xd4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	618b      	str	r3, [r1, #24]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <FLASH_WaitForLastOperation+0x98>
 8001ac2:	4a11      	ldr	r2, [pc, #68]	@ (8001b08 <FLASH_WaitForLastOperation+0xd4>)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001aca:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00e      	beq.n	8001af0 <FLASH_WaitForLastOperation+0xbc>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8001ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b0c <FLASH_WaitForLastOperation+0xd8>)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e011      	b.n	8001b00 <FLASH_WaitForLastOperation+0xcc>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001adc:	f7ff fdde 	bl	800169c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d801      	bhi.n	8001af0 <FLASH_WaitForLastOperation+0xbc>
    {
      return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e007      	b.n	8001b00 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <FLASH_WaitForLastOperation+0xd4>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001af8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001afc:	d0ee      	beq.n	8001adc <FLASH_WaitForLastOperation+0xa8>
    }
  }

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	58004000 	.word	0x58004000
 8001b0c:	20000258 	.word	0x20000258

08001b10 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <FLASH_Program_DoubleWord+0x48>)
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <FLASH_Program_DoubleWord+0x48>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001b2e:	f3bf 8f6f 	isb	sy
}
 8001b32:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001b34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	000a      	movs	r2, r1
 8001b42:	2300      	movs	r3, #0
 8001b44:	68f9      	ldr	r1, [r7, #12]
 8001b46:	3104      	adds	r1, #4
 8001b48:	4613      	mov	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	58004000 	.word	0x58004000

08001b5c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b66:	4b24      	ldr	r3, [pc, #144]	@ (8001bf8 <HAL_FLASHEx_Erase+0x9c>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_FLASHEx_Erase+0x16>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e03d      	b.n	8001bee <HAL_FLASHEx_Erase+0x92>
 8001b72:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <HAL_FLASHEx_Erase+0x9c>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b78:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <HAL_FLASHEx_Erase+0x9c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b82:	f7ff ff57 	bl	8001a34 <FLASH_WaitForLastOperation>
 8001b86:	4603      	mov	r3, r0
 8001b88:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d12a      	bne.n	8001be6 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d124      	bne.n	8001be2 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b9e:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	e012      	b.n	8001bce <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8001ba8:	68b8      	ldr	r0, [r7, #8]
 8001baa:	f000 f827 	bl	8001bfc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001bae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bb2:	f7ff ff3f 	bl	8001a34 <FLASH_WaitForLastOperation>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	601a      	str	r2, [r3, #0]
          break;
 8001bc6:	e00a      	b.n	8001bde <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d3e4      	bcc.n	8001ba8 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8001bde:	f000 f86f 	bl	8001cc0 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001be2:	f000 f825 	bl	8001c30 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001be6:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <HAL_FLASHEx_Erase+0x9c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]

  return status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000258 	.word	0x20000258

08001bfc <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8001c04:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <FLASH_PageErase+0x30>)
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4313      	orrs	r3, r2
 8001c12:	4a06      	ldr	r2, [pc, #24]	@ (8001c2c <FLASH_PageErase+0x30>)
 8001c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6153      	str	r3, [r2, #20]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	58004000 	.word	0x58004000

08001c30 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8001c34:	4b21      	ldr	r3, [pc, #132]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c40:	d117      	bne.n	8001c72 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001c42:	4b1e      	ldr	r3, [pc, #120]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1d      	ldr	r2, [pc, #116]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001c4c:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1a      	ldr	r2, [pc, #104]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a17      	ldr	r2, [pc, #92]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001c64:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a14      	ldr	r2, [pc, #80]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c70:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8001c72:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c7e:	d117      	bne.n	8001cb0 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001c80:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c8a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a07      	ldr	r2, [pc, #28]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001c9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ca2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a04      	ldr	r2, [pc, #16]	@ (8001cbc <FLASH_FlushCaches+0x8c>)
 8001caa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cae:	6013      	str	r3, [r2, #0]
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	58004000 	.word	0x58004000

08001cc0 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <FLASH_AcknowledgePageErase+0x20>)
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	4a05      	ldr	r2, [pc, #20]	@ (8001ce0 <FLASH_AcknowledgePageErase+0x20>)
 8001cca:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001cce:	f023 0302 	bic.w	r3, r3, #2
 8001cd2:	6153      	str	r3, [r2, #20]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	58004000 	.word	0x58004000

08001ce4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	e14c      	b.n	8001f8e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	4013      	ands	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 813e 	beq.w	8001f88 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d005      	beq.n	8001d24 <HAL_GPIO_Init+0x40>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d130      	bne.n	8001d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f003 0201 	and.w	r2, r3, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d017      	beq.n	8001dc2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d123      	bne.n	8001e16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	08da      	lsrs	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3208      	adds	r2, #8
 8001dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	691a      	ldr	r2, [r3, #16]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	08da      	lsrs	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3208      	adds	r2, #8
 8001e10:	6939      	ldr	r1, [r7, #16]
 8001e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	2203      	movs	r2, #3
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0203 	and.w	r2, r3, #3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8098 	beq.w	8001f88 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e58:	4a54      	ldr	r2, [pc, #336]	@ (8001fac <HAL_GPIO_Init+0x2c8>)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e82:	d019      	beq.n	8001eb8 <HAL_GPIO_Init+0x1d4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a4a      	ldr	r2, [pc, #296]	@ (8001fb0 <HAL_GPIO_Init+0x2cc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d013      	beq.n	8001eb4 <HAL_GPIO_Init+0x1d0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a49      	ldr	r2, [pc, #292]	@ (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00d      	beq.n	8001eb0 <HAL_GPIO_Init+0x1cc>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a48      	ldr	r2, [pc, #288]	@ (8001fb8 <HAL_GPIO_Init+0x2d4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d007      	beq.n	8001eac <HAL_GPIO_Init+0x1c8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a47      	ldr	r2, [pc, #284]	@ (8001fbc <HAL_GPIO_Init+0x2d8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d101      	bne.n	8001ea8 <HAL_GPIO_Init+0x1c4>
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	e008      	b.n	8001eba <HAL_GPIO_Init+0x1d6>
 8001ea8:	2307      	movs	r3, #7
 8001eaa:	e006      	b.n	8001eba <HAL_GPIO_Init+0x1d6>
 8001eac:	2303      	movs	r3, #3
 8001eae:	e004      	b.n	8001eba <HAL_GPIO_Init+0x1d6>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e002      	b.n	8001eba <HAL_GPIO_Init+0x1d6>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_GPIO_Init+0x1d6>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	f002 0203 	and.w	r2, r2, #3
 8001ec0:	0092      	lsls	r2, r2, #2
 8001ec2:	4093      	lsls	r3, r2
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eca:	4938      	ldr	r1, [pc, #224]	@ (8001fac <HAL_GPIO_Init+0x2c8>)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ed8:	4b39      	ldr	r3, [pc, #228]	@ (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001efc:	4a30      	ldr	r2, [pc, #192]	@ (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f02:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f26:	4a26      	ldr	r2, [pc, #152]	@ (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f2c:	4b24      	ldr	r3, [pc, #144]	@ (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f52:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8001f5a:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f80:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f47f aeab 	bne.w	8001cf4 <HAL_GPIO_Init+0x10>
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	bf00      	nop
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	48000400 	.word	0x48000400
 8001fb4:	48000800 	.word	0x48000800
 8001fb8:	48000c00 	.word	0x48000c00
 8001fbc:	48001000 	.word	0x48001000
 8001fc0:	58000800 	.word	0x58000800

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4013      	ands	r3, r2
 800200c:	041a      	lsls	r2, r3, #16
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43d9      	mvns	r1, r3
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	400b      	ands	r3, r1
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800202c:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a04      	ldr	r2, [pc, #16]	@ (8002044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	58000400 	.word	0x58000400

08002048 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <HAL_PWREx_GetVoltageRange+0x18>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	58000400 	.word	0x58000400

08002064 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002076:	d101      	bne.n	800207c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b8:	6013      	str	r3, [r2, #0]
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80020d6:	d101      	bne.n	80020dc <LL_RCC_HSE_IsReady+0x18>
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <LL_RCC_HSE_IsReady+0x1a>
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800210a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002118:	6013      	str	r3, [r2, #0]
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002136:	d101      	bne.n	800213c <LL_RCC_HSI_IsReady+0x18>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <LL_RCC_HSI_IsReady+0x1a>
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	061b      	lsls	r3, r3, #24
 800215e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800217a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800217e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800219c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80021ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d101      	bne.n	80021ce <LL_RCC_HSI48_IsReady+0x18>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <LL_RCC_HSI48_IsReady+0x1a>
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002208:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800224c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002250:	f023 0304 	bic.w	r3, r3, #4
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b02      	cmp	r3, #2
 8002274:	d101      	bne.n	800227a <LL_RCC_LSE_IsReady+0x18>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <LL_RCC_LSE_IsReady+0x1a>
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800228a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800228e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002292:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80022ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d101      	bne.n	80022e2 <LL_RCC_LSI1_IsReady+0x18>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <LL_RCC_LSI1_IsReady+0x1a>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80022f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022fe:	f043 0304 	orr.w	r3, r3, #4
 8002302:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800231c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002320:	f023 0304 	bic.w	r3, r3, #4
 8002324:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800233a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b08      	cmp	r3, #8
 8002344:	d101      	bne.n	800234a <LL_RCC_LSI2_IsReady+0x18>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <LL_RCC_LSI2_IsReady+0x1a>
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800235e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002362:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002366:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80023a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6013      	str	r3, [r2, #0]
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80023c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d101      	bne.n	80023d6 <LL_RCC_MSI_IsReady+0x16>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <LL_RCC_MSI_IsReady+0x18>
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800241a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002420:	d901      	bls.n	8002426 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002422:	23b0      	movs	r3, #176	@ 0xb0
 8002424:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002426:	687b      	ldr	r3, [r7, #4]
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800243c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 0203 	bic.w	r2, r3, #3
 8002470:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80024a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80024d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80024fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002502:	f023 020f 	bic.w	r2, r3, #15
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002532:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800255a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002590:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80025a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80025c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025e6:	6013      	str	r3, [r2, #0]
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80025f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002600:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002604:	6013      	str	r3, [r2, #0]
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002622:	d101      	bne.n	8002628 <LL_RCC_PLL_IsReady+0x18>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <LL_RCC_PLL_IsReady+0x1a>
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800266a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0303 	and.w	r3, r3, #3
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a8:	d101      	bne.n	80026ae <LL_RCC_IsActiveFlag_HPRE+0x18>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80026be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80026c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026ce:	d101      	bne.n	80026d4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80026e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80026ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f4:	d101      	bne.n	80026fa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800270a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002718:	d101      	bne.n	800271e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800272e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002738:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800273c:	d101      	bne.n	8002742 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b08d      	sub	sp, #52	@ 0x34
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e363      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 808d 	beq.w	800288a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002770:	f7ff fe89 	bl	8002486 <LL_RCC_GetSysClkSource>
 8002774:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002776:	f7ff ff82 	bl	800267e <LL_RCC_PLL_GetMainSource>
 800277a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800277c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x3e>
 8002782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002784:	2b0c      	cmp	r3, #12
 8002786:	d147      	bne.n	8002818 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278a:	2b01      	cmp	r3, #1
 800278c:	d144      	bne.n	8002818 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e347      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800279e:	f7ff fe34 	bl	800240a <LL_RCC_MSI_GetRange>
 80027a2:	4603      	mov	r3, r0
 80027a4:	429c      	cmp	r4, r3
 80027a6:	d914      	bls.n	80027d2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fd2f 	bl	8003210 <RCC_SetFlashLatencyFromMSIRange>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e336      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fe0e 	bl	80023e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fe32 	bl	8002434 <LL_RCC_MSI_SetCalibTrimming>
 80027d0:	e013      	b.n	80027fa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fe03 	bl	80023e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fe27 	bl	8002434 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fd10 	bl	8003210 <RCC_SetFlashLatencyFromMSIRange>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e317      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80027fa:	f000 fcc9 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80027fe:	4603      	mov	r3, r0
 8002800:	4aa4      	ldr	r2, [pc, #656]	@ (8002a94 <HAL_RCC_OscConfig+0x344>)
 8002802:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002804:	4ba4      	ldr	r3, [pc, #656]	@ (8002a98 <HAL_RCC_OscConfig+0x348>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fef9 	bl	8001600 <HAL_InitTick>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d039      	beq.n	8002888 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e308      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01e      	beq.n	800285e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002820:	f7ff fdb0 	bl	8002384 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002824:	f7fe ff3a 	bl	800169c <HAL_GetTick>
 8002828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800282c:	f7fe ff36 	bl	800169c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e2f5      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800283e:	f7ff fdbf 	bl	80023c0 <LL_RCC_MSI_IsReady>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f1      	beq.n	800282c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fdc8 	bl	80023e2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fdec 	bl	8002434 <LL_RCC_MSI_SetCalibTrimming>
 800285c:	e015      	b.n	800288a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800285e:	f7ff fda0 	bl	80023a2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002862:	f7fe ff1b 	bl	800169c <HAL_GetTick>
 8002866:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800286a:	f7fe ff17 	bl	800169c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e2d6      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800287c:	f7ff fda0 	bl	80023c0 <LL_RCC_MSI_IsReady>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f1      	bne.n	800286a <HAL_RCC_OscConfig+0x11a>
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002888:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d047      	beq.n	8002926 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002896:	f7ff fdf6 	bl	8002486 <LL_RCC_GetSysClkSource>
 800289a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800289c:	f7ff feef 	bl	800267e <LL_RCC_PLL_GetMainSource>
 80028a0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_OscConfig+0x164>
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d108      	bne.n	80028c0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d105      	bne.n	80028c0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d134      	bne.n	8002926 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e2b4      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c8:	d102      	bne.n	80028d0 <HAL_RCC_OscConfig+0x180>
 80028ca:	f7ff fbdd 	bl	8002088 <LL_RCC_HSE_Enable>
 80028ce:	e001      	b.n	80028d4 <HAL_RCC_OscConfig+0x184>
 80028d0:	f7ff fbe9 	bl	80020a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d012      	beq.n	8002902 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe fede 	bl	800169c <HAL_GetTick>
 80028e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7fe feda 	bl	800169c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	@ 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e299      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80028f6:	f7ff fbe5 	bl	80020c4 <LL_RCC_HSE_IsReady>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f1      	beq.n	80028e4 <HAL_RCC_OscConfig+0x194>
 8002900:	e011      	b.n	8002926 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe fecb 	bl	800169c <HAL_GetTick>
 8002906:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290a:	f7fe fec7 	bl	800169c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b64      	cmp	r3, #100	@ 0x64
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e286      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800291c:	f7ff fbd2 	bl	80020c4 <LL_RCC_HSE_IsReady>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f1      	bne.n	800290a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d04c      	beq.n	80029cc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002932:	f7ff fda8 	bl	8002486 <LL_RCC_GetSysClkSource>
 8002936:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002938:	f7ff fea1 	bl	800267e <LL_RCC_PLL_GetMainSource>
 800293c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d005      	beq.n	8002950 <HAL_RCC_OscConfig+0x200>
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b0c      	cmp	r3, #12
 8002948:	d10e      	bne.n	8002968 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d10b      	bne.n	8002968 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e266      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fbf1 	bl	8002148 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002966:	e031      	b.n	80029cc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d019      	beq.n	80029a4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002970:	f7ff fbba 	bl	80020e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fe92 	bl	800169c <HAL_GetTick>
 8002978:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297c:	f7fe fe8e 	bl	800169c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e24d      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800298e:	f7ff fbc9 	bl	8002124 <LL_RCC_HSI_IsReady>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f1      	beq.n	800297c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fbd3 	bl	8002148 <LL_RCC_HSI_SetCalibTrimming>
 80029a2:	e013      	b.n	80029cc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a4:	f7ff fbaf 	bl	8002106 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fe78 	bl	800169c <HAL_GetTick>
 80029ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b0:	f7fe fe74 	bl	800169c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e233      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80029c2:	f7ff fbaf 	bl	8002124 <LL_RCC_HSI_IsReady>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f1      	bne.n	80029b0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80a3 	beq.w	8002b2c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d076      	beq.n	8002adc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d046      	beq.n	8002a88 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80029fa:	f7ff fc66 	bl	80022ca <LL_RCC_LSI1_IsReady>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d113      	bne.n	8002a2c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002a04:	f7ff fc3f 	bl	8002286 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a08:	f7fe fe48 	bl	800169c <HAL_GetTick>
 8002a0c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a10:	f7fe fe44 	bl	800169c <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e203      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002a22:	f7ff fc52 	bl	80022ca <LL_RCC_LSI1_IsReady>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f1      	beq.n	8002a10 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002a2c:	f7ff fc5f 	bl	80022ee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fe34 	bl	800169c <HAL_GetTick>
 8002a34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a38:	f7fe fe30 	bl	800169c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e1ef      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002a4a:	f7ff fc72 	bl	8002332 <LL_RCC_LSI2_IsReady>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f1      	beq.n	8002a38 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fc7c 	bl	8002356 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002a5e:	f7ff fc23 	bl	80022a8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a62:	f7fe fe1b 	bl	800169c <HAL_GetTick>
 8002a66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a6a:	f7fe fe17 	bl	800169c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e1d6      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002a7c:	f7ff fc25 	bl	80022ca <LL_RCC_LSI1_IsReady>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f1      	bne.n	8002a6a <HAL_RCC_OscConfig+0x31a>
 8002a86:	e051      	b.n	8002b2c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002a88:	f7ff fbfd 	bl	8002286 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fe06 	bl	800169c <HAL_GetTick>
 8002a90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002a92:	e00c      	b.n	8002aae <HAL_RCC_OscConfig+0x35e>
 8002a94:	20000008 	.word	0x20000008
 8002a98:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a9c:	f7fe fdfe 	bl	800169c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e1bd      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002aae:	f7ff fc0c 	bl	80022ca <LL_RCC_LSI1_IsReady>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f1      	beq.n	8002a9c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002ab8:	f7ff fc2a 	bl	8002310 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002abe:	f7fe fded 	bl	800169c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1ac      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002ad0:	f7ff fc2f 	bl	8002332 <LL_RCC_LSI2_IsReady>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f1      	bne.n	8002abe <HAL_RCC_OscConfig+0x36e>
 8002ada:	e027      	b.n	8002b2c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002adc:	f7ff fc18 	bl	8002310 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fddc 	bl	800169c <HAL_GetTick>
 8002ae4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002ae8:	f7fe fdd8 	bl	800169c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e197      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002afa:	f7ff fc1a 	bl	8002332 <LL_RCC_LSI2_IsReady>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f1      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002b04:	f7ff fbd0 	bl	80022a8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe fdc8 	bl	800169c <HAL_GetTick>
 8002b0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002b10:	f7fe fdc4 	bl	800169c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e183      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002b22:	f7ff fbd2 	bl	80022ca <LL_RCC_LSI1_IsReady>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f1      	bne.n	8002b10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d05b      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b38:	4ba7      	ldr	r3, [pc, #668]	@ (8002dd8 <HAL_RCC_OscConfig+0x688>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d114      	bne.n	8002b6e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002b44:	f7ff fa70 	bl	8002028 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b48:	f7fe fda8 	bl	800169c <HAL_GetTick>
 8002b4c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b50:	f7fe fda4 	bl	800169c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e163      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b62:	4b9d      	ldr	r3, [pc, #628]	@ (8002dd8 <HAL_RCC_OscConfig+0x688>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d102      	bne.n	8002b7c <HAL_RCC_OscConfig+0x42c>
 8002b76:	f7ff fb30 	bl	80021da <LL_RCC_LSE_Enable>
 8002b7a:	e00c      	b.n	8002b96 <HAL_RCC_OscConfig+0x446>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b05      	cmp	r3, #5
 8002b82:	d104      	bne.n	8002b8e <HAL_RCC_OscConfig+0x43e>
 8002b84:	f7ff fb4b 	bl	800221e <LL_RCC_LSE_EnableBypass>
 8002b88:	f7ff fb27 	bl	80021da <LL_RCC_LSE_Enable>
 8002b8c:	e003      	b.n	8002b96 <HAL_RCC_OscConfig+0x446>
 8002b8e:	f7ff fb35 	bl	80021fc <LL_RCC_LSE_Disable>
 8002b92:	f7ff fb55 	bl	8002240 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d014      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7fe fd7d 	bl	800169c <HAL_GetTick>
 8002ba2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fe fd79 	bl	800169c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e136      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002bbc:	f7ff fb51 	bl	8002262 <LL_RCC_LSE_IsReady>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0ef      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x456>
 8002bc6:	e013      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fe fd68 	bl	800169c <HAL_GetTick>
 8002bcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fd64 	bl	800169c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e121      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002be6:	f7ff fb3c 	bl	8002262 <LL_RCC_LSE_IsReady>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ef      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d02c      	beq.n	8002c56 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d014      	beq.n	8002c2e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c04:	f7ff fab5 	bl	8002172 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fe fd48 	bl	800169c <HAL_GetTick>
 8002c0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c10:	f7fe fd44 	bl	800169c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e103      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002c22:	f7ff fac8 	bl	80021b6 <LL_RCC_HSI48_IsReady>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f1      	beq.n	8002c10 <HAL_RCC_OscConfig+0x4c0>
 8002c2c:	e013      	b.n	8002c56 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c2e:	f7ff fab1 	bl	8002194 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c32:	f7fe fd33 	bl	800169c <HAL_GetTick>
 8002c36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c3a:	f7fe fd2f 	bl	800169c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e0ee      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002c4c:	f7ff fab3 	bl	80021b6 <LL_RCC_HSI48_IsReady>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f1      	bne.n	8002c3a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80e4 	beq.w	8002e28 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c60:	f7ff fc11 	bl	8002486 <LL_RCC_GetSysClkSource>
 8002c64:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	f040 80b4 	bne.w	8002de0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 0203 	and.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d123      	bne.n	8002cce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d11c      	bne.n	8002cce <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d114      	bne.n	8002cce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d10d      	bne.n	8002cce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d106      	bne.n	8002cce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d05d      	beq.n	8002d8a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d058      	beq.n	8002d86 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e0a1      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ce6:	f7ff fc84 	bl	80025f2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cea:	f7fe fcd7 	bl	800169c <HAL_GetTick>
 8002cee:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7fe fcd3 	bl	800169c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e092      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ef      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	4b30      	ldr	r3, [pc, #192]	@ (8002ddc <HAL_RCC_OscConfig+0x68c>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d24:	4311      	orrs	r1, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d2a:	0212      	lsls	r2, r2, #8
 8002d2c:	4311      	orrs	r1, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d32:	4311      	orrs	r1, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d38:	4311      	orrs	r1, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d48:	f7ff fc44 	bl	80025d4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d5c:	f7fe fc9e 	bl	800169c <HAL_GetTick>
 8002d60:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe fc9a 	bl	800169c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e059      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0ef      	beq.n	8002d64 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d84:	e050      	b.n	8002e28 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e04f      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d147      	bne.n	8002e28 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d98:	f7ff fc1c 	bl	80025d4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002daa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dac:	f7fe fc76 	bl	800169c <HAL_GetTick>
 8002db0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db4:	f7fe fc72 	bl	800169c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e031      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ef      	beq.n	8002db4 <HAL_RCC_OscConfig+0x664>
 8002dd4:	e028      	b.n	8002e28 <HAL_RCC_OscConfig+0x6d8>
 8002dd6:	bf00      	nop
 8002dd8:	58000400 	.word	0x58000400
 8002ddc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d01e      	beq.n	8002e24 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	f7ff fc04 	bl	80025f2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fe fc57 	bl	800169c <HAL_GetTick>
 8002dee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df2:	f7fe fc53 	bl	800169c <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e012      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ef      	bne.n	8002df2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e1c:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <HAL_RCC_OscConfig+0x6e4>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	60cb      	str	r3, [r1, #12]
 8002e22:	e001      	b.n	8002e28 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3734      	adds	r7, #52	@ 0x34
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd90      	pop	{r4, r7, pc}
 8002e32:	bf00      	nop
 8002e34:	eefefffc 	.word	0xeefefffc

08002e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e12d      	b.n	80030a8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b98      	ldr	r3, [pc, #608]	@ (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d91b      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b95      	ldr	r3, [pc, #596]	@ (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 0207 	bic.w	r2, r3, #7
 8002e62:	4993      	ldr	r1, [pc, #588]	@ (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6a:	f7fe fc17 	bl	800169c <HAL_GetTick>
 8002e6e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e72:	f7fe fc13 	bl	800169c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e111      	b.n	80030a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e84:	4b8a      	ldr	r3, [pc, #552]	@ (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d1ef      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d016      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fafb 	bl	800249e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ea8:	f7fe fbf8 	bl	800169c <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eb0:	f7fe fbf4 	bl	800169c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e0f2      	b.n	80030a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002ec2:	f7ff fbe8 	bl	8002696 <LL_RCC_IsActiveFlag_HPRE>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f1      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d016      	beq.n	8002f06 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff faf2 	bl	80024c6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ee2:	f7fe fbdb 	bl	800169c <HAL_GetTick>
 8002ee6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eea:	f7fe fbd7 	bl	800169c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e0d5      	b.n	80030a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002efc:	f7ff fbdd 	bl	80026ba <LL_RCC_IsActiveFlag_C2HPRE>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f1      	beq.n	8002eea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d016      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff faeb 	bl	80024f2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f1c:	f7fe fbbe 	bl	800169c <HAL_GetTick>
 8002f20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f24:	f7fe fbba 	bl	800169c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0b8      	b.n	80030a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f36:	f7ff fbd3 	bl	80026e0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f1      	beq.n	8002f24 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d016      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fae5 	bl	8002520 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f56:	f7fe fba1 	bl	800169c <HAL_GetTick>
 8002f5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f5e:	f7fe fb9d 	bl	800169c <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e09b      	b.n	80030a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f70:	f7ff fbc9 	bl	8002706 <LL_RCC_IsActiveFlag_PPRE1>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f1      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d017      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fadb 	bl	8002548 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f92:	f7fe fb83 	bl	800169c <HAL_GetTick>
 8002f96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f9a:	f7fe fb7f 	bl	800169c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e07d      	b.n	80030a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002fac:	f7ff fbbd 	bl	800272a <LL_RCC_IsActiveFlag_PPRE2>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f1      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d043      	beq.n	800304a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d106      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002fca:	f7ff f87b 	bl	80020c4 <LL_RCC_HSE_IsReady>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d11e      	bne.n	8003012 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e067      	b.n	80030a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d106      	bne.n	8002fee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002fe0:	f7ff fb16 	bl	8002610 <LL_RCC_PLL_IsReady>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d113      	bne.n	8003012 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e05c      	b.n	80030a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002ff6:	f7ff f9e3 	bl	80023c0 <LL_RCC_MSI_IsReady>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d108      	bne.n	8003012 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e051      	b.n	80030a8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003004:	f7ff f88e 	bl	8002124 <LL_RCC_HSI_IsReady>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e04a      	b.n	80030a8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fa21 	bl	800245e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800301c:	f7fe fb3e 	bl	800169c <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	e00a      	b.n	800303a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003024:	f7fe fb3a 	bl	800169c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e036      	b.n	80030a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303a:	f7ff fa24 	bl	8002486 <LL_RCC_GetSysClkSource>
 800303e:	4602      	mov	r2, r0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	429a      	cmp	r2, r3
 8003048:	d1ec      	bne.n	8003024 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800304a:	4b19      	ldr	r3, [pc, #100]	@ (80030b0 <HAL_RCC_ClockConfig+0x278>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d21b      	bcs.n	8003090 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003058:	4b15      	ldr	r3, [pc, #84]	@ (80030b0 <HAL_RCC_ClockConfig+0x278>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 0207 	bic.w	r2, r3, #7
 8003060:	4913      	ldr	r1, [pc, #76]	@ (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003068:	f7fe fb18 	bl	800169c <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	e008      	b.n	8003082 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003070:	f7fe fb14 	bl	800169c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e012      	b.n	80030a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <HAL_RCC_ClockConfig+0x278>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d1ef      	bne.n	8003070 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003090:	f000 f87e 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 8003094:	4603      	mov	r3, r0
 8003096:	4a07      	ldr	r2, [pc, #28]	@ (80030b4 <HAL_RCC_ClockConfig+0x27c>)
 8003098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800309a:	f7fe fb0b 	bl	80016b4 <HAL_GetTickPrio>
 800309e:	4603      	mov	r3, r0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe faad 	bl	8001600 <HAL_InitTick>
 80030a6:	4603      	mov	r3, r0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	58004000 	.word	0x58004000
 80030b4:	20000008 	.word	0x20000008

080030b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030be:	f7ff f9e2 	bl	8002486 <LL_RCC_GetSysClkSource>
 80030c2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80030ca:	f7ff f99e 	bl	800240a <LL_RCC_MSI_GetRange>
 80030ce:	4603      	mov	r3, r0
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003184 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	e04b      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d102      	bne.n	80030ec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030e6:	4b28      	ldr	r3, [pc, #160]	@ (8003188 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	e045      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d10a      	bne.n	8003108 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80030f2:	f7fe ffb7 	bl	8002064 <LL_RCC_HSE_IsEnabledDiv2>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d102      	bne.n	8003102 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80030fc:	4b22      	ldr	r3, [pc, #136]	@ (8003188 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e03a      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003102:	4b22      	ldr	r3, [pc, #136]	@ (800318c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	e037      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003108:	f7ff fab9 	bl	800267e <LL_RCC_PLL_GetMainSource>
 800310c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d003      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x64>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d003      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0x6a>
 800311a:	e00d      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800311c:	4b1a      	ldr	r3, [pc, #104]	@ (8003188 <HAL_RCC_GetSysClockFreq+0xd0>)
 800311e:	60bb      	str	r3, [r7, #8]
        break;
 8003120:	e015      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003122:	f7fe ff9f 	bl	8002064 <LL_RCC_HSE_IsEnabledDiv2>
 8003126:	4603      	mov	r3, r0
 8003128:	2b01      	cmp	r3, #1
 800312a:	d102      	bne.n	8003132 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800312c:	4b16      	ldr	r3, [pc, #88]	@ (8003188 <HAL_RCC_GetSysClockFreq+0xd0>)
 800312e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003130:	e00d      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003132:	4b16      	ldr	r3, [pc, #88]	@ (800318c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003134:	60bb      	str	r3, [r7, #8]
        break;
 8003136:	e00a      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003138:	f7ff f967 	bl	800240a <LL_RCC_MSI_GetRange>
 800313c:	4603      	mov	r3, r0
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	4a0f      	ldr	r2, [pc, #60]	@ (8003184 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314a:	60bb      	str	r3, [r7, #8]
        break;
 800314c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800314e:	f7ff fa71 	bl	8002634 <LL_RCC_PLL_GetN>
 8003152:	4602      	mov	r2, r0
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	fb03 f402 	mul.w	r4, r3, r2
 800315a:	f7ff fa84 	bl	8002666 <LL_RCC_PLL_GetDivider>
 800315e:	4603      	mov	r3, r0
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	3301      	adds	r3, #1
 8003164:	fbb4 f4f3 	udiv	r4, r4, r3
 8003168:	f7ff fa71 	bl	800264e <LL_RCC_PLL_GetR>
 800316c:	4603      	mov	r3, r0
 800316e:	0f5b      	lsrs	r3, r3, #29
 8003170:	3301      	adds	r3, #1
 8003172:	fbb4 f3f3 	udiv	r3, r4, r3
 8003176:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003178:	68fb      	ldr	r3, [r7, #12]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bd90      	pop	{r4, r7, pc}
 8003182:	bf00      	nop
 8003184:	08005bcc 	.word	0x08005bcc
 8003188:	00f42400 	.word	0x00f42400
 800318c:	01e84800 	.word	0x01e84800

08003190 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003190:	b598      	push	{r3, r4, r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003194:	f7ff ff90 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003198:	4604      	mov	r4, r0
 800319a:	f7ff f9e9 	bl	8002570 <LL_RCC_GetAHBPrescaler>
 800319e:	4603      	mov	r3, r0
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	4a03      	ldr	r2, [pc, #12]	@ (80031b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80031a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd98      	pop	{r3, r4, r7, pc}
 80031b4:	08005b6c 	.word	0x08005b6c

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b598      	push	{r3, r4, r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80031bc:	f7ff ffe8 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031c0:	4604      	mov	r4, r0
 80031c2:	f7ff f9ef 	bl	80025a4 <LL_RCC_GetAPB1Prescaler>
 80031c6:	4603      	mov	r3, r0
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	4a04      	ldr	r2, [pc, #16]	@ (80031e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd98      	pop	{r3, r4, r7, pc}
 80031e0:	08005bac 	.word	0x08005bac

080031e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e4:	b598      	push	{r3, r4, r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80031e8:	f7ff ffd2 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031ec:	4604      	mov	r4, r0
 80031ee:	f7ff f9e5 	bl	80025bc <LL_RCC_GetAPB2Prescaler>
 80031f2:	4603      	mov	r3, r0
 80031f4:	0adb      	lsrs	r3, r3, #11
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	4a04      	ldr	r2, [pc, #16]	@ (800320c <HAL_RCC_GetPCLK2Freq+0x28>)
 80031fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd98      	pop	{r3, r4, r7, pc}
 800320c:	08005bac 	.word	0x08005bac

08003210 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2bb0      	cmp	r3, #176	@ 0xb0
 800321c:	d903      	bls.n	8003226 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800321e:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e007      	b.n	8003236 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	4a11      	ldr	r2, [pc, #68]	@ (8003274 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003234:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003236:	f7ff f9a7 	bl	8002588 <LL_RCC_GetAHB4Prescaler>
 800323a:	4603      	mov	r3, r0
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	4a0d      	ldr	r2, [pc, #52]	@ (8003278 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4a0a      	ldr	r2, [pc, #40]	@ (800327c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	0c9c      	lsrs	r4, r3, #18
 800325a:	f7fe fef5 	bl	8002048 <HAL_PWREx_GetVoltageRange>
 800325e:	4603      	mov	r3, r0
 8003260:	4619      	mov	r1, r3
 8003262:	4620      	mov	r0, r4
 8003264:	f000 f80c 	bl	8003280 <RCC_SetFlashLatency>
 8003268:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bd90      	pop	{r4, r7, pc}
 8003272:	bf00      	nop
 8003274:	08005bcc 	.word	0x08005bcc
 8003278:	08005b6c 	.word	0x08005b6c
 800327c:	431bde83 	.word	0x431bde83

08003280 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b093      	sub	sp, #76	@ 0x4c
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800328a:	4b37      	ldr	r3, [pc, #220]	@ (8003368 <RCC_SetFlashLatency+0xe8>)
 800328c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003290:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003292:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003296:	4a35      	ldr	r2, [pc, #212]	@ (800336c <RCC_SetFlashLatency+0xec>)
 8003298:	f107 031c 	add.w	r3, r7, #28
 800329c:	ca07      	ldmia	r2, {r0, r1, r2}
 800329e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80032a2:	4b33      	ldr	r3, [pc, #204]	@ (8003370 <RCC_SetFlashLatency+0xf0>)
 80032a4:	f107 040c 	add.w	r4, r7, #12
 80032a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80032ae:	2300      	movs	r3, #0
 80032b0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032b8:	d11a      	bne.n	80032f0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80032be:	e013      	b.n	80032e8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80032c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	3348      	adds	r3, #72	@ 0x48
 80032c6:	443b      	add	r3, r7
 80032c8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d807      	bhi.n	80032e2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80032d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	3348      	adds	r3, #72	@ 0x48
 80032d8:	443b      	add	r3, r7
 80032da:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80032de:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80032e0:	e020      	b.n	8003324 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80032e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e4:	3301      	adds	r3, #1
 80032e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80032e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d9e8      	bls.n	80032c0 <RCC_SetFlashLatency+0x40>
 80032ee:	e019      	b.n	8003324 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80032f0:	2300      	movs	r3, #0
 80032f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032f4:	e013      	b.n	800331e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80032f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	3348      	adds	r3, #72	@ 0x48
 80032fc:	443b      	add	r3, r7
 80032fe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	429a      	cmp	r2, r3
 8003306:	d807      	bhi.n	8003318 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	3348      	adds	r3, #72	@ 0x48
 800330e:	443b      	add	r3, r7
 8003310:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003314:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003316:	e005      	b.n	8003324 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800331a:	3301      	adds	r3, #1
 800331c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800331e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003320:	2b02      	cmp	r3, #2
 8003322:	d9e8      	bls.n	80032f6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003324:	4b13      	ldr	r3, [pc, #76]	@ (8003374 <RCC_SetFlashLatency+0xf4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f023 0207 	bic.w	r2, r3, #7
 800332c:	4911      	ldr	r1, [pc, #68]	@ (8003374 <RCC_SetFlashLatency+0xf4>)
 800332e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003330:	4313      	orrs	r3, r2
 8003332:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003334:	f7fe f9b2 	bl	800169c <HAL_GetTick>
 8003338:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800333a:	e008      	b.n	800334e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800333c:	f7fe f9ae 	bl	800169c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e007      	b.n	800335e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800334e:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <RCC_SetFlashLatency+0xf4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003358:	429a      	cmp	r2, r3
 800335a:	d1ef      	bne.n	800333c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	374c      	adds	r7, #76	@ 0x4c
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	bf00      	nop
 8003368:	08005b40 	.word	0x08005b40
 800336c:	08005b50 	.word	0x08005b50
 8003370:	08005b5c 	.word	0x08005b5c
 8003374:	58004000 	.word	0x58004000

08003378 <LL_RCC_LSE_IsEnabled>:
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800337c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <LL_RCC_LSE_IsEnabled+0x18>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <LL_RCC_LSE_IsEnabled+0x1a>
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_RCC_LSE_IsReady>:
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80033a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d101      	bne.n	80033b4 <LL_RCC_LSE_IsReady+0x18>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <LL_RCC_LSE_IsReady+0x1a>
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_RCC_SetRFWKPClockSource>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80033c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_RCC_SetSMPSClockSource>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80033f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	f023 0203 	bic.w	r2, r3, #3
 80033fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4313      	orrs	r3, r2
 8003406:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <LL_RCC_SetSMPSPrescaler>:
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800341c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003426:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4313      	orrs	r3, r2
 800342e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_RCC_SetUSARTClockSource>:
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344c:	f023 0203 	bic.w	r2, r3, #3
 8003450:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_RCC_SetLPUARTClockSource>:
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003478:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800347c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_RCC_SetI2CClockSource>:
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800349c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80034ac:	43db      	mvns	r3, r3
 80034ae:	401a      	ands	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80034b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <LL_RCC_SetLPTIMClockSource>:
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80034d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034da:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	43db      	mvns	r3, r3
 80034e6:	401a      	ands	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	041b      	lsls	r3, r3, #16
 80034ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <LL_RCC_SetSAIClockSource>:
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800350a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003512:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003516:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <LL_RCC_SetRNGClockSource>:
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003542:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <LL_RCC_SetCLK48ClockSource>:
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800356e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <LL_RCC_SetUSBClockSource>:
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ffe3 	bl	800355a <LL_RCC_SetCLK48ClockSource>
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <LL_RCC_SetADCClockSource>:
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80035a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ac:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <LL_RCC_SetRTCClockSource>:
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80035d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_RCC_GetRTCClockSource>:
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80035f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003600:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003604:	4618      	mov	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <LL_RCC_ForceBackupDomainReset>:
{
 800360e:	b480      	push	{r7}
 8003610:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800361e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003626:	bf00      	nop
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <LL_RCC_PLLSAI1_Enable>:
{
 8003652:	b480      	push	{r7}
 8003654:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003660:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003664:	6013      	str	r3, [r2, #0]
}
 8003666:	bf00      	nop
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <LL_RCC_PLLSAI1_Disable>:
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800367e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003682:	6013      	str	r3, [r2, #0]
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <LL_RCC_PLLSAI1_IsReady>:
{
 800368e:	b480      	push	{r7}
 8003690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800369c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036a0:	d101      	bne.n	80036a6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b088      	sub	sp, #32
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80036ba:	2300      	movs	r3, #0
 80036bc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80036be:	2300      	movs	r3, #0
 80036c0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d034      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036d6:	d021      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80036d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036dc:	d81b      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036e2:	d01d      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80036e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036e8:	d815      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80036ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036f2:	d110      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80036f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003702:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003704:	e00d      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3304      	adds	r3, #4
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f947 	bl	800399e <RCCEx_PLLSAI1_ConfigNP>
 8003710:	4603      	mov	r3, r0
 8003712:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003714:	e005      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	77fb      	strb	r3, [r7, #31]
        break;
 800371a:	e002      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800371c:	bf00      	nop
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003722:	7ffb      	ldrb	r3, [r7, #31]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fee8 	bl	8003502 <LL_RCC_SetSAIClockSource>
 8003732:	e001      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	7ffb      	ldrb	r3, [r7, #31]
 8003736:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003740:	2b00      	cmp	r3, #0
 8003742:	d046      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003744:	f7ff ff56 	bl	80035f4 <LL_RCC_GetRTCClockSource>
 8003748:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	429a      	cmp	r2, r3
 8003752:	d03c      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003754:	f7fe fc68 	bl	8002028 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d105      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff ff30 	bl	80035c8 <LL_RCC_SetRTCClockSource>
 8003768:	e02e      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003772:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003774:	f7ff ff4b 	bl	800360e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003778:	f7ff ff5a 	bl	8003630 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800378a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003794:	f7ff fdf0 	bl	8003378 <LL_RCC_LSE_IsEnabled>
 8003798:	4603      	mov	r3, r0
 800379a:	2b01      	cmp	r3, #1
 800379c:	d114      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800379e:	f7fd ff7d 	bl	800169c <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80037a4:	e00b      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fd ff79 	bl	800169c <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d902      	bls.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	77fb      	strb	r3, [r7, #31]
              break;
 80037bc:	e004      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80037be:	f7ff fded 	bl	800339c <LL_RCC_LSE_IsReady>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d1ee      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80037c8:	7ffb      	ldrb	r3, [r7, #31]
 80037ca:	77bb      	strb	r3, [r7, #30]
 80037cc:	e001      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ce:	7ffb      	ldrb	r3, [r7, #31]
 80037d0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d004      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fe2a 	bl	800343c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fe35 	bl	8003468 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fe5d 	bl	80034ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d004      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fe52 	bl	80034ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fe2a 	bl	8003494 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d004      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fe1f 	bl	8003494 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d022      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fe8d 	bl	8003586 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003874:	d107      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003880:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003884:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800388e:	d10b      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f8dd 	bl	8003a54 <RCCEx_PLLSAI1_ConfigNQ>
 800389a:	4603      	mov	r3, r0
 800389c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800389e:	7ffb      	ldrb	r3, [r7, #31]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80038a4:	7ffb      	ldrb	r3, [r7, #31]
 80038a6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d02b      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038bc:	d008      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038c6:	d003      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d105      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fe2a 	bl	800352e <LL_RCC_SetRNGClockSource>
 80038da:	e00a      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	2000      	movs	r0, #0
 80038e8:	f7ff fe21 	bl	800352e <LL_RCC_SetRNGClockSource>
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff fe34 	bl	800355a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80038fa:	d107      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80038fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800390a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003914:	2b00      	cmp	r3, #0
 8003916:	d022      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fe3d 	bl	800359c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800392a:	d107      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800392c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800393a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003940:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003944:	d10b      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3304      	adds	r3, #4
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f8dd 	bl	8003b0a <RCCEx_PLLSAI1_ConfigNR>
 8003950:	4603      	mov	r3, r0
 8003952:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003954:	7ffb      	ldrb	r3, [r7, #31]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800395a:	7ffb      	ldrb	r3, [r7, #31]
 800395c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d004      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff fd26 	bl	80033c0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d009      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fd45 	bl	8003414 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fd2c 	bl	80033ec <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003994:	7fbb      	ldrb	r3, [r7, #30]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80039aa:	f7ff fe61 	bl	8003670 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039ae:	f7fd fe75 	bl	800169c <HAL_GetTick>
 80039b2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039b4:	e009      	b.n	80039ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039b6:	f7fd fe71 	bl	800169c <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d902      	bls.n	80039ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	73fb      	strb	r3, [r7, #15]
      break;
 80039c8:	e004      	b.n	80039d4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039ca:	f7ff fe60 	bl	800368e <LL_RCC_PLLSAI1_IsReady>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f0      	bne.n	80039b6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d137      	bne.n	8003a4a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80039da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039ee:	4313      	orrs	r3, r2
 80039f0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80039f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a04:	4313      	orrs	r3, r2
 8003a06:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a08:	f7ff fe23 	bl	8003652 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a0c:	f7fd fe46 	bl	800169c <HAL_GetTick>
 8003a10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a12:	e009      	b.n	8003a28 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a14:	f7fd fe42 	bl	800169c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d902      	bls.n	8003a28 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	73fb      	strb	r3, [r7, #15]
        break;
 8003a26:	e004      	b.n	8003a32 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a28:	f7ff fe31 	bl	800368e <LL_RCC_PLLSAI1_IsReady>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d1f0      	bne.n	8003a14 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d108      	bne.n	8003a4a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a46:	4313      	orrs	r3, r2
 8003a48:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003a60:	f7ff fe06 	bl	8003670 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a64:	f7fd fe1a 	bl	800169c <HAL_GetTick>
 8003a68:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a6a:	e009      	b.n	8003a80 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a6c:	f7fd fe16 	bl	800169c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d902      	bls.n	8003a80 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a7e:	e004      	b.n	8003a8a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a80:	f7ff fe05 	bl	800368e <LL_RCC_PLLSAI1_IsReady>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d137      	bne.n	8003b00 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003aba:	4313      	orrs	r3, r2
 8003abc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003abe:	f7ff fdc8 	bl	8003652 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac2:	f7fd fdeb 	bl	800169c <HAL_GetTick>
 8003ac6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ac8:	e009      	b.n	8003ade <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aca:	f7fd fde7 	bl	800169c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d902      	bls.n	8003ade <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	73fb      	strb	r3, [r7, #15]
        break;
 8003adc:	e004      	b.n	8003ae8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ade:	f7ff fdd6 	bl	800368e <LL_RCC_PLLSAI1_IsReady>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d1f0      	bne.n	8003aca <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d108      	bne.n	8003b00 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003afc:	4313      	orrs	r3, r2
 8003afe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003b16:	f7ff fdab 	bl	8003670 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b1a:	f7fd fdbf 	bl	800169c <HAL_GetTick>
 8003b1e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b20:	e009      	b.n	8003b36 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b22:	f7fd fdbb 	bl	800169c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d902      	bls.n	8003b36 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	73fb      	strb	r3, [r7, #15]
      break;
 8003b34:	e004      	b.n	8003b40 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b36:	f7ff fdaa 	bl	800368e <LL_RCC_PLLSAI1_IsReady>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f0      	bne.n	8003b22 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d137      	bne.n	8003bb6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b70:	4313      	orrs	r3, r2
 8003b72:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003b74:	f7ff fd6d 	bl	8003652 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b78:	f7fd fd90 	bl	800169c <HAL_GetTick>
 8003b7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b7e:	e009      	b.n	8003b94 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b80:	f7fd fd8c 	bl	800169c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d902      	bls.n	8003b94 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	73fb      	strb	r3, [r7, #15]
        break;
 8003b92:	e004      	b.n	8003b9e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b94:	f7ff fd7b 	bl	800368e <LL_RCC_PLLSAI1_IsReady>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d1f0      	bne.n	8003b80 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d108      	bne.n	8003bb6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <LL_RCC_GetUSARTClockSource>:
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4013      	ands	r3, r2
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_RCC_GetLPUARTClockSource>:
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4013      	ands	r3, r2
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e042      	b.n	8003c98 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d106      	bne.n	8003c2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7fd f9e9 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2224      	movs	r2, #36	@ 0x24
 8003c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0201 	bic.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fba6 	bl	800439c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f97b 	bl	8003f4c <UART_SetConfig>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e01b      	b.n	8003c98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fc25 	bl	80044e0 <UART_CheckIdleState>
 8003c96:	4603      	mov	r3, r0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	@ 0x28
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	4613      	mov	r3, r2
 8003cae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d17b      	bne.n	8003db2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <HAL_UART_Transmit+0x26>
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e074      	b.n	8003db4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2221      	movs	r2, #33	@ 0x21
 8003cd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cda:	f7fd fcdf 	bl	800169c <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	88fa      	ldrh	r2, [r7, #6]
 8003ce4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf8:	d108      	bne.n	8003d0c <HAL_UART_Transmit+0x6c>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d104      	bne.n	8003d0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	e003      	b.n	8003d14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d14:	e030      	b.n	8003d78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2180      	movs	r1, #128	@ 0x80
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fc87 	bl	8004634 <UART_WaitOnFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e03d      	b.n	8003db4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	3302      	adds	r3, #2
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	e007      	b.n	8003d66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	3301      	adds	r3, #1
 8003d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1c8      	bne.n	8003d16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2140      	movs	r1, #64	@ 0x40
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fc50 	bl	8004634 <UART_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e006      	b.n	8003db4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	e000      	b.n	8003db4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003db2:	2302      	movs	r3, #2
  }
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3720      	adds	r7, #32
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	@ 0x28
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	f040 80b5 	bne.w	8003f42 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_UART_Receive+0x28>
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0ad      	b.n	8003f44 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2222      	movs	r2, #34	@ 0x22
 8003df4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dfe:	f7fd fc4d 	bl	800169c <HAL_GetTick>
 8003e02:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e1c:	d10e      	bne.n	8003e3c <HAL_UART_Receive+0x80>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d105      	bne.n	8003e32 <HAL_UART_Receive+0x76>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e30:	e02d      	b.n	8003e8e <HAL_UART_Receive+0xd2>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	22ff      	movs	r2, #255	@ 0xff
 8003e36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e3a:	e028      	b.n	8003e8e <HAL_UART_Receive+0xd2>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10d      	bne.n	8003e60 <HAL_UART_Receive+0xa4>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d104      	bne.n	8003e56 <HAL_UART_Receive+0x9a>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	22ff      	movs	r2, #255	@ 0xff
 8003e50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e54:	e01b      	b.n	8003e8e <HAL_UART_Receive+0xd2>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	227f      	movs	r2, #127	@ 0x7f
 8003e5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e5e:	e016      	b.n	8003e8e <HAL_UART_Receive+0xd2>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e68:	d10d      	bne.n	8003e86 <HAL_UART_Receive+0xca>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <HAL_UART_Receive+0xc0>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	227f      	movs	r2, #127	@ 0x7f
 8003e76:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e7a:	e008      	b.n	8003e8e <HAL_UART_Receive+0xd2>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	223f      	movs	r2, #63	@ 0x3f
 8003e80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e84:	e003      	b.n	8003e8e <HAL_UART_Receive+0xd2>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003e94:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e9e:	d108      	bne.n	8003eb2 <HAL_UART_Receive+0xf6>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	e003      	b.n	8003eba <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003eba:	e036      	b.n	8003f2a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2120      	movs	r1, #32
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fbb4 	bl	8004634 <UART_WaitOnFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e032      	b.n	8003f44 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10c      	bne.n	8003efe <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	8a7b      	ldrh	r3, [r7, #18]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	3302      	adds	r3, #2
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	e00c      	b.n	8003f18 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	8a7b      	ldrh	r3, [r7, #18]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3301      	adds	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1c2      	bne.n	8003ebc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e000      	b.n	8003f44 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003f42:	2302      	movs	r3, #2
  }
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f50:	b08c      	sub	sp, #48	@ 0x30
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	4baf      	ldr	r3, [pc, #700]	@ (8004238 <UART_SetConfig+0x2ec>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4aa4      	ldr	r2, [pc, #656]	@ (800423c <UART_SetConfig+0x2f0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d004      	beq.n	8003fb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003fc2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd6:	f023 010f 	bic.w	r1, r3, #15
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a95      	ldr	r2, [pc, #596]	@ (8004240 <UART_SetConfig+0x2f4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d125      	bne.n	800403c <UART_SetConfig+0xf0>
 8003ff0:	2003      	movs	r0, #3
 8003ff2:	f7ff fde5 	bl	8003bc0 <LL_RCC_GetUSARTClockSource>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d81b      	bhi.n	8004034 <UART_SetConfig+0xe8>
 8003ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8004004 <UART_SetConfig+0xb8>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004015 	.word	0x08004015
 8004008:	08004025 	.word	0x08004025
 800400c:	0800401d 	.word	0x0800401d
 8004010:	0800402d 	.word	0x0800402d
 8004014:	2301      	movs	r3, #1
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800401a:	e042      	b.n	80040a2 <UART_SetConfig+0x156>
 800401c:	2302      	movs	r3, #2
 800401e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004022:	e03e      	b.n	80040a2 <UART_SetConfig+0x156>
 8004024:	2304      	movs	r3, #4
 8004026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800402a:	e03a      	b.n	80040a2 <UART_SetConfig+0x156>
 800402c:	2308      	movs	r3, #8
 800402e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004032:	e036      	b.n	80040a2 <UART_SetConfig+0x156>
 8004034:	2310      	movs	r3, #16
 8004036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800403a:	e032      	b.n	80040a2 <UART_SetConfig+0x156>
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a7e      	ldr	r2, [pc, #504]	@ (800423c <UART_SetConfig+0x2f0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d12a      	bne.n	800409c <UART_SetConfig+0x150>
 8004046:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800404a:	f7ff fdc9 	bl	8003be0 <LL_RCC_GetLPUARTClockSource>
 800404e:	4603      	mov	r3, r0
 8004050:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004054:	d01a      	beq.n	800408c <UART_SetConfig+0x140>
 8004056:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800405a:	d81b      	bhi.n	8004094 <UART_SetConfig+0x148>
 800405c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004060:	d00c      	beq.n	800407c <UART_SetConfig+0x130>
 8004062:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004066:	d815      	bhi.n	8004094 <UART_SetConfig+0x148>
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <UART_SetConfig+0x128>
 800406c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004070:	d008      	beq.n	8004084 <UART_SetConfig+0x138>
 8004072:	e00f      	b.n	8004094 <UART_SetConfig+0x148>
 8004074:	2300      	movs	r3, #0
 8004076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800407a:	e012      	b.n	80040a2 <UART_SetConfig+0x156>
 800407c:	2302      	movs	r3, #2
 800407e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004082:	e00e      	b.n	80040a2 <UART_SetConfig+0x156>
 8004084:	2304      	movs	r3, #4
 8004086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800408a:	e00a      	b.n	80040a2 <UART_SetConfig+0x156>
 800408c:	2308      	movs	r3, #8
 800408e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004092:	e006      	b.n	80040a2 <UART_SetConfig+0x156>
 8004094:	2310      	movs	r3, #16
 8004096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800409a:	e002      	b.n	80040a2 <UART_SetConfig+0x156>
 800409c:	2310      	movs	r3, #16
 800409e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a65      	ldr	r2, [pc, #404]	@ (800423c <UART_SetConfig+0x2f0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	f040 8097 	bne.w	80041dc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d823      	bhi.n	80040fe <UART_SetConfig+0x1b2>
 80040b6:	a201      	add	r2, pc, #4	@ (adr r2, 80040bc <UART_SetConfig+0x170>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	080040e1 	.word	0x080040e1
 80040c0:	080040ff 	.word	0x080040ff
 80040c4:	080040e9 	.word	0x080040e9
 80040c8:	080040ff 	.word	0x080040ff
 80040cc:	080040ef 	.word	0x080040ef
 80040d0:	080040ff 	.word	0x080040ff
 80040d4:	080040ff 	.word	0x080040ff
 80040d8:	080040ff 	.word	0x080040ff
 80040dc:	080040f7 	.word	0x080040f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e0:	f7ff f86a 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 80040e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040e6:	e010      	b.n	800410a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e8:	4b56      	ldr	r3, [pc, #344]	@ (8004244 <UART_SetConfig+0x2f8>)
 80040ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040ec:	e00d      	b.n	800410a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ee:	f7fe ffe3 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 80040f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040f4:	e009      	b.n	800410a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040fc:	e005      	b.n	800410a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004108:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 812b 	beq.w	8004368 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004116:	4a4c      	ldr	r2, [pc, #304]	@ (8004248 <UART_SetConfig+0x2fc>)
 8004118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800411c:	461a      	mov	r2, r3
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	fbb3 f3f2 	udiv	r3, r3, r2
 8004124:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4413      	add	r3, r2
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	429a      	cmp	r2, r3
 8004134:	d305      	bcc.n	8004142 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	429a      	cmp	r2, r3
 8004140:	d903      	bls.n	800414a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004148:	e10e      	b.n	8004368 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	2200      	movs	r2, #0
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	60fa      	str	r2, [r7, #12]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	4a3c      	ldr	r2, [pc, #240]	@ (8004248 <UART_SetConfig+0x2fc>)
 8004158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800415c:	b29b      	uxth	r3, r3
 800415e:	2200      	movs	r2, #0
 8004160:	603b      	str	r3, [r7, #0]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800416c:	f7fc f858 	bl	8000220 <__aeabi_uldivmod>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	020b      	lsls	r3, r1, #8
 8004182:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004186:	0202      	lsls	r2, r0, #8
 8004188:	6979      	ldr	r1, [r7, #20]
 800418a:	6849      	ldr	r1, [r1, #4]
 800418c:	0849      	lsrs	r1, r1, #1
 800418e:	2000      	movs	r0, #0
 8004190:	460c      	mov	r4, r1
 8004192:	4605      	mov	r5, r0
 8004194:	eb12 0804 	adds.w	r8, r2, r4
 8004198:	eb43 0905 	adc.w	r9, r3, r5
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	469a      	mov	sl, r3
 80041a4:	4693      	mov	fp, r2
 80041a6:	4652      	mov	r2, sl
 80041a8:	465b      	mov	r3, fp
 80041aa:	4640      	mov	r0, r8
 80041ac:	4649      	mov	r1, r9
 80041ae:	f7fc f837 	bl	8000220 <__aeabi_uldivmod>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4613      	mov	r3, r2
 80041b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041c0:	d308      	bcc.n	80041d4 <UART_SetConfig+0x288>
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041c8:	d204      	bcs.n	80041d4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6a3a      	ldr	r2, [r7, #32]
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	e0c9      	b.n	8004368 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80041da:	e0c5      	b.n	8004368 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041e4:	d16d      	bne.n	80042c2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80041e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80041ea:	3b01      	subs	r3, #1
 80041ec:	2b07      	cmp	r3, #7
 80041ee:	d82d      	bhi.n	800424c <UART_SetConfig+0x300>
 80041f0:	a201      	add	r2, pc, #4	@ (adr r2, 80041f8 <UART_SetConfig+0x2ac>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	08004219 	.word	0x08004219
 80041fc:	08004221 	.word	0x08004221
 8004200:	0800424d 	.word	0x0800424d
 8004204:	08004227 	.word	0x08004227
 8004208:	0800424d 	.word	0x0800424d
 800420c:	0800424d 	.word	0x0800424d
 8004210:	0800424d 	.word	0x0800424d
 8004214:	0800422f 	.word	0x0800422f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004218:	f7fe ffe4 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 800421c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800421e:	e01b      	b.n	8004258 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004220:	4b08      	ldr	r3, [pc, #32]	@ (8004244 <UART_SetConfig+0x2f8>)
 8004222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004224:	e018      	b.n	8004258 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004226:	f7fe ff47 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 800422a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800422c:	e014      	b.n	8004258 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004234:	e010      	b.n	8004258 <UART_SetConfig+0x30c>
 8004236:	bf00      	nop
 8004238:	cfff69f3 	.word	0xcfff69f3
 800423c:	40008000 	.word	0x40008000
 8004240:	40013800 	.word	0x40013800
 8004244:	00f42400 	.word	0x00f42400
 8004248:	08005c20 	.word	0x08005c20
      default:
        pclk = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004256:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8084 	beq.w	8004368 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	4a4b      	ldr	r2, [pc, #300]	@ (8004394 <UART_SetConfig+0x448>)
 8004266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800426a:	461a      	mov	r2, r3
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004272:	005a      	lsls	r2, r3, #1
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	441a      	add	r2, r3
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	fbb2 f3f3 	udiv	r3, r2, r3
 8004284:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	2b0f      	cmp	r3, #15
 800428a:	d916      	bls.n	80042ba <UART_SetConfig+0x36e>
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004292:	d212      	bcs.n	80042ba <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f023 030f 	bic.w	r3, r3, #15
 800429c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	8bfb      	ldrh	r3, [r7, #30]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	8bfa      	ldrh	r2, [r7, #30]
 80042b6:	60da      	str	r2, [r3, #12]
 80042b8:	e056      	b.n	8004368 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80042c0:	e052      	b.n	8004368 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80042c6:	3b01      	subs	r3, #1
 80042c8:	2b07      	cmp	r3, #7
 80042ca:	d822      	bhi.n	8004312 <UART_SetConfig+0x3c6>
 80042cc:	a201      	add	r2, pc, #4	@ (adr r2, 80042d4 <UART_SetConfig+0x388>)
 80042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d2:	bf00      	nop
 80042d4:	080042f5 	.word	0x080042f5
 80042d8:	080042fd 	.word	0x080042fd
 80042dc:	08004313 	.word	0x08004313
 80042e0:	08004303 	.word	0x08004303
 80042e4:	08004313 	.word	0x08004313
 80042e8:	08004313 	.word	0x08004313
 80042ec:	08004313 	.word	0x08004313
 80042f0:	0800430b 	.word	0x0800430b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042f4:	f7fe ff76 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 80042f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042fa:	e010      	b.n	800431e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042fc:	4b26      	ldr	r3, [pc, #152]	@ (8004398 <UART_SetConfig+0x44c>)
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004300:	e00d      	b.n	800431e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004302:	f7fe fed9 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8004306:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004308:	e009      	b.n	800431e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800430a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004310:	e005      	b.n	800431e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800431c:	bf00      	nop
    }

    if (pclk != 0U)
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	2b00      	cmp	r3, #0
 8004322:	d021      	beq.n	8004368 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	4a1a      	ldr	r2, [pc, #104]	@ (8004394 <UART_SetConfig+0x448>)
 800432a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800432e:	461a      	mov	r2, r3
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	fbb3 f2f2 	udiv	r2, r3, r2
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	085b      	lsrs	r3, r3, #1
 800433c:	441a      	add	r2, r3
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	fbb2 f3f3 	udiv	r3, r2, r3
 8004346:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	2b0f      	cmp	r3, #15
 800434c:	d909      	bls.n	8004362 <UART_SetConfig+0x416>
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004354:	d205      	bcs.n	8004362 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	b29a      	uxth	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60da      	str	r2, [r3, #12]
 8004360:	e002      	b.n	8004368 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2201      	movs	r2, #1
 800436c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2201      	movs	r2, #1
 8004374:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2200      	movs	r2, #0
 800437c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2200      	movs	r2, #0
 8004382:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004384:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004388:	4618      	mov	r0, r3
 800438a:	3730      	adds	r7, #48	@ 0x30
 800438c:	46bd      	mov	sp, r7
 800438e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004392:	bf00      	nop
 8004394:	08005c20 	.word	0x08005c20
 8004398:	00f42400 	.word	0x00f42400

0800439c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01a      	beq.n	80044b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800449a:	d10a      	bne.n	80044b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	605a      	str	r2, [r3, #4]
  }
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b098      	sub	sp, #96	@ 0x60
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044f0:	f7fd f8d4 	bl	800169c <HAL_GetTick>
 80044f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b08      	cmp	r3, #8
 8004502:	d12f      	bne.n	8004564 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004504:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800450c:	2200      	movs	r2, #0
 800450e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f88e 	bl	8004634 <UART_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d022      	beq.n	8004564 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800452c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004532:	653b      	str	r3, [r7, #80]	@ 0x50
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800453c:	647b      	str	r3, [r7, #68]	@ 0x44
 800453e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800454a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e6      	bne.n	800451e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e063      	b.n	800462c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b04      	cmp	r3, #4
 8004570:	d149      	bne.n	8004606 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004572:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800457a:	2200      	movs	r2, #0
 800457c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f857 	bl	8004634 <UART_WaitOnFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d03c      	beq.n	8004606 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	623b      	str	r3, [r7, #32]
   return(result);
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e6      	bne.n	800458c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3308      	adds	r3, #8
 80045c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3308      	adds	r3, #8
 80045dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045de:	61fa      	str	r2, [r7, #28]
 80045e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	69b9      	ldr	r1, [r7, #24]
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	617b      	str	r3, [r7, #20]
   return(result);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e5      	bne.n	80045be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e012      	b.n	800462c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3758      	adds	r7, #88	@ 0x58
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004644:	e04f      	b.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800464c:	d04b      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464e:	f7fd f825 	bl	800169c <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <UART_WaitOnFlagUntilTimeout+0x30>
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e04e      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	d037      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b80      	cmp	r3, #128	@ 0x80
 800467a:	d034      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b40      	cmp	r3, #64	@ 0x40
 8004680:	d031      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b08      	cmp	r3, #8
 800468e:	d110      	bne.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2208      	movs	r2, #8
 8004696:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f838 	bl	800470e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2208      	movs	r2, #8
 80046a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e029      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046c0:	d111      	bne.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f81e 	bl	800470e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e00f      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4013      	ands	r3, r2
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	bf0c      	ite	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	2300      	movne	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	429a      	cmp	r2, r3
 8004702:	d0a0      	beq.n	8004646 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800470e:	b480      	push	{r7}
 8004710:	b095      	sub	sp, #84	@ 0x54
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004726:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800472a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004734:	643b      	str	r3, [r7, #64]	@ 0x40
 8004736:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800473a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e6      	bne.n	8004716 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3308      	adds	r3, #8
 800474e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	61fb      	str	r3, [r7, #28]
   return(result);
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800475e:	f023 0301 	bic.w	r3, r3, #1
 8004762:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3308      	adds	r3, #8
 800476a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800476c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800476e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004774:	e841 2300 	strex	r3, r2, [r1]
 8004778:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e3      	bne.n	8004748 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d118      	bne.n	80047ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	60bb      	str	r3, [r7, #8]
   return(result);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f023 0310 	bic.w	r3, r3, #16
 800479c:	647b      	str	r3, [r7, #68]	@ 0x44
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047a6:	61bb      	str	r3, [r7, #24]
 80047a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6979      	ldr	r1, [r7, #20]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	613b      	str	r3, [r7, #16]
   return(result);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e6      	bne.n	8004788 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80047ce:	bf00      	nop
 80047d0:	3754      	adds	r7, #84	@ 0x54
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80047da:	b480      	push	{r7}
 80047dc:	b085      	sub	sp, #20
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e027      	b.n	8004840 <HAL_UARTEx_DisableFifoMode+0x66>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2224      	movs	r2, #36	@ 0x24
 80047fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800481e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004860:	2302      	movs	r3, #2
 8004862:	e02d      	b.n	80048c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	@ 0x24
 8004870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f84f 	bl	8004944 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80048dc:	2302      	movs	r3, #2
 80048de:	e02d      	b.n	800493c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2224      	movs	r2, #36	@ 0x24
 80048ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0201 	bic.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f811 	bl	8004944 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004950:	2b00      	cmp	r3, #0
 8004952:	d108      	bne.n	8004966 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004964:	e031      	b.n	80049ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004966:	2308      	movs	r3, #8
 8004968:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800496a:	2308      	movs	r3, #8
 800496c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	0e5b      	lsrs	r3, r3, #25
 8004976:	b2db      	uxtb	r3, r3
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	0f5b      	lsrs	r3, r3, #29
 8004986:	b2db      	uxtb	r3, r3
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800498e:	7bbb      	ldrb	r3, [r7, #14]
 8004990:	7b3a      	ldrb	r2, [r7, #12]
 8004992:	4911      	ldr	r1, [pc, #68]	@ (80049d8 <UARTEx_SetNbDataToProcess+0x94>)
 8004994:	5c8a      	ldrb	r2, [r1, r2]
 8004996:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800499a:	7b3a      	ldrb	r2, [r7, #12]
 800499c:	490f      	ldr	r1, [pc, #60]	@ (80049dc <UARTEx_SetNbDataToProcess+0x98>)
 800499e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	7b7a      	ldrb	r2, [r7, #13]
 80049b0:	4909      	ldr	r1, [pc, #36]	@ (80049d8 <UARTEx_SetNbDataToProcess+0x94>)
 80049b2:	5c8a      	ldrb	r2, [r1, r2]
 80049b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80049b8:	7b7a      	ldrb	r2, [r7, #13]
 80049ba:	4908      	ldr	r1, [pc, #32]	@ (80049dc <UARTEx_SetNbDataToProcess+0x98>)
 80049bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049be:	fb93 f3f2 	sdiv	r3, r3, r2
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	08005c38 	.word	0x08005c38
 80049dc:	08005c40 	.word	0x08005c40

080049e0 <std>:
 80049e0:	2300      	movs	r3, #0
 80049e2:	b510      	push	{r4, lr}
 80049e4:	4604      	mov	r4, r0
 80049e6:	e9c0 3300 	strd	r3, r3, [r0]
 80049ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049ee:	6083      	str	r3, [r0, #8]
 80049f0:	8181      	strh	r1, [r0, #12]
 80049f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80049f4:	81c2      	strh	r2, [r0, #14]
 80049f6:	6183      	str	r3, [r0, #24]
 80049f8:	4619      	mov	r1, r3
 80049fa:	2208      	movs	r2, #8
 80049fc:	305c      	adds	r0, #92	@ 0x5c
 80049fe:	f000 f9f9 	bl	8004df4 <memset>
 8004a02:	4b0d      	ldr	r3, [pc, #52]	@ (8004a38 <std+0x58>)
 8004a04:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a06:	4b0d      	ldr	r3, [pc, #52]	@ (8004a3c <std+0x5c>)
 8004a08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <std+0x60>)
 8004a0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <std+0x64>)
 8004a10:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a12:	4b0d      	ldr	r3, [pc, #52]	@ (8004a48 <std+0x68>)
 8004a14:	6224      	str	r4, [r4, #32]
 8004a16:	429c      	cmp	r4, r3
 8004a18:	d006      	beq.n	8004a28 <std+0x48>
 8004a1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a1e:	4294      	cmp	r4, r2
 8004a20:	d002      	beq.n	8004a28 <std+0x48>
 8004a22:	33d0      	adds	r3, #208	@ 0xd0
 8004a24:	429c      	cmp	r4, r3
 8004a26:	d105      	bne.n	8004a34 <std+0x54>
 8004a28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a30:	f000 ba58 	b.w	8004ee4 <__retarget_lock_init_recursive>
 8004a34:	bd10      	pop	{r4, pc}
 8004a36:	bf00      	nop
 8004a38:	08004c45 	.word	0x08004c45
 8004a3c:	08004c67 	.word	0x08004c67
 8004a40:	08004c9f 	.word	0x08004c9f
 8004a44:	08004cc3 	.word	0x08004cc3
 8004a48:	20000270 	.word	0x20000270

08004a4c <stdio_exit_handler>:
 8004a4c:	4a02      	ldr	r2, [pc, #8]	@ (8004a58 <stdio_exit_handler+0xc>)
 8004a4e:	4903      	ldr	r1, [pc, #12]	@ (8004a5c <stdio_exit_handler+0x10>)
 8004a50:	4803      	ldr	r0, [pc, #12]	@ (8004a60 <stdio_exit_handler+0x14>)
 8004a52:	f000 b869 	b.w	8004b28 <_fwalk_sglue>
 8004a56:	bf00      	nop
 8004a58:	2000002c 	.word	0x2000002c
 8004a5c:	08005781 	.word	0x08005781
 8004a60:	2000003c 	.word	0x2000003c

08004a64 <cleanup_stdio>:
 8004a64:	6841      	ldr	r1, [r0, #4]
 8004a66:	4b0c      	ldr	r3, [pc, #48]	@ (8004a98 <cleanup_stdio+0x34>)
 8004a68:	4299      	cmp	r1, r3
 8004a6a:	b510      	push	{r4, lr}
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	d001      	beq.n	8004a74 <cleanup_stdio+0x10>
 8004a70:	f000 fe86 	bl	8005780 <_fflush_r>
 8004a74:	68a1      	ldr	r1, [r4, #8]
 8004a76:	4b09      	ldr	r3, [pc, #36]	@ (8004a9c <cleanup_stdio+0x38>)
 8004a78:	4299      	cmp	r1, r3
 8004a7a:	d002      	beq.n	8004a82 <cleanup_stdio+0x1e>
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f000 fe7f 	bl	8005780 <_fflush_r>
 8004a82:	68e1      	ldr	r1, [r4, #12]
 8004a84:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <cleanup_stdio+0x3c>)
 8004a86:	4299      	cmp	r1, r3
 8004a88:	d004      	beq.n	8004a94 <cleanup_stdio+0x30>
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a90:	f000 be76 	b.w	8005780 <_fflush_r>
 8004a94:	bd10      	pop	{r4, pc}
 8004a96:	bf00      	nop
 8004a98:	20000270 	.word	0x20000270
 8004a9c:	200002d8 	.word	0x200002d8
 8004aa0:	20000340 	.word	0x20000340

08004aa4 <global_stdio_init.part.0>:
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <global_stdio_init.part.0+0x30>)
 8004aa8:	4c0b      	ldr	r4, [pc, #44]	@ (8004ad8 <global_stdio_init.part.0+0x34>)
 8004aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8004adc <global_stdio_init.part.0+0x38>)
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	4620      	mov	r0, r4
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2104      	movs	r1, #4
 8004ab4:	f7ff ff94 	bl	80049e0 <std>
 8004ab8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004abc:	2201      	movs	r2, #1
 8004abe:	2109      	movs	r1, #9
 8004ac0:	f7ff ff8e 	bl	80049e0 <std>
 8004ac4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ac8:	2202      	movs	r2, #2
 8004aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ace:	2112      	movs	r1, #18
 8004ad0:	f7ff bf86 	b.w	80049e0 <std>
 8004ad4:	200003a8 	.word	0x200003a8
 8004ad8:	20000270 	.word	0x20000270
 8004adc:	08004a4d 	.word	0x08004a4d

08004ae0 <__sfp_lock_acquire>:
 8004ae0:	4801      	ldr	r0, [pc, #4]	@ (8004ae8 <__sfp_lock_acquire+0x8>)
 8004ae2:	f000 ba00 	b.w	8004ee6 <__retarget_lock_acquire_recursive>
 8004ae6:	bf00      	nop
 8004ae8:	200003b1 	.word	0x200003b1

08004aec <__sfp_lock_release>:
 8004aec:	4801      	ldr	r0, [pc, #4]	@ (8004af4 <__sfp_lock_release+0x8>)
 8004aee:	f000 b9fb 	b.w	8004ee8 <__retarget_lock_release_recursive>
 8004af2:	bf00      	nop
 8004af4:	200003b1 	.word	0x200003b1

08004af8 <__sinit>:
 8004af8:	b510      	push	{r4, lr}
 8004afa:	4604      	mov	r4, r0
 8004afc:	f7ff fff0 	bl	8004ae0 <__sfp_lock_acquire>
 8004b00:	6a23      	ldr	r3, [r4, #32]
 8004b02:	b11b      	cbz	r3, 8004b0c <__sinit+0x14>
 8004b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b08:	f7ff bff0 	b.w	8004aec <__sfp_lock_release>
 8004b0c:	4b04      	ldr	r3, [pc, #16]	@ (8004b20 <__sinit+0x28>)
 8004b0e:	6223      	str	r3, [r4, #32]
 8004b10:	4b04      	ldr	r3, [pc, #16]	@ (8004b24 <__sinit+0x2c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f5      	bne.n	8004b04 <__sinit+0xc>
 8004b18:	f7ff ffc4 	bl	8004aa4 <global_stdio_init.part.0>
 8004b1c:	e7f2      	b.n	8004b04 <__sinit+0xc>
 8004b1e:	bf00      	nop
 8004b20:	08004a65 	.word	0x08004a65
 8004b24:	200003a8 	.word	0x200003a8

08004b28 <_fwalk_sglue>:
 8004b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	4688      	mov	r8, r1
 8004b30:	4614      	mov	r4, r2
 8004b32:	2600      	movs	r6, #0
 8004b34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b38:	f1b9 0901 	subs.w	r9, r9, #1
 8004b3c:	d505      	bpl.n	8004b4a <_fwalk_sglue+0x22>
 8004b3e:	6824      	ldr	r4, [r4, #0]
 8004b40:	2c00      	cmp	r4, #0
 8004b42:	d1f7      	bne.n	8004b34 <_fwalk_sglue+0xc>
 8004b44:	4630      	mov	r0, r6
 8004b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b4a:	89ab      	ldrh	r3, [r5, #12]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d907      	bls.n	8004b60 <_fwalk_sglue+0x38>
 8004b50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b54:	3301      	adds	r3, #1
 8004b56:	d003      	beq.n	8004b60 <_fwalk_sglue+0x38>
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	47c0      	blx	r8
 8004b5e:	4306      	orrs	r6, r0
 8004b60:	3568      	adds	r5, #104	@ 0x68
 8004b62:	e7e9      	b.n	8004b38 <_fwalk_sglue+0x10>

08004b64 <iprintf>:
 8004b64:	b40f      	push	{r0, r1, r2, r3}
 8004b66:	b507      	push	{r0, r1, r2, lr}
 8004b68:	4906      	ldr	r1, [pc, #24]	@ (8004b84 <iprintf+0x20>)
 8004b6a:	ab04      	add	r3, sp, #16
 8004b6c:	6808      	ldr	r0, [r1, #0]
 8004b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b72:	6881      	ldr	r1, [r0, #8]
 8004b74:	9301      	str	r3, [sp, #4]
 8004b76:	f000 fadb 	bl	8005130 <_vfiprintf_r>
 8004b7a:	b003      	add	sp, #12
 8004b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b80:	b004      	add	sp, #16
 8004b82:	4770      	bx	lr
 8004b84:	20000038 	.word	0x20000038

08004b88 <_puts_r>:
 8004b88:	6a03      	ldr	r3, [r0, #32]
 8004b8a:	b570      	push	{r4, r5, r6, lr}
 8004b8c:	6884      	ldr	r4, [r0, #8]
 8004b8e:	4605      	mov	r5, r0
 8004b90:	460e      	mov	r6, r1
 8004b92:	b90b      	cbnz	r3, 8004b98 <_puts_r+0x10>
 8004b94:	f7ff ffb0 	bl	8004af8 <__sinit>
 8004b98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b9a:	07db      	lsls	r3, r3, #31
 8004b9c:	d405      	bmi.n	8004baa <_puts_r+0x22>
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	0598      	lsls	r0, r3, #22
 8004ba2:	d402      	bmi.n	8004baa <_puts_r+0x22>
 8004ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ba6:	f000 f99e 	bl	8004ee6 <__retarget_lock_acquire_recursive>
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	0719      	lsls	r1, r3, #28
 8004bae:	d502      	bpl.n	8004bb6 <_puts_r+0x2e>
 8004bb0:	6923      	ldr	r3, [r4, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d135      	bne.n	8004c22 <_puts_r+0x9a>
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f000 f8c5 	bl	8004d48 <__swsetup_r>
 8004bbe:	b380      	cbz	r0, 8004c22 <_puts_r+0x9a>
 8004bc0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004bc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004bc6:	07da      	lsls	r2, r3, #31
 8004bc8:	d405      	bmi.n	8004bd6 <_puts_r+0x4e>
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	059b      	lsls	r3, r3, #22
 8004bce:	d402      	bmi.n	8004bd6 <_puts_r+0x4e>
 8004bd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bd2:	f000 f989 	bl	8004ee8 <__retarget_lock_release_recursive>
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	bd70      	pop	{r4, r5, r6, pc}
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	da04      	bge.n	8004be8 <_puts_r+0x60>
 8004bde:	69a2      	ldr	r2, [r4, #24]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	dc17      	bgt.n	8004c14 <_puts_r+0x8c>
 8004be4:	290a      	cmp	r1, #10
 8004be6:	d015      	beq.n	8004c14 <_puts_r+0x8c>
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	6022      	str	r2, [r4, #0]
 8004bee:	7019      	strb	r1, [r3, #0]
 8004bf0:	68a3      	ldr	r3, [r4, #8]
 8004bf2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	60a3      	str	r3, [r4, #8]
 8004bfa:	2900      	cmp	r1, #0
 8004bfc:	d1ed      	bne.n	8004bda <_puts_r+0x52>
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	da11      	bge.n	8004c26 <_puts_r+0x9e>
 8004c02:	4622      	mov	r2, r4
 8004c04:	210a      	movs	r1, #10
 8004c06:	4628      	mov	r0, r5
 8004c08:	f000 f85f 	bl	8004cca <__swbuf_r>
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d0d7      	beq.n	8004bc0 <_puts_r+0x38>
 8004c10:	250a      	movs	r5, #10
 8004c12:	e7d7      	b.n	8004bc4 <_puts_r+0x3c>
 8004c14:	4622      	mov	r2, r4
 8004c16:	4628      	mov	r0, r5
 8004c18:	f000 f857 	bl	8004cca <__swbuf_r>
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d1e7      	bne.n	8004bf0 <_puts_r+0x68>
 8004c20:	e7ce      	b.n	8004bc0 <_puts_r+0x38>
 8004c22:	3e01      	subs	r6, #1
 8004c24:	e7e4      	b.n	8004bf0 <_puts_r+0x68>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	6022      	str	r2, [r4, #0]
 8004c2c:	220a      	movs	r2, #10
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	e7ee      	b.n	8004c10 <_puts_r+0x88>
	...

08004c34 <puts>:
 8004c34:	4b02      	ldr	r3, [pc, #8]	@ (8004c40 <puts+0xc>)
 8004c36:	4601      	mov	r1, r0
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	f7ff bfa5 	b.w	8004b88 <_puts_r>
 8004c3e:	bf00      	nop
 8004c40:	20000038 	.word	0x20000038

08004c44 <__sread>:
 8004c44:	b510      	push	{r4, lr}
 8004c46:	460c      	mov	r4, r1
 8004c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c4c:	f000 f8fc 	bl	8004e48 <_read_r>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	bfab      	itete	ge
 8004c54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c56:	89a3      	ldrhlt	r3, [r4, #12]
 8004c58:	181b      	addge	r3, r3, r0
 8004c5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c5e:	bfac      	ite	ge
 8004c60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c62:	81a3      	strhlt	r3, [r4, #12]
 8004c64:	bd10      	pop	{r4, pc}

08004c66 <__swrite>:
 8004c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c6a:	461f      	mov	r7, r3
 8004c6c:	898b      	ldrh	r3, [r1, #12]
 8004c6e:	05db      	lsls	r3, r3, #23
 8004c70:	4605      	mov	r5, r0
 8004c72:	460c      	mov	r4, r1
 8004c74:	4616      	mov	r6, r2
 8004c76:	d505      	bpl.n	8004c84 <__swrite+0x1e>
 8004c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f000 f8d0 	bl	8004e24 <_lseek_r>
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c8e:	81a3      	strh	r3, [r4, #12]
 8004c90:	4632      	mov	r2, r6
 8004c92:	463b      	mov	r3, r7
 8004c94:	4628      	mov	r0, r5
 8004c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9a:	f000 b8e7 	b.w	8004e6c <_write_r>

08004c9e <__sseek>:
 8004c9e:	b510      	push	{r4, lr}
 8004ca0:	460c      	mov	r4, r1
 8004ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca6:	f000 f8bd 	bl	8004e24 <_lseek_r>
 8004caa:	1c43      	adds	r3, r0, #1
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	bf15      	itete	ne
 8004cb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004cb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004cba:	81a3      	strheq	r3, [r4, #12]
 8004cbc:	bf18      	it	ne
 8004cbe:	81a3      	strhne	r3, [r4, #12]
 8004cc0:	bd10      	pop	{r4, pc}

08004cc2 <__sclose>:
 8004cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc6:	f000 b89d 	b.w	8004e04 <_close_r>

08004cca <__swbuf_r>:
 8004cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ccc:	460e      	mov	r6, r1
 8004cce:	4614      	mov	r4, r2
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	b118      	cbz	r0, 8004cdc <__swbuf_r+0x12>
 8004cd4:	6a03      	ldr	r3, [r0, #32]
 8004cd6:	b90b      	cbnz	r3, 8004cdc <__swbuf_r+0x12>
 8004cd8:	f7ff ff0e 	bl	8004af8 <__sinit>
 8004cdc:	69a3      	ldr	r3, [r4, #24]
 8004cde:	60a3      	str	r3, [r4, #8]
 8004ce0:	89a3      	ldrh	r3, [r4, #12]
 8004ce2:	071a      	lsls	r2, r3, #28
 8004ce4:	d501      	bpl.n	8004cea <__swbuf_r+0x20>
 8004ce6:	6923      	ldr	r3, [r4, #16]
 8004ce8:	b943      	cbnz	r3, 8004cfc <__swbuf_r+0x32>
 8004cea:	4621      	mov	r1, r4
 8004cec:	4628      	mov	r0, r5
 8004cee:	f000 f82b 	bl	8004d48 <__swsetup_r>
 8004cf2:	b118      	cbz	r0, 8004cfc <__swbuf_r+0x32>
 8004cf4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	6922      	ldr	r2, [r4, #16]
 8004d00:	1a98      	subs	r0, r3, r2
 8004d02:	6963      	ldr	r3, [r4, #20]
 8004d04:	b2f6      	uxtb	r6, r6
 8004d06:	4283      	cmp	r3, r0
 8004d08:	4637      	mov	r7, r6
 8004d0a:	dc05      	bgt.n	8004d18 <__swbuf_r+0x4e>
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f000 fd36 	bl	8005780 <_fflush_r>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	d1ed      	bne.n	8004cf4 <__swbuf_r+0x2a>
 8004d18:	68a3      	ldr	r3, [r4, #8]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	60a3      	str	r3, [r4, #8]
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	6022      	str	r2, [r4, #0]
 8004d24:	701e      	strb	r6, [r3, #0]
 8004d26:	6962      	ldr	r2, [r4, #20]
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d004      	beq.n	8004d38 <__swbuf_r+0x6e>
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	07db      	lsls	r3, r3, #31
 8004d32:	d5e1      	bpl.n	8004cf8 <__swbuf_r+0x2e>
 8004d34:	2e0a      	cmp	r6, #10
 8004d36:	d1df      	bne.n	8004cf8 <__swbuf_r+0x2e>
 8004d38:	4621      	mov	r1, r4
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f000 fd20 	bl	8005780 <_fflush_r>
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d0d9      	beq.n	8004cf8 <__swbuf_r+0x2e>
 8004d44:	e7d6      	b.n	8004cf4 <__swbuf_r+0x2a>
	...

08004d48 <__swsetup_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	4b29      	ldr	r3, [pc, #164]	@ (8004df0 <__swsetup_r+0xa8>)
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	460c      	mov	r4, r1
 8004d52:	b118      	cbz	r0, 8004d5c <__swsetup_r+0x14>
 8004d54:	6a03      	ldr	r3, [r0, #32]
 8004d56:	b90b      	cbnz	r3, 8004d5c <__swsetup_r+0x14>
 8004d58:	f7ff fece 	bl	8004af8 <__sinit>
 8004d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d60:	0719      	lsls	r1, r3, #28
 8004d62:	d422      	bmi.n	8004daa <__swsetup_r+0x62>
 8004d64:	06da      	lsls	r2, r3, #27
 8004d66:	d407      	bmi.n	8004d78 <__swsetup_r+0x30>
 8004d68:	2209      	movs	r2, #9
 8004d6a:	602a      	str	r2, [r5, #0]
 8004d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d70:	81a3      	strh	r3, [r4, #12]
 8004d72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d76:	e033      	b.n	8004de0 <__swsetup_r+0x98>
 8004d78:	0758      	lsls	r0, r3, #29
 8004d7a:	d512      	bpl.n	8004da2 <__swsetup_r+0x5a>
 8004d7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d7e:	b141      	cbz	r1, 8004d92 <__swsetup_r+0x4a>
 8004d80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d84:	4299      	cmp	r1, r3
 8004d86:	d002      	beq.n	8004d8e <__swsetup_r+0x46>
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f000 f8af 	bl	8004eec <_free_r>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d92:	89a3      	ldrh	r3, [r4, #12]
 8004d94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d98:	81a3      	strh	r3, [r4, #12]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	6063      	str	r3, [r4, #4]
 8004d9e:	6923      	ldr	r3, [r4, #16]
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	f043 0308 	orr.w	r3, r3, #8
 8004da8:	81a3      	strh	r3, [r4, #12]
 8004daa:	6923      	ldr	r3, [r4, #16]
 8004dac:	b94b      	cbnz	r3, 8004dc2 <__swsetup_r+0x7a>
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004db8:	d003      	beq.n	8004dc2 <__swsetup_r+0x7a>
 8004dba:	4621      	mov	r1, r4
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f000 fd2d 	bl	800581c <__smakebuf_r>
 8004dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dc6:	f013 0201 	ands.w	r2, r3, #1
 8004dca:	d00a      	beq.n	8004de2 <__swsetup_r+0x9a>
 8004dcc:	2200      	movs	r2, #0
 8004dce:	60a2      	str	r2, [r4, #8]
 8004dd0:	6962      	ldr	r2, [r4, #20]
 8004dd2:	4252      	negs	r2, r2
 8004dd4:	61a2      	str	r2, [r4, #24]
 8004dd6:	6922      	ldr	r2, [r4, #16]
 8004dd8:	b942      	cbnz	r2, 8004dec <__swsetup_r+0xa4>
 8004dda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004dde:	d1c5      	bne.n	8004d6c <__swsetup_r+0x24>
 8004de0:	bd38      	pop	{r3, r4, r5, pc}
 8004de2:	0799      	lsls	r1, r3, #30
 8004de4:	bf58      	it	pl
 8004de6:	6962      	ldrpl	r2, [r4, #20]
 8004de8:	60a2      	str	r2, [r4, #8]
 8004dea:	e7f4      	b.n	8004dd6 <__swsetup_r+0x8e>
 8004dec:	2000      	movs	r0, #0
 8004dee:	e7f7      	b.n	8004de0 <__swsetup_r+0x98>
 8004df0:	20000038 	.word	0x20000038

08004df4 <memset>:
 8004df4:	4402      	add	r2, r0
 8004df6:	4603      	mov	r3, r0
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d100      	bne.n	8004dfe <memset+0xa>
 8004dfc:	4770      	bx	lr
 8004dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004e02:	e7f9      	b.n	8004df8 <memset+0x4>

08004e04 <_close_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	4d06      	ldr	r5, [pc, #24]	@ (8004e20 <_close_r+0x1c>)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	602b      	str	r3, [r5, #0]
 8004e10:	f7fc f9d0 	bl	80011b4 <_close>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d102      	bne.n	8004e1e <_close_r+0x1a>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	b103      	cbz	r3, 8004e1e <_close_r+0x1a>
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	200003ac 	.word	0x200003ac

08004e24 <_lseek_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4d07      	ldr	r5, [pc, #28]	@ (8004e44 <_lseek_r+0x20>)
 8004e28:	4604      	mov	r4, r0
 8004e2a:	4608      	mov	r0, r1
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	2200      	movs	r2, #0
 8004e30:	602a      	str	r2, [r5, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	f7fc f9e5 	bl	8001202 <_lseek>
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	d102      	bne.n	8004e42 <_lseek_r+0x1e>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	b103      	cbz	r3, 8004e42 <_lseek_r+0x1e>
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	bd38      	pop	{r3, r4, r5, pc}
 8004e44:	200003ac 	.word	0x200003ac

08004e48 <_read_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	4d07      	ldr	r5, [pc, #28]	@ (8004e68 <_read_r+0x20>)
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	4608      	mov	r0, r1
 8004e50:	4611      	mov	r1, r2
 8004e52:	2200      	movs	r2, #0
 8004e54:	602a      	str	r2, [r5, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f7fc f973 	bl	8001142 <_read>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d102      	bne.n	8004e66 <_read_r+0x1e>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	b103      	cbz	r3, 8004e66 <_read_r+0x1e>
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	200003ac 	.word	0x200003ac

08004e6c <_write_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4d07      	ldr	r5, [pc, #28]	@ (8004e8c <_write_r+0x20>)
 8004e70:	4604      	mov	r4, r0
 8004e72:	4608      	mov	r0, r1
 8004e74:	4611      	mov	r1, r2
 8004e76:	2200      	movs	r2, #0
 8004e78:	602a      	str	r2, [r5, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f7fc f97e 	bl	800117c <_write>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d102      	bne.n	8004e8a <_write_r+0x1e>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	b103      	cbz	r3, 8004e8a <_write_r+0x1e>
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	200003ac 	.word	0x200003ac

08004e90 <__errno>:
 8004e90:	4b01      	ldr	r3, [pc, #4]	@ (8004e98 <__errno+0x8>)
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	20000038 	.word	0x20000038

08004e9c <__libc_init_array>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ed4 <__libc_init_array+0x38>)
 8004ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8004ed8 <__libc_init_array+0x3c>)
 8004ea2:	1b64      	subs	r4, r4, r5
 8004ea4:	10a4      	asrs	r4, r4, #2
 8004ea6:	2600      	movs	r6, #0
 8004ea8:	42a6      	cmp	r6, r4
 8004eaa:	d109      	bne.n	8004ec0 <__libc_init_array+0x24>
 8004eac:	4d0b      	ldr	r5, [pc, #44]	@ (8004edc <__libc_init_array+0x40>)
 8004eae:	4c0c      	ldr	r4, [pc, #48]	@ (8004ee0 <__libc_init_array+0x44>)
 8004eb0:	f000 fd22 	bl	80058f8 <_init>
 8004eb4:	1b64      	subs	r4, r4, r5
 8004eb6:	10a4      	asrs	r4, r4, #2
 8004eb8:	2600      	movs	r6, #0
 8004eba:	42a6      	cmp	r6, r4
 8004ebc:	d105      	bne.n	8004eca <__libc_init_array+0x2e>
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec4:	4798      	blx	r3
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7ee      	b.n	8004ea8 <__libc_init_array+0xc>
 8004eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ece:	4798      	blx	r3
 8004ed0:	3601      	adds	r6, #1
 8004ed2:	e7f2      	b.n	8004eba <__libc_init_array+0x1e>
 8004ed4:	08005c84 	.word	0x08005c84
 8004ed8:	08005c84 	.word	0x08005c84
 8004edc:	08005c84 	.word	0x08005c84
 8004ee0:	08005c88 	.word	0x08005c88

08004ee4 <__retarget_lock_init_recursive>:
 8004ee4:	4770      	bx	lr

08004ee6 <__retarget_lock_acquire_recursive>:
 8004ee6:	4770      	bx	lr

08004ee8 <__retarget_lock_release_recursive>:
 8004ee8:	4770      	bx	lr
	...

08004eec <_free_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4605      	mov	r5, r0
 8004ef0:	2900      	cmp	r1, #0
 8004ef2:	d041      	beq.n	8004f78 <_free_r+0x8c>
 8004ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef8:	1f0c      	subs	r4, r1, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bfb8      	it	lt
 8004efe:	18e4      	addlt	r4, r4, r3
 8004f00:	f000 f8e0 	bl	80050c4 <__malloc_lock>
 8004f04:	4a1d      	ldr	r2, [pc, #116]	@ (8004f7c <_free_r+0x90>)
 8004f06:	6813      	ldr	r3, [r2, #0]
 8004f08:	b933      	cbnz	r3, 8004f18 <_free_r+0x2c>
 8004f0a:	6063      	str	r3, [r4, #4]
 8004f0c:	6014      	str	r4, [r2, #0]
 8004f0e:	4628      	mov	r0, r5
 8004f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f14:	f000 b8dc 	b.w	80050d0 <__malloc_unlock>
 8004f18:	42a3      	cmp	r3, r4
 8004f1a:	d908      	bls.n	8004f2e <_free_r+0x42>
 8004f1c:	6820      	ldr	r0, [r4, #0]
 8004f1e:	1821      	adds	r1, r4, r0
 8004f20:	428b      	cmp	r3, r1
 8004f22:	bf01      	itttt	eq
 8004f24:	6819      	ldreq	r1, [r3, #0]
 8004f26:	685b      	ldreq	r3, [r3, #4]
 8004f28:	1809      	addeq	r1, r1, r0
 8004f2a:	6021      	streq	r1, [r4, #0]
 8004f2c:	e7ed      	b.n	8004f0a <_free_r+0x1e>
 8004f2e:	461a      	mov	r2, r3
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	b10b      	cbz	r3, 8004f38 <_free_r+0x4c>
 8004f34:	42a3      	cmp	r3, r4
 8004f36:	d9fa      	bls.n	8004f2e <_free_r+0x42>
 8004f38:	6811      	ldr	r1, [r2, #0]
 8004f3a:	1850      	adds	r0, r2, r1
 8004f3c:	42a0      	cmp	r0, r4
 8004f3e:	d10b      	bne.n	8004f58 <_free_r+0x6c>
 8004f40:	6820      	ldr	r0, [r4, #0]
 8004f42:	4401      	add	r1, r0
 8004f44:	1850      	adds	r0, r2, r1
 8004f46:	4283      	cmp	r3, r0
 8004f48:	6011      	str	r1, [r2, #0]
 8004f4a:	d1e0      	bne.n	8004f0e <_free_r+0x22>
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	6053      	str	r3, [r2, #4]
 8004f52:	4408      	add	r0, r1
 8004f54:	6010      	str	r0, [r2, #0]
 8004f56:	e7da      	b.n	8004f0e <_free_r+0x22>
 8004f58:	d902      	bls.n	8004f60 <_free_r+0x74>
 8004f5a:	230c      	movs	r3, #12
 8004f5c:	602b      	str	r3, [r5, #0]
 8004f5e:	e7d6      	b.n	8004f0e <_free_r+0x22>
 8004f60:	6820      	ldr	r0, [r4, #0]
 8004f62:	1821      	adds	r1, r4, r0
 8004f64:	428b      	cmp	r3, r1
 8004f66:	bf04      	itt	eq
 8004f68:	6819      	ldreq	r1, [r3, #0]
 8004f6a:	685b      	ldreq	r3, [r3, #4]
 8004f6c:	6063      	str	r3, [r4, #4]
 8004f6e:	bf04      	itt	eq
 8004f70:	1809      	addeq	r1, r1, r0
 8004f72:	6021      	streq	r1, [r4, #0]
 8004f74:	6054      	str	r4, [r2, #4]
 8004f76:	e7ca      	b.n	8004f0e <_free_r+0x22>
 8004f78:	bd38      	pop	{r3, r4, r5, pc}
 8004f7a:	bf00      	nop
 8004f7c:	200003b8 	.word	0x200003b8

08004f80 <sbrk_aligned>:
 8004f80:	b570      	push	{r4, r5, r6, lr}
 8004f82:	4e0f      	ldr	r6, [pc, #60]	@ (8004fc0 <sbrk_aligned+0x40>)
 8004f84:	460c      	mov	r4, r1
 8004f86:	6831      	ldr	r1, [r6, #0]
 8004f88:	4605      	mov	r5, r0
 8004f8a:	b911      	cbnz	r1, 8004f92 <sbrk_aligned+0x12>
 8004f8c:	f000 fca4 	bl	80058d8 <_sbrk_r>
 8004f90:	6030      	str	r0, [r6, #0]
 8004f92:	4621      	mov	r1, r4
 8004f94:	4628      	mov	r0, r5
 8004f96:	f000 fc9f 	bl	80058d8 <_sbrk_r>
 8004f9a:	1c43      	adds	r3, r0, #1
 8004f9c:	d103      	bne.n	8004fa6 <sbrk_aligned+0x26>
 8004f9e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	bd70      	pop	{r4, r5, r6, pc}
 8004fa6:	1cc4      	adds	r4, r0, #3
 8004fa8:	f024 0403 	bic.w	r4, r4, #3
 8004fac:	42a0      	cmp	r0, r4
 8004fae:	d0f8      	beq.n	8004fa2 <sbrk_aligned+0x22>
 8004fb0:	1a21      	subs	r1, r4, r0
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f000 fc90 	bl	80058d8 <_sbrk_r>
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d1f2      	bne.n	8004fa2 <sbrk_aligned+0x22>
 8004fbc:	e7ef      	b.n	8004f9e <sbrk_aligned+0x1e>
 8004fbe:	bf00      	nop
 8004fc0:	200003b4 	.word	0x200003b4

08004fc4 <_malloc_r>:
 8004fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fc8:	1ccd      	adds	r5, r1, #3
 8004fca:	f025 0503 	bic.w	r5, r5, #3
 8004fce:	3508      	adds	r5, #8
 8004fd0:	2d0c      	cmp	r5, #12
 8004fd2:	bf38      	it	cc
 8004fd4:	250c      	movcc	r5, #12
 8004fd6:	2d00      	cmp	r5, #0
 8004fd8:	4606      	mov	r6, r0
 8004fda:	db01      	blt.n	8004fe0 <_malloc_r+0x1c>
 8004fdc:	42a9      	cmp	r1, r5
 8004fde:	d904      	bls.n	8004fea <_malloc_r+0x26>
 8004fe0:	230c      	movs	r3, #12
 8004fe2:	6033      	str	r3, [r6, #0]
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050c0 <_malloc_r+0xfc>
 8004fee:	f000 f869 	bl	80050c4 <__malloc_lock>
 8004ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ff6:	461c      	mov	r4, r3
 8004ff8:	bb44      	cbnz	r4, 800504c <_malloc_r+0x88>
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f7ff ffbf 	bl	8004f80 <sbrk_aligned>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	4604      	mov	r4, r0
 8005006:	d158      	bne.n	80050ba <_malloc_r+0xf6>
 8005008:	f8d8 4000 	ldr.w	r4, [r8]
 800500c:	4627      	mov	r7, r4
 800500e:	2f00      	cmp	r7, #0
 8005010:	d143      	bne.n	800509a <_malloc_r+0xd6>
 8005012:	2c00      	cmp	r4, #0
 8005014:	d04b      	beq.n	80050ae <_malloc_r+0xea>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	4639      	mov	r1, r7
 800501a:	4630      	mov	r0, r6
 800501c:	eb04 0903 	add.w	r9, r4, r3
 8005020:	f000 fc5a 	bl	80058d8 <_sbrk_r>
 8005024:	4581      	cmp	r9, r0
 8005026:	d142      	bne.n	80050ae <_malloc_r+0xea>
 8005028:	6821      	ldr	r1, [r4, #0]
 800502a:	1a6d      	subs	r5, r5, r1
 800502c:	4629      	mov	r1, r5
 800502e:	4630      	mov	r0, r6
 8005030:	f7ff ffa6 	bl	8004f80 <sbrk_aligned>
 8005034:	3001      	adds	r0, #1
 8005036:	d03a      	beq.n	80050ae <_malloc_r+0xea>
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	442b      	add	r3, r5
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	f8d8 3000 	ldr.w	r3, [r8]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	bb62      	cbnz	r2, 80050a0 <_malloc_r+0xdc>
 8005046:	f8c8 7000 	str.w	r7, [r8]
 800504a:	e00f      	b.n	800506c <_malloc_r+0xa8>
 800504c:	6822      	ldr	r2, [r4, #0]
 800504e:	1b52      	subs	r2, r2, r5
 8005050:	d420      	bmi.n	8005094 <_malloc_r+0xd0>
 8005052:	2a0b      	cmp	r2, #11
 8005054:	d917      	bls.n	8005086 <_malloc_r+0xc2>
 8005056:	1961      	adds	r1, r4, r5
 8005058:	42a3      	cmp	r3, r4
 800505a:	6025      	str	r5, [r4, #0]
 800505c:	bf18      	it	ne
 800505e:	6059      	strne	r1, [r3, #4]
 8005060:	6863      	ldr	r3, [r4, #4]
 8005062:	bf08      	it	eq
 8005064:	f8c8 1000 	streq.w	r1, [r8]
 8005068:	5162      	str	r2, [r4, r5]
 800506a:	604b      	str	r3, [r1, #4]
 800506c:	4630      	mov	r0, r6
 800506e:	f000 f82f 	bl	80050d0 <__malloc_unlock>
 8005072:	f104 000b 	add.w	r0, r4, #11
 8005076:	1d23      	adds	r3, r4, #4
 8005078:	f020 0007 	bic.w	r0, r0, #7
 800507c:	1ac2      	subs	r2, r0, r3
 800507e:	bf1c      	itt	ne
 8005080:	1a1b      	subne	r3, r3, r0
 8005082:	50a3      	strne	r3, [r4, r2]
 8005084:	e7af      	b.n	8004fe6 <_malloc_r+0x22>
 8005086:	6862      	ldr	r2, [r4, #4]
 8005088:	42a3      	cmp	r3, r4
 800508a:	bf0c      	ite	eq
 800508c:	f8c8 2000 	streq.w	r2, [r8]
 8005090:	605a      	strne	r2, [r3, #4]
 8005092:	e7eb      	b.n	800506c <_malloc_r+0xa8>
 8005094:	4623      	mov	r3, r4
 8005096:	6864      	ldr	r4, [r4, #4]
 8005098:	e7ae      	b.n	8004ff8 <_malloc_r+0x34>
 800509a:	463c      	mov	r4, r7
 800509c:	687f      	ldr	r7, [r7, #4]
 800509e:	e7b6      	b.n	800500e <_malloc_r+0x4a>
 80050a0:	461a      	mov	r2, r3
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	42a3      	cmp	r3, r4
 80050a6:	d1fb      	bne.n	80050a0 <_malloc_r+0xdc>
 80050a8:	2300      	movs	r3, #0
 80050aa:	6053      	str	r3, [r2, #4]
 80050ac:	e7de      	b.n	800506c <_malloc_r+0xa8>
 80050ae:	230c      	movs	r3, #12
 80050b0:	6033      	str	r3, [r6, #0]
 80050b2:	4630      	mov	r0, r6
 80050b4:	f000 f80c 	bl	80050d0 <__malloc_unlock>
 80050b8:	e794      	b.n	8004fe4 <_malloc_r+0x20>
 80050ba:	6005      	str	r5, [r0, #0]
 80050bc:	e7d6      	b.n	800506c <_malloc_r+0xa8>
 80050be:	bf00      	nop
 80050c0:	200003b8 	.word	0x200003b8

080050c4 <__malloc_lock>:
 80050c4:	4801      	ldr	r0, [pc, #4]	@ (80050cc <__malloc_lock+0x8>)
 80050c6:	f7ff bf0e 	b.w	8004ee6 <__retarget_lock_acquire_recursive>
 80050ca:	bf00      	nop
 80050cc:	200003b0 	.word	0x200003b0

080050d0 <__malloc_unlock>:
 80050d0:	4801      	ldr	r0, [pc, #4]	@ (80050d8 <__malloc_unlock+0x8>)
 80050d2:	f7ff bf09 	b.w	8004ee8 <__retarget_lock_release_recursive>
 80050d6:	bf00      	nop
 80050d8:	200003b0 	.word	0x200003b0

080050dc <__sfputc_r>:
 80050dc:	6893      	ldr	r3, [r2, #8]
 80050de:	3b01      	subs	r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	b410      	push	{r4}
 80050e4:	6093      	str	r3, [r2, #8]
 80050e6:	da08      	bge.n	80050fa <__sfputc_r+0x1e>
 80050e8:	6994      	ldr	r4, [r2, #24]
 80050ea:	42a3      	cmp	r3, r4
 80050ec:	db01      	blt.n	80050f2 <__sfputc_r+0x16>
 80050ee:	290a      	cmp	r1, #10
 80050f0:	d103      	bne.n	80050fa <__sfputc_r+0x1e>
 80050f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050f6:	f7ff bde8 	b.w	8004cca <__swbuf_r>
 80050fa:	6813      	ldr	r3, [r2, #0]
 80050fc:	1c58      	adds	r0, r3, #1
 80050fe:	6010      	str	r0, [r2, #0]
 8005100:	7019      	strb	r1, [r3, #0]
 8005102:	4608      	mov	r0, r1
 8005104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005108:	4770      	bx	lr

0800510a <__sfputs_r>:
 800510a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510c:	4606      	mov	r6, r0
 800510e:	460f      	mov	r7, r1
 8005110:	4614      	mov	r4, r2
 8005112:	18d5      	adds	r5, r2, r3
 8005114:	42ac      	cmp	r4, r5
 8005116:	d101      	bne.n	800511c <__sfputs_r+0x12>
 8005118:	2000      	movs	r0, #0
 800511a:	e007      	b.n	800512c <__sfputs_r+0x22>
 800511c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005120:	463a      	mov	r2, r7
 8005122:	4630      	mov	r0, r6
 8005124:	f7ff ffda 	bl	80050dc <__sfputc_r>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d1f3      	bne.n	8005114 <__sfputs_r+0xa>
 800512c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005130 <_vfiprintf_r>:
 8005130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005134:	460d      	mov	r5, r1
 8005136:	b09d      	sub	sp, #116	@ 0x74
 8005138:	4614      	mov	r4, r2
 800513a:	4698      	mov	r8, r3
 800513c:	4606      	mov	r6, r0
 800513e:	b118      	cbz	r0, 8005148 <_vfiprintf_r+0x18>
 8005140:	6a03      	ldr	r3, [r0, #32]
 8005142:	b90b      	cbnz	r3, 8005148 <_vfiprintf_r+0x18>
 8005144:	f7ff fcd8 	bl	8004af8 <__sinit>
 8005148:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800514a:	07d9      	lsls	r1, r3, #31
 800514c:	d405      	bmi.n	800515a <_vfiprintf_r+0x2a>
 800514e:	89ab      	ldrh	r3, [r5, #12]
 8005150:	059a      	lsls	r2, r3, #22
 8005152:	d402      	bmi.n	800515a <_vfiprintf_r+0x2a>
 8005154:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005156:	f7ff fec6 	bl	8004ee6 <__retarget_lock_acquire_recursive>
 800515a:	89ab      	ldrh	r3, [r5, #12]
 800515c:	071b      	lsls	r3, r3, #28
 800515e:	d501      	bpl.n	8005164 <_vfiprintf_r+0x34>
 8005160:	692b      	ldr	r3, [r5, #16]
 8005162:	b99b      	cbnz	r3, 800518c <_vfiprintf_r+0x5c>
 8005164:	4629      	mov	r1, r5
 8005166:	4630      	mov	r0, r6
 8005168:	f7ff fdee 	bl	8004d48 <__swsetup_r>
 800516c:	b170      	cbz	r0, 800518c <_vfiprintf_r+0x5c>
 800516e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005170:	07dc      	lsls	r4, r3, #31
 8005172:	d504      	bpl.n	800517e <_vfiprintf_r+0x4e>
 8005174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005178:	b01d      	add	sp, #116	@ 0x74
 800517a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517e:	89ab      	ldrh	r3, [r5, #12]
 8005180:	0598      	lsls	r0, r3, #22
 8005182:	d4f7      	bmi.n	8005174 <_vfiprintf_r+0x44>
 8005184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005186:	f7ff feaf 	bl	8004ee8 <__retarget_lock_release_recursive>
 800518a:	e7f3      	b.n	8005174 <_vfiprintf_r+0x44>
 800518c:	2300      	movs	r3, #0
 800518e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005190:	2320      	movs	r3, #32
 8005192:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005196:	f8cd 800c 	str.w	r8, [sp, #12]
 800519a:	2330      	movs	r3, #48	@ 0x30
 800519c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800534c <_vfiprintf_r+0x21c>
 80051a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051a4:	f04f 0901 	mov.w	r9, #1
 80051a8:	4623      	mov	r3, r4
 80051aa:	469a      	mov	sl, r3
 80051ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051b0:	b10a      	cbz	r2, 80051b6 <_vfiprintf_r+0x86>
 80051b2:	2a25      	cmp	r2, #37	@ 0x25
 80051b4:	d1f9      	bne.n	80051aa <_vfiprintf_r+0x7a>
 80051b6:	ebba 0b04 	subs.w	fp, sl, r4
 80051ba:	d00b      	beq.n	80051d4 <_vfiprintf_r+0xa4>
 80051bc:	465b      	mov	r3, fp
 80051be:	4622      	mov	r2, r4
 80051c0:	4629      	mov	r1, r5
 80051c2:	4630      	mov	r0, r6
 80051c4:	f7ff ffa1 	bl	800510a <__sfputs_r>
 80051c8:	3001      	adds	r0, #1
 80051ca:	f000 80a7 	beq.w	800531c <_vfiprintf_r+0x1ec>
 80051ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051d0:	445a      	add	r2, fp
 80051d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80051d4:	f89a 3000 	ldrb.w	r3, [sl]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 809f 	beq.w	800531c <_vfiprintf_r+0x1ec>
 80051de:	2300      	movs	r3, #0
 80051e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051e8:	f10a 0a01 	add.w	sl, sl, #1
 80051ec:	9304      	str	r3, [sp, #16]
 80051ee:	9307      	str	r3, [sp, #28]
 80051f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80051f6:	4654      	mov	r4, sl
 80051f8:	2205      	movs	r2, #5
 80051fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051fe:	4853      	ldr	r0, [pc, #332]	@ (800534c <_vfiprintf_r+0x21c>)
 8005200:	f7fa ffbe 	bl	8000180 <memchr>
 8005204:	9a04      	ldr	r2, [sp, #16]
 8005206:	b9d8      	cbnz	r0, 8005240 <_vfiprintf_r+0x110>
 8005208:	06d1      	lsls	r1, r2, #27
 800520a:	bf44      	itt	mi
 800520c:	2320      	movmi	r3, #32
 800520e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005212:	0713      	lsls	r3, r2, #28
 8005214:	bf44      	itt	mi
 8005216:	232b      	movmi	r3, #43	@ 0x2b
 8005218:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800521c:	f89a 3000 	ldrb.w	r3, [sl]
 8005220:	2b2a      	cmp	r3, #42	@ 0x2a
 8005222:	d015      	beq.n	8005250 <_vfiprintf_r+0x120>
 8005224:	9a07      	ldr	r2, [sp, #28]
 8005226:	4654      	mov	r4, sl
 8005228:	2000      	movs	r0, #0
 800522a:	f04f 0c0a 	mov.w	ip, #10
 800522e:	4621      	mov	r1, r4
 8005230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005234:	3b30      	subs	r3, #48	@ 0x30
 8005236:	2b09      	cmp	r3, #9
 8005238:	d94b      	bls.n	80052d2 <_vfiprintf_r+0x1a2>
 800523a:	b1b0      	cbz	r0, 800526a <_vfiprintf_r+0x13a>
 800523c:	9207      	str	r2, [sp, #28]
 800523e:	e014      	b.n	800526a <_vfiprintf_r+0x13a>
 8005240:	eba0 0308 	sub.w	r3, r0, r8
 8005244:	fa09 f303 	lsl.w	r3, r9, r3
 8005248:	4313      	orrs	r3, r2
 800524a:	9304      	str	r3, [sp, #16]
 800524c:	46a2      	mov	sl, r4
 800524e:	e7d2      	b.n	80051f6 <_vfiprintf_r+0xc6>
 8005250:	9b03      	ldr	r3, [sp, #12]
 8005252:	1d19      	adds	r1, r3, #4
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	9103      	str	r1, [sp, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	bfbb      	ittet	lt
 800525c:	425b      	neglt	r3, r3
 800525e:	f042 0202 	orrlt.w	r2, r2, #2
 8005262:	9307      	strge	r3, [sp, #28]
 8005264:	9307      	strlt	r3, [sp, #28]
 8005266:	bfb8      	it	lt
 8005268:	9204      	strlt	r2, [sp, #16]
 800526a:	7823      	ldrb	r3, [r4, #0]
 800526c:	2b2e      	cmp	r3, #46	@ 0x2e
 800526e:	d10a      	bne.n	8005286 <_vfiprintf_r+0x156>
 8005270:	7863      	ldrb	r3, [r4, #1]
 8005272:	2b2a      	cmp	r3, #42	@ 0x2a
 8005274:	d132      	bne.n	80052dc <_vfiprintf_r+0x1ac>
 8005276:	9b03      	ldr	r3, [sp, #12]
 8005278:	1d1a      	adds	r2, r3, #4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	9203      	str	r2, [sp, #12]
 800527e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005282:	3402      	adds	r4, #2
 8005284:	9305      	str	r3, [sp, #20]
 8005286:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800535c <_vfiprintf_r+0x22c>
 800528a:	7821      	ldrb	r1, [r4, #0]
 800528c:	2203      	movs	r2, #3
 800528e:	4650      	mov	r0, sl
 8005290:	f7fa ff76 	bl	8000180 <memchr>
 8005294:	b138      	cbz	r0, 80052a6 <_vfiprintf_r+0x176>
 8005296:	9b04      	ldr	r3, [sp, #16]
 8005298:	eba0 000a 	sub.w	r0, r0, sl
 800529c:	2240      	movs	r2, #64	@ 0x40
 800529e:	4082      	lsls	r2, r0
 80052a0:	4313      	orrs	r3, r2
 80052a2:	3401      	adds	r4, #1
 80052a4:	9304      	str	r3, [sp, #16]
 80052a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052aa:	4829      	ldr	r0, [pc, #164]	@ (8005350 <_vfiprintf_r+0x220>)
 80052ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052b0:	2206      	movs	r2, #6
 80052b2:	f7fa ff65 	bl	8000180 <memchr>
 80052b6:	2800      	cmp	r0, #0
 80052b8:	d03f      	beq.n	800533a <_vfiprintf_r+0x20a>
 80052ba:	4b26      	ldr	r3, [pc, #152]	@ (8005354 <_vfiprintf_r+0x224>)
 80052bc:	bb1b      	cbnz	r3, 8005306 <_vfiprintf_r+0x1d6>
 80052be:	9b03      	ldr	r3, [sp, #12]
 80052c0:	3307      	adds	r3, #7
 80052c2:	f023 0307 	bic.w	r3, r3, #7
 80052c6:	3308      	adds	r3, #8
 80052c8:	9303      	str	r3, [sp, #12]
 80052ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052cc:	443b      	add	r3, r7
 80052ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80052d0:	e76a      	b.n	80051a8 <_vfiprintf_r+0x78>
 80052d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80052d6:	460c      	mov	r4, r1
 80052d8:	2001      	movs	r0, #1
 80052da:	e7a8      	b.n	800522e <_vfiprintf_r+0xfe>
 80052dc:	2300      	movs	r3, #0
 80052de:	3401      	adds	r4, #1
 80052e0:	9305      	str	r3, [sp, #20]
 80052e2:	4619      	mov	r1, r3
 80052e4:	f04f 0c0a 	mov.w	ip, #10
 80052e8:	4620      	mov	r0, r4
 80052ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052ee:	3a30      	subs	r2, #48	@ 0x30
 80052f0:	2a09      	cmp	r2, #9
 80052f2:	d903      	bls.n	80052fc <_vfiprintf_r+0x1cc>
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0c6      	beq.n	8005286 <_vfiprintf_r+0x156>
 80052f8:	9105      	str	r1, [sp, #20]
 80052fa:	e7c4      	b.n	8005286 <_vfiprintf_r+0x156>
 80052fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005300:	4604      	mov	r4, r0
 8005302:	2301      	movs	r3, #1
 8005304:	e7f0      	b.n	80052e8 <_vfiprintf_r+0x1b8>
 8005306:	ab03      	add	r3, sp, #12
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	462a      	mov	r2, r5
 800530c:	4b12      	ldr	r3, [pc, #72]	@ (8005358 <_vfiprintf_r+0x228>)
 800530e:	a904      	add	r1, sp, #16
 8005310:	4630      	mov	r0, r6
 8005312:	f3af 8000 	nop.w
 8005316:	4607      	mov	r7, r0
 8005318:	1c78      	adds	r0, r7, #1
 800531a:	d1d6      	bne.n	80052ca <_vfiprintf_r+0x19a>
 800531c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800531e:	07d9      	lsls	r1, r3, #31
 8005320:	d405      	bmi.n	800532e <_vfiprintf_r+0x1fe>
 8005322:	89ab      	ldrh	r3, [r5, #12]
 8005324:	059a      	lsls	r2, r3, #22
 8005326:	d402      	bmi.n	800532e <_vfiprintf_r+0x1fe>
 8005328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800532a:	f7ff fddd 	bl	8004ee8 <__retarget_lock_release_recursive>
 800532e:	89ab      	ldrh	r3, [r5, #12]
 8005330:	065b      	lsls	r3, r3, #25
 8005332:	f53f af1f 	bmi.w	8005174 <_vfiprintf_r+0x44>
 8005336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005338:	e71e      	b.n	8005178 <_vfiprintf_r+0x48>
 800533a:	ab03      	add	r3, sp, #12
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	462a      	mov	r2, r5
 8005340:	4b05      	ldr	r3, [pc, #20]	@ (8005358 <_vfiprintf_r+0x228>)
 8005342:	a904      	add	r1, sp, #16
 8005344:	4630      	mov	r0, r6
 8005346:	f000 f879 	bl	800543c <_printf_i>
 800534a:	e7e4      	b.n	8005316 <_vfiprintf_r+0x1e6>
 800534c:	08005c48 	.word	0x08005c48
 8005350:	08005c52 	.word	0x08005c52
 8005354:	00000000 	.word	0x00000000
 8005358:	0800510b 	.word	0x0800510b
 800535c:	08005c4e 	.word	0x08005c4e

08005360 <_printf_common>:
 8005360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005364:	4616      	mov	r6, r2
 8005366:	4698      	mov	r8, r3
 8005368:	688a      	ldr	r2, [r1, #8]
 800536a:	690b      	ldr	r3, [r1, #16]
 800536c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005370:	4293      	cmp	r3, r2
 8005372:	bfb8      	it	lt
 8005374:	4613      	movlt	r3, r2
 8005376:	6033      	str	r3, [r6, #0]
 8005378:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800537c:	4607      	mov	r7, r0
 800537e:	460c      	mov	r4, r1
 8005380:	b10a      	cbz	r2, 8005386 <_printf_common+0x26>
 8005382:	3301      	adds	r3, #1
 8005384:	6033      	str	r3, [r6, #0]
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	0699      	lsls	r1, r3, #26
 800538a:	bf42      	ittt	mi
 800538c:	6833      	ldrmi	r3, [r6, #0]
 800538e:	3302      	addmi	r3, #2
 8005390:	6033      	strmi	r3, [r6, #0]
 8005392:	6825      	ldr	r5, [r4, #0]
 8005394:	f015 0506 	ands.w	r5, r5, #6
 8005398:	d106      	bne.n	80053a8 <_printf_common+0x48>
 800539a:	f104 0a19 	add.w	sl, r4, #25
 800539e:	68e3      	ldr	r3, [r4, #12]
 80053a0:	6832      	ldr	r2, [r6, #0]
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	42ab      	cmp	r3, r5
 80053a6:	dc26      	bgt.n	80053f6 <_printf_common+0x96>
 80053a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053ac:	6822      	ldr	r2, [r4, #0]
 80053ae:	3b00      	subs	r3, #0
 80053b0:	bf18      	it	ne
 80053b2:	2301      	movne	r3, #1
 80053b4:	0692      	lsls	r2, r2, #26
 80053b6:	d42b      	bmi.n	8005410 <_printf_common+0xb0>
 80053b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053bc:	4641      	mov	r1, r8
 80053be:	4638      	mov	r0, r7
 80053c0:	47c8      	blx	r9
 80053c2:	3001      	adds	r0, #1
 80053c4:	d01e      	beq.n	8005404 <_printf_common+0xa4>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	6922      	ldr	r2, [r4, #16]
 80053ca:	f003 0306 	and.w	r3, r3, #6
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	bf02      	ittt	eq
 80053d2:	68e5      	ldreq	r5, [r4, #12]
 80053d4:	6833      	ldreq	r3, [r6, #0]
 80053d6:	1aed      	subeq	r5, r5, r3
 80053d8:	68a3      	ldr	r3, [r4, #8]
 80053da:	bf0c      	ite	eq
 80053dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053e0:	2500      	movne	r5, #0
 80053e2:	4293      	cmp	r3, r2
 80053e4:	bfc4      	itt	gt
 80053e6:	1a9b      	subgt	r3, r3, r2
 80053e8:	18ed      	addgt	r5, r5, r3
 80053ea:	2600      	movs	r6, #0
 80053ec:	341a      	adds	r4, #26
 80053ee:	42b5      	cmp	r5, r6
 80053f0:	d11a      	bne.n	8005428 <_printf_common+0xc8>
 80053f2:	2000      	movs	r0, #0
 80053f4:	e008      	b.n	8005408 <_printf_common+0xa8>
 80053f6:	2301      	movs	r3, #1
 80053f8:	4652      	mov	r2, sl
 80053fa:	4641      	mov	r1, r8
 80053fc:	4638      	mov	r0, r7
 80053fe:	47c8      	blx	r9
 8005400:	3001      	adds	r0, #1
 8005402:	d103      	bne.n	800540c <_printf_common+0xac>
 8005404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540c:	3501      	adds	r5, #1
 800540e:	e7c6      	b.n	800539e <_printf_common+0x3e>
 8005410:	18e1      	adds	r1, r4, r3
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	2030      	movs	r0, #48	@ 0x30
 8005416:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800541a:	4422      	add	r2, r4
 800541c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005420:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005424:	3302      	adds	r3, #2
 8005426:	e7c7      	b.n	80053b8 <_printf_common+0x58>
 8005428:	2301      	movs	r3, #1
 800542a:	4622      	mov	r2, r4
 800542c:	4641      	mov	r1, r8
 800542e:	4638      	mov	r0, r7
 8005430:	47c8      	blx	r9
 8005432:	3001      	adds	r0, #1
 8005434:	d0e6      	beq.n	8005404 <_printf_common+0xa4>
 8005436:	3601      	adds	r6, #1
 8005438:	e7d9      	b.n	80053ee <_printf_common+0x8e>
	...

0800543c <_printf_i>:
 800543c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	7e0f      	ldrb	r7, [r1, #24]
 8005442:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005444:	2f78      	cmp	r7, #120	@ 0x78
 8005446:	4691      	mov	r9, r2
 8005448:	4680      	mov	r8, r0
 800544a:	460c      	mov	r4, r1
 800544c:	469a      	mov	sl, r3
 800544e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005452:	d807      	bhi.n	8005464 <_printf_i+0x28>
 8005454:	2f62      	cmp	r7, #98	@ 0x62
 8005456:	d80a      	bhi.n	800546e <_printf_i+0x32>
 8005458:	2f00      	cmp	r7, #0
 800545a:	f000 80d1 	beq.w	8005600 <_printf_i+0x1c4>
 800545e:	2f58      	cmp	r7, #88	@ 0x58
 8005460:	f000 80b8 	beq.w	80055d4 <_printf_i+0x198>
 8005464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005468:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800546c:	e03a      	b.n	80054e4 <_printf_i+0xa8>
 800546e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005472:	2b15      	cmp	r3, #21
 8005474:	d8f6      	bhi.n	8005464 <_printf_i+0x28>
 8005476:	a101      	add	r1, pc, #4	@ (adr r1, 800547c <_printf_i+0x40>)
 8005478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800547c:	080054d5 	.word	0x080054d5
 8005480:	080054e9 	.word	0x080054e9
 8005484:	08005465 	.word	0x08005465
 8005488:	08005465 	.word	0x08005465
 800548c:	08005465 	.word	0x08005465
 8005490:	08005465 	.word	0x08005465
 8005494:	080054e9 	.word	0x080054e9
 8005498:	08005465 	.word	0x08005465
 800549c:	08005465 	.word	0x08005465
 80054a0:	08005465 	.word	0x08005465
 80054a4:	08005465 	.word	0x08005465
 80054a8:	080055e7 	.word	0x080055e7
 80054ac:	08005513 	.word	0x08005513
 80054b0:	080055a1 	.word	0x080055a1
 80054b4:	08005465 	.word	0x08005465
 80054b8:	08005465 	.word	0x08005465
 80054bc:	08005609 	.word	0x08005609
 80054c0:	08005465 	.word	0x08005465
 80054c4:	08005513 	.word	0x08005513
 80054c8:	08005465 	.word	0x08005465
 80054cc:	08005465 	.word	0x08005465
 80054d0:	080055a9 	.word	0x080055a9
 80054d4:	6833      	ldr	r3, [r6, #0]
 80054d6:	1d1a      	adds	r2, r3, #4
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6032      	str	r2, [r6, #0]
 80054dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054e4:	2301      	movs	r3, #1
 80054e6:	e09c      	b.n	8005622 <_printf_i+0x1e6>
 80054e8:	6833      	ldr	r3, [r6, #0]
 80054ea:	6820      	ldr	r0, [r4, #0]
 80054ec:	1d19      	adds	r1, r3, #4
 80054ee:	6031      	str	r1, [r6, #0]
 80054f0:	0606      	lsls	r6, r0, #24
 80054f2:	d501      	bpl.n	80054f8 <_printf_i+0xbc>
 80054f4:	681d      	ldr	r5, [r3, #0]
 80054f6:	e003      	b.n	8005500 <_printf_i+0xc4>
 80054f8:	0645      	lsls	r5, r0, #25
 80054fa:	d5fb      	bpl.n	80054f4 <_printf_i+0xb8>
 80054fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005500:	2d00      	cmp	r5, #0
 8005502:	da03      	bge.n	800550c <_printf_i+0xd0>
 8005504:	232d      	movs	r3, #45	@ 0x2d
 8005506:	426d      	negs	r5, r5
 8005508:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800550c:	4858      	ldr	r0, [pc, #352]	@ (8005670 <_printf_i+0x234>)
 800550e:	230a      	movs	r3, #10
 8005510:	e011      	b.n	8005536 <_printf_i+0xfa>
 8005512:	6821      	ldr	r1, [r4, #0]
 8005514:	6833      	ldr	r3, [r6, #0]
 8005516:	0608      	lsls	r0, r1, #24
 8005518:	f853 5b04 	ldr.w	r5, [r3], #4
 800551c:	d402      	bmi.n	8005524 <_printf_i+0xe8>
 800551e:	0649      	lsls	r1, r1, #25
 8005520:	bf48      	it	mi
 8005522:	b2ad      	uxthmi	r5, r5
 8005524:	2f6f      	cmp	r7, #111	@ 0x6f
 8005526:	4852      	ldr	r0, [pc, #328]	@ (8005670 <_printf_i+0x234>)
 8005528:	6033      	str	r3, [r6, #0]
 800552a:	bf14      	ite	ne
 800552c:	230a      	movne	r3, #10
 800552e:	2308      	moveq	r3, #8
 8005530:	2100      	movs	r1, #0
 8005532:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005536:	6866      	ldr	r6, [r4, #4]
 8005538:	60a6      	str	r6, [r4, #8]
 800553a:	2e00      	cmp	r6, #0
 800553c:	db05      	blt.n	800554a <_printf_i+0x10e>
 800553e:	6821      	ldr	r1, [r4, #0]
 8005540:	432e      	orrs	r6, r5
 8005542:	f021 0104 	bic.w	r1, r1, #4
 8005546:	6021      	str	r1, [r4, #0]
 8005548:	d04b      	beq.n	80055e2 <_printf_i+0x1a6>
 800554a:	4616      	mov	r6, r2
 800554c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005550:	fb03 5711 	mls	r7, r3, r1, r5
 8005554:	5dc7      	ldrb	r7, [r0, r7]
 8005556:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800555a:	462f      	mov	r7, r5
 800555c:	42bb      	cmp	r3, r7
 800555e:	460d      	mov	r5, r1
 8005560:	d9f4      	bls.n	800554c <_printf_i+0x110>
 8005562:	2b08      	cmp	r3, #8
 8005564:	d10b      	bne.n	800557e <_printf_i+0x142>
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	07df      	lsls	r7, r3, #31
 800556a:	d508      	bpl.n	800557e <_printf_i+0x142>
 800556c:	6923      	ldr	r3, [r4, #16]
 800556e:	6861      	ldr	r1, [r4, #4]
 8005570:	4299      	cmp	r1, r3
 8005572:	bfde      	ittt	le
 8005574:	2330      	movle	r3, #48	@ 0x30
 8005576:	f806 3c01 	strble.w	r3, [r6, #-1]
 800557a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800557e:	1b92      	subs	r2, r2, r6
 8005580:	6122      	str	r2, [r4, #16]
 8005582:	f8cd a000 	str.w	sl, [sp]
 8005586:	464b      	mov	r3, r9
 8005588:	aa03      	add	r2, sp, #12
 800558a:	4621      	mov	r1, r4
 800558c:	4640      	mov	r0, r8
 800558e:	f7ff fee7 	bl	8005360 <_printf_common>
 8005592:	3001      	adds	r0, #1
 8005594:	d14a      	bne.n	800562c <_printf_i+0x1f0>
 8005596:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800559a:	b004      	add	sp, #16
 800559c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	f043 0320 	orr.w	r3, r3, #32
 80055a6:	6023      	str	r3, [r4, #0]
 80055a8:	4832      	ldr	r0, [pc, #200]	@ (8005674 <_printf_i+0x238>)
 80055aa:	2778      	movs	r7, #120	@ 0x78
 80055ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	6831      	ldr	r1, [r6, #0]
 80055b4:	061f      	lsls	r7, r3, #24
 80055b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80055ba:	d402      	bmi.n	80055c2 <_printf_i+0x186>
 80055bc:	065f      	lsls	r7, r3, #25
 80055be:	bf48      	it	mi
 80055c0:	b2ad      	uxthmi	r5, r5
 80055c2:	6031      	str	r1, [r6, #0]
 80055c4:	07d9      	lsls	r1, r3, #31
 80055c6:	bf44      	itt	mi
 80055c8:	f043 0320 	orrmi.w	r3, r3, #32
 80055cc:	6023      	strmi	r3, [r4, #0]
 80055ce:	b11d      	cbz	r5, 80055d8 <_printf_i+0x19c>
 80055d0:	2310      	movs	r3, #16
 80055d2:	e7ad      	b.n	8005530 <_printf_i+0xf4>
 80055d4:	4826      	ldr	r0, [pc, #152]	@ (8005670 <_printf_i+0x234>)
 80055d6:	e7e9      	b.n	80055ac <_printf_i+0x170>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	f023 0320 	bic.w	r3, r3, #32
 80055de:	6023      	str	r3, [r4, #0]
 80055e0:	e7f6      	b.n	80055d0 <_printf_i+0x194>
 80055e2:	4616      	mov	r6, r2
 80055e4:	e7bd      	b.n	8005562 <_printf_i+0x126>
 80055e6:	6833      	ldr	r3, [r6, #0]
 80055e8:	6825      	ldr	r5, [r4, #0]
 80055ea:	6961      	ldr	r1, [r4, #20]
 80055ec:	1d18      	adds	r0, r3, #4
 80055ee:	6030      	str	r0, [r6, #0]
 80055f0:	062e      	lsls	r6, r5, #24
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	d501      	bpl.n	80055fa <_printf_i+0x1be>
 80055f6:	6019      	str	r1, [r3, #0]
 80055f8:	e002      	b.n	8005600 <_printf_i+0x1c4>
 80055fa:	0668      	lsls	r0, r5, #25
 80055fc:	d5fb      	bpl.n	80055f6 <_printf_i+0x1ba>
 80055fe:	8019      	strh	r1, [r3, #0]
 8005600:	2300      	movs	r3, #0
 8005602:	6123      	str	r3, [r4, #16]
 8005604:	4616      	mov	r6, r2
 8005606:	e7bc      	b.n	8005582 <_printf_i+0x146>
 8005608:	6833      	ldr	r3, [r6, #0]
 800560a:	1d1a      	adds	r2, r3, #4
 800560c:	6032      	str	r2, [r6, #0]
 800560e:	681e      	ldr	r6, [r3, #0]
 8005610:	6862      	ldr	r2, [r4, #4]
 8005612:	2100      	movs	r1, #0
 8005614:	4630      	mov	r0, r6
 8005616:	f7fa fdb3 	bl	8000180 <memchr>
 800561a:	b108      	cbz	r0, 8005620 <_printf_i+0x1e4>
 800561c:	1b80      	subs	r0, r0, r6
 800561e:	6060      	str	r0, [r4, #4]
 8005620:	6863      	ldr	r3, [r4, #4]
 8005622:	6123      	str	r3, [r4, #16]
 8005624:	2300      	movs	r3, #0
 8005626:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800562a:	e7aa      	b.n	8005582 <_printf_i+0x146>
 800562c:	6923      	ldr	r3, [r4, #16]
 800562e:	4632      	mov	r2, r6
 8005630:	4649      	mov	r1, r9
 8005632:	4640      	mov	r0, r8
 8005634:	47d0      	blx	sl
 8005636:	3001      	adds	r0, #1
 8005638:	d0ad      	beq.n	8005596 <_printf_i+0x15a>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	079b      	lsls	r3, r3, #30
 800563e:	d413      	bmi.n	8005668 <_printf_i+0x22c>
 8005640:	68e0      	ldr	r0, [r4, #12]
 8005642:	9b03      	ldr	r3, [sp, #12]
 8005644:	4298      	cmp	r0, r3
 8005646:	bfb8      	it	lt
 8005648:	4618      	movlt	r0, r3
 800564a:	e7a6      	b.n	800559a <_printf_i+0x15e>
 800564c:	2301      	movs	r3, #1
 800564e:	4632      	mov	r2, r6
 8005650:	4649      	mov	r1, r9
 8005652:	4640      	mov	r0, r8
 8005654:	47d0      	blx	sl
 8005656:	3001      	adds	r0, #1
 8005658:	d09d      	beq.n	8005596 <_printf_i+0x15a>
 800565a:	3501      	adds	r5, #1
 800565c:	68e3      	ldr	r3, [r4, #12]
 800565e:	9903      	ldr	r1, [sp, #12]
 8005660:	1a5b      	subs	r3, r3, r1
 8005662:	42ab      	cmp	r3, r5
 8005664:	dcf2      	bgt.n	800564c <_printf_i+0x210>
 8005666:	e7eb      	b.n	8005640 <_printf_i+0x204>
 8005668:	2500      	movs	r5, #0
 800566a:	f104 0619 	add.w	r6, r4, #25
 800566e:	e7f5      	b.n	800565c <_printf_i+0x220>
 8005670:	08005c59 	.word	0x08005c59
 8005674:	08005c6a 	.word	0x08005c6a

08005678 <__sflush_r>:
 8005678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800567c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005680:	0716      	lsls	r6, r2, #28
 8005682:	4605      	mov	r5, r0
 8005684:	460c      	mov	r4, r1
 8005686:	d454      	bmi.n	8005732 <__sflush_r+0xba>
 8005688:	684b      	ldr	r3, [r1, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	dc02      	bgt.n	8005694 <__sflush_r+0x1c>
 800568e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	dd48      	ble.n	8005726 <__sflush_r+0xae>
 8005694:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005696:	2e00      	cmp	r6, #0
 8005698:	d045      	beq.n	8005726 <__sflush_r+0xae>
 800569a:	2300      	movs	r3, #0
 800569c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80056a0:	682f      	ldr	r7, [r5, #0]
 80056a2:	6a21      	ldr	r1, [r4, #32]
 80056a4:	602b      	str	r3, [r5, #0]
 80056a6:	d030      	beq.n	800570a <__sflush_r+0x92>
 80056a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80056aa:	89a3      	ldrh	r3, [r4, #12]
 80056ac:	0759      	lsls	r1, r3, #29
 80056ae:	d505      	bpl.n	80056bc <__sflush_r+0x44>
 80056b0:	6863      	ldr	r3, [r4, #4]
 80056b2:	1ad2      	subs	r2, r2, r3
 80056b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80056b6:	b10b      	cbz	r3, 80056bc <__sflush_r+0x44>
 80056b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056ba:	1ad2      	subs	r2, r2, r3
 80056bc:	2300      	movs	r3, #0
 80056be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056c0:	6a21      	ldr	r1, [r4, #32]
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b0      	blx	r6
 80056c6:	1c43      	adds	r3, r0, #1
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	d106      	bne.n	80056da <__sflush_r+0x62>
 80056cc:	6829      	ldr	r1, [r5, #0]
 80056ce:	291d      	cmp	r1, #29
 80056d0:	d82b      	bhi.n	800572a <__sflush_r+0xb2>
 80056d2:	4a2a      	ldr	r2, [pc, #168]	@ (800577c <__sflush_r+0x104>)
 80056d4:	40ca      	lsrs	r2, r1
 80056d6:	07d6      	lsls	r6, r2, #31
 80056d8:	d527      	bpl.n	800572a <__sflush_r+0xb2>
 80056da:	2200      	movs	r2, #0
 80056dc:	6062      	str	r2, [r4, #4]
 80056de:	04d9      	lsls	r1, r3, #19
 80056e0:	6922      	ldr	r2, [r4, #16]
 80056e2:	6022      	str	r2, [r4, #0]
 80056e4:	d504      	bpl.n	80056f0 <__sflush_r+0x78>
 80056e6:	1c42      	adds	r2, r0, #1
 80056e8:	d101      	bne.n	80056ee <__sflush_r+0x76>
 80056ea:	682b      	ldr	r3, [r5, #0]
 80056ec:	b903      	cbnz	r3, 80056f0 <__sflush_r+0x78>
 80056ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80056f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056f2:	602f      	str	r7, [r5, #0]
 80056f4:	b1b9      	cbz	r1, 8005726 <__sflush_r+0xae>
 80056f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056fa:	4299      	cmp	r1, r3
 80056fc:	d002      	beq.n	8005704 <__sflush_r+0x8c>
 80056fe:	4628      	mov	r0, r5
 8005700:	f7ff fbf4 	bl	8004eec <_free_r>
 8005704:	2300      	movs	r3, #0
 8005706:	6363      	str	r3, [r4, #52]	@ 0x34
 8005708:	e00d      	b.n	8005726 <__sflush_r+0xae>
 800570a:	2301      	movs	r3, #1
 800570c:	4628      	mov	r0, r5
 800570e:	47b0      	blx	r6
 8005710:	4602      	mov	r2, r0
 8005712:	1c50      	adds	r0, r2, #1
 8005714:	d1c9      	bne.n	80056aa <__sflush_r+0x32>
 8005716:	682b      	ldr	r3, [r5, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0c6      	beq.n	80056aa <__sflush_r+0x32>
 800571c:	2b1d      	cmp	r3, #29
 800571e:	d001      	beq.n	8005724 <__sflush_r+0xac>
 8005720:	2b16      	cmp	r3, #22
 8005722:	d11e      	bne.n	8005762 <__sflush_r+0xea>
 8005724:	602f      	str	r7, [r5, #0]
 8005726:	2000      	movs	r0, #0
 8005728:	e022      	b.n	8005770 <__sflush_r+0xf8>
 800572a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800572e:	b21b      	sxth	r3, r3
 8005730:	e01b      	b.n	800576a <__sflush_r+0xf2>
 8005732:	690f      	ldr	r7, [r1, #16]
 8005734:	2f00      	cmp	r7, #0
 8005736:	d0f6      	beq.n	8005726 <__sflush_r+0xae>
 8005738:	0793      	lsls	r3, r2, #30
 800573a:	680e      	ldr	r6, [r1, #0]
 800573c:	bf08      	it	eq
 800573e:	694b      	ldreq	r3, [r1, #20]
 8005740:	600f      	str	r7, [r1, #0]
 8005742:	bf18      	it	ne
 8005744:	2300      	movne	r3, #0
 8005746:	eba6 0807 	sub.w	r8, r6, r7
 800574a:	608b      	str	r3, [r1, #8]
 800574c:	f1b8 0f00 	cmp.w	r8, #0
 8005750:	dde9      	ble.n	8005726 <__sflush_r+0xae>
 8005752:	6a21      	ldr	r1, [r4, #32]
 8005754:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005756:	4643      	mov	r3, r8
 8005758:	463a      	mov	r2, r7
 800575a:	4628      	mov	r0, r5
 800575c:	47b0      	blx	r6
 800575e:	2800      	cmp	r0, #0
 8005760:	dc08      	bgt.n	8005774 <__sflush_r+0xfc>
 8005762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800576a:	81a3      	strh	r3, [r4, #12]
 800576c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005774:	4407      	add	r7, r0
 8005776:	eba8 0800 	sub.w	r8, r8, r0
 800577a:	e7e7      	b.n	800574c <__sflush_r+0xd4>
 800577c:	20400001 	.word	0x20400001

08005780 <_fflush_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	690b      	ldr	r3, [r1, #16]
 8005784:	4605      	mov	r5, r0
 8005786:	460c      	mov	r4, r1
 8005788:	b913      	cbnz	r3, 8005790 <_fflush_r+0x10>
 800578a:	2500      	movs	r5, #0
 800578c:	4628      	mov	r0, r5
 800578e:	bd38      	pop	{r3, r4, r5, pc}
 8005790:	b118      	cbz	r0, 800579a <_fflush_r+0x1a>
 8005792:	6a03      	ldr	r3, [r0, #32]
 8005794:	b90b      	cbnz	r3, 800579a <_fflush_r+0x1a>
 8005796:	f7ff f9af 	bl	8004af8 <__sinit>
 800579a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f3      	beq.n	800578a <_fflush_r+0xa>
 80057a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057a4:	07d0      	lsls	r0, r2, #31
 80057a6:	d404      	bmi.n	80057b2 <_fflush_r+0x32>
 80057a8:	0599      	lsls	r1, r3, #22
 80057aa:	d402      	bmi.n	80057b2 <_fflush_r+0x32>
 80057ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057ae:	f7ff fb9a 	bl	8004ee6 <__retarget_lock_acquire_recursive>
 80057b2:	4628      	mov	r0, r5
 80057b4:	4621      	mov	r1, r4
 80057b6:	f7ff ff5f 	bl	8005678 <__sflush_r>
 80057ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057bc:	07da      	lsls	r2, r3, #31
 80057be:	4605      	mov	r5, r0
 80057c0:	d4e4      	bmi.n	800578c <_fflush_r+0xc>
 80057c2:	89a3      	ldrh	r3, [r4, #12]
 80057c4:	059b      	lsls	r3, r3, #22
 80057c6:	d4e1      	bmi.n	800578c <_fflush_r+0xc>
 80057c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057ca:	f7ff fb8d 	bl	8004ee8 <__retarget_lock_release_recursive>
 80057ce:	e7dd      	b.n	800578c <_fflush_r+0xc>

080057d0 <__swhatbuf_r>:
 80057d0:	b570      	push	{r4, r5, r6, lr}
 80057d2:	460c      	mov	r4, r1
 80057d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d8:	2900      	cmp	r1, #0
 80057da:	b096      	sub	sp, #88	@ 0x58
 80057dc:	4615      	mov	r5, r2
 80057de:	461e      	mov	r6, r3
 80057e0:	da0d      	bge.n	80057fe <__swhatbuf_r+0x2e>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057e8:	f04f 0100 	mov.w	r1, #0
 80057ec:	bf14      	ite	ne
 80057ee:	2340      	movne	r3, #64	@ 0x40
 80057f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80057f4:	2000      	movs	r0, #0
 80057f6:	6031      	str	r1, [r6, #0]
 80057f8:	602b      	str	r3, [r5, #0]
 80057fa:	b016      	add	sp, #88	@ 0x58
 80057fc:	bd70      	pop	{r4, r5, r6, pc}
 80057fe:	466a      	mov	r2, sp
 8005800:	f000 f848 	bl	8005894 <_fstat_r>
 8005804:	2800      	cmp	r0, #0
 8005806:	dbec      	blt.n	80057e2 <__swhatbuf_r+0x12>
 8005808:	9901      	ldr	r1, [sp, #4]
 800580a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800580e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005812:	4259      	negs	r1, r3
 8005814:	4159      	adcs	r1, r3
 8005816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800581a:	e7eb      	b.n	80057f4 <__swhatbuf_r+0x24>

0800581c <__smakebuf_r>:
 800581c:	898b      	ldrh	r3, [r1, #12]
 800581e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005820:	079d      	lsls	r5, r3, #30
 8005822:	4606      	mov	r6, r0
 8005824:	460c      	mov	r4, r1
 8005826:	d507      	bpl.n	8005838 <__smakebuf_r+0x1c>
 8005828:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	6123      	str	r3, [r4, #16]
 8005830:	2301      	movs	r3, #1
 8005832:	6163      	str	r3, [r4, #20]
 8005834:	b003      	add	sp, #12
 8005836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005838:	ab01      	add	r3, sp, #4
 800583a:	466a      	mov	r2, sp
 800583c:	f7ff ffc8 	bl	80057d0 <__swhatbuf_r>
 8005840:	9f00      	ldr	r7, [sp, #0]
 8005842:	4605      	mov	r5, r0
 8005844:	4639      	mov	r1, r7
 8005846:	4630      	mov	r0, r6
 8005848:	f7ff fbbc 	bl	8004fc4 <_malloc_r>
 800584c:	b948      	cbnz	r0, 8005862 <__smakebuf_r+0x46>
 800584e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005852:	059a      	lsls	r2, r3, #22
 8005854:	d4ee      	bmi.n	8005834 <__smakebuf_r+0x18>
 8005856:	f023 0303 	bic.w	r3, r3, #3
 800585a:	f043 0302 	orr.w	r3, r3, #2
 800585e:	81a3      	strh	r3, [r4, #12]
 8005860:	e7e2      	b.n	8005828 <__smakebuf_r+0xc>
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	6020      	str	r0, [r4, #0]
 8005866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800586a:	81a3      	strh	r3, [r4, #12]
 800586c:	9b01      	ldr	r3, [sp, #4]
 800586e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005872:	b15b      	cbz	r3, 800588c <__smakebuf_r+0x70>
 8005874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005878:	4630      	mov	r0, r6
 800587a:	f000 f81d 	bl	80058b8 <_isatty_r>
 800587e:	b128      	cbz	r0, 800588c <__smakebuf_r+0x70>
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	f023 0303 	bic.w	r3, r3, #3
 8005886:	f043 0301 	orr.w	r3, r3, #1
 800588a:	81a3      	strh	r3, [r4, #12]
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	431d      	orrs	r5, r3
 8005890:	81a5      	strh	r5, [r4, #12]
 8005892:	e7cf      	b.n	8005834 <__smakebuf_r+0x18>

08005894 <_fstat_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4d07      	ldr	r5, [pc, #28]	@ (80058b4 <_fstat_r+0x20>)
 8005898:	2300      	movs	r3, #0
 800589a:	4604      	mov	r4, r0
 800589c:	4608      	mov	r0, r1
 800589e:	4611      	mov	r1, r2
 80058a0:	602b      	str	r3, [r5, #0]
 80058a2:	f7fb fc93 	bl	80011cc <_fstat>
 80058a6:	1c43      	adds	r3, r0, #1
 80058a8:	d102      	bne.n	80058b0 <_fstat_r+0x1c>
 80058aa:	682b      	ldr	r3, [r5, #0]
 80058ac:	b103      	cbz	r3, 80058b0 <_fstat_r+0x1c>
 80058ae:	6023      	str	r3, [r4, #0]
 80058b0:	bd38      	pop	{r3, r4, r5, pc}
 80058b2:	bf00      	nop
 80058b4:	200003ac 	.word	0x200003ac

080058b8 <_isatty_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4d06      	ldr	r5, [pc, #24]	@ (80058d4 <_isatty_r+0x1c>)
 80058bc:	2300      	movs	r3, #0
 80058be:	4604      	mov	r4, r0
 80058c0:	4608      	mov	r0, r1
 80058c2:	602b      	str	r3, [r5, #0]
 80058c4:	f7fb fc92 	bl	80011ec <_isatty>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d102      	bne.n	80058d2 <_isatty_r+0x1a>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	b103      	cbz	r3, 80058d2 <_isatty_r+0x1a>
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	200003ac 	.word	0x200003ac

080058d8 <_sbrk_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4d06      	ldr	r5, [pc, #24]	@ (80058f4 <_sbrk_r+0x1c>)
 80058dc:	2300      	movs	r3, #0
 80058de:	4604      	mov	r4, r0
 80058e0:	4608      	mov	r0, r1
 80058e2:	602b      	str	r3, [r5, #0]
 80058e4:	f7fb fc9a 	bl	800121c <_sbrk>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d102      	bne.n	80058f2 <_sbrk_r+0x1a>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	b103      	cbz	r3, 80058f2 <_sbrk_r+0x1a>
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	200003ac 	.word	0x200003ac

080058f8 <_init>:
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	bf00      	nop
 80058fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058fe:	bc08      	pop	{r3}
 8005900:	469e      	mov	lr, r3
 8005902:	4770      	bx	lr

08005904 <_fini>:
 8005904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005906:	bf00      	nop
 8005908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590a:	bc08      	pop	{r3}
 800590c:	469e      	mov	lr, r3
 800590e:	4770      	bx	lr

08005910 <__FLASH_Program_Fast_veneer>:
 8005910:	f85f f000 	ldr.w	pc, [pc]	@ 8005914 <__FLASH_Program_Fast_veneer+0x4>
 8005914:	20000089 	.word	0x20000089

Disassembly of section .data:

20000008 <SystemCoreClock>:
20000008:	003d0900                                ..=.

2000000c <GPIO_PORT>:
2000000c:	48000400 48000400 48000400              ...H...H...H

20000018 <BUTTON_PORT>:
20000018:	48000800 48000c00 48000c00              ...H...H...H

20000024 <uwTickPrio>:
20000024:	00000010                                ....

20000028 <uwTickFreq>:
20000028:	00000001                                ....

2000002c <__sglue>:
2000002c:	00000000 00000003 20000270              ........p.. 

20000038 <_impure_ptr>:
20000038:	2000003c                                <.. 

2000003c <_impure_data>:
2000003c:	00000000 20000270 200002d8 20000340     ....p.. ... @.. 
	...

20000088 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000088:	b480      	push	{r7}
2000008a:	b089      	sub	sp, #36	@ 0x24
2000008c:	af00      	add	r7, sp, #0
2000008e:	6078      	str	r0, [r7, #4]
20000090:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
20000092:	2380      	movs	r3, #128	@ 0x80
20000094:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
20000096:	687b      	ldr	r3, [r7, #4]
20000098:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
2000009a:	683b      	ldr	r3, [r7, #0]
2000009c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000009e:	4b18      	ldr	r3, [pc, #96]	@ (20000100 <FLASH_Program_Fast+0x78>)
200000a0:	695b      	ldr	r3, [r3, #20]
200000a2:	4a17      	ldr	r2, [pc, #92]	@ (20000100 <FLASH_Program_Fast+0x78>)
200000a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
200000a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000aa:	f3ef 8310 	mrs	r3, PRIMASK
200000ae:	60fb      	str	r3, [r7, #12]
  return(result);
200000b0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000b4:	b672      	cpsid	i
}
200000b6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
200000b8:	697b      	ldr	r3, [r7, #20]
200000ba:	681a      	ldr	r2, [r3, #0]
200000bc:	69bb      	ldr	r3, [r7, #24]
200000be:	601a      	str	r2, [r3, #0]
    dest_addr++;
200000c0:	69bb      	ldr	r3, [r7, #24]
200000c2:	3304      	adds	r3, #4
200000c4:	61bb      	str	r3, [r7, #24]
    src_addr++;
200000c6:	697b      	ldr	r3, [r7, #20]
200000c8:	3304      	adds	r3, #4
200000ca:	617b      	str	r3, [r7, #20]
    row_index--;
200000cc:	7ffb      	ldrb	r3, [r7, #31]
200000ce:	3b01      	subs	r3, #1
200000d0:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
200000d2:	7ffb      	ldrb	r3, [r7, #31]
200000d4:	2b00      	cmp	r3, #0
200000d6:	d1ef      	bne.n	200000b8 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
200000d8:	bf00      	nop
200000da:	4b09      	ldr	r3, [pc, #36]	@ (20000100 <FLASH_Program_Fast+0x78>)
200000dc:	691b      	ldr	r3, [r3, #16]
200000de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200000e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200000e6:	d0f8      	beq.n	200000da <FLASH_Program_Fast+0x52>
200000e8:	693b      	ldr	r3, [r7, #16]
200000ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000ec:	68bb      	ldr	r3, [r7, #8]
200000ee:	f383 8810 	msr	PRIMASK, r3
}
200000f2:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000f4:	bf00      	nop
200000f6:	3724      	adds	r7, #36	@ 0x24
200000f8:	46bd      	mov	sp, r7
200000fa:	f85d 7b04 	ldr.w	r7, [sp], #4
200000fe:	4770      	bx	lr
20000100:	58004000 	.word	0x58004000

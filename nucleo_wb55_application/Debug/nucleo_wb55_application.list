
nucleo_wb55_application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a78  08010140  08010140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08014bb8  08014bb8  00005bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014d2c  08014d2c  00005d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014d34  08014d34  00005d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014d38  08014d38  00005d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  20000008  08014d3c  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000204  2000008c  08014dc0  0000608c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000290  08014dc0  00006290  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000108f2  00000000  00000000  000060bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025bb  00000000  00000000  000169ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012e0  00000000  00000000  00018f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e4b  00000000  00000000  0001a250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002253b  00000000  00000000  0001b09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f4f9  00000000  00000000  0003d5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d8924  00000000  00000000  0004cacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001253f3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000055c4  00000000  00000000  00125438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000085  00000000  00000000  0012a9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010140 <__do_global_dtors_aux>:
 8010140:	b510      	push	{r4, lr}
 8010142:	4c05      	ldr	r4, [pc, #20]	@ (8010158 <__do_global_dtors_aux+0x18>)
 8010144:	7823      	ldrb	r3, [r4, #0]
 8010146:	b933      	cbnz	r3, 8010156 <__do_global_dtors_aux+0x16>
 8010148:	4b04      	ldr	r3, [pc, #16]	@ (801015c <__do_global_dtors_aux+0x1c>)
 801014a:	b113      	cbz	r3, 8010152 <__do_global_dtors_aux+0x12>
 801014c:	4804      	ldr	r0, [pc, #16]	@ (8010160 <__do_global_dtors_aux+0x20>)
 801014e:	f3af 8000 	nop.w
 8010152:	2301      	movs	r3, #1
 8010154:	7023      	strb	r3, [r4, #0]
 8010156:	bd10      	pop	{r4, pc}
 8010158:	2000008c 	.word	0x2000008c
 801015c:	00000000 	.word	0x00000000
 8010160:	08014ba0 	.word	0x08014ba0

08010164 <frame_dummy>:
 8010164:	b508      	push	{r3, lr}
 8010166:	4b03      	ldr	r3, [pc, #12]	@ (8010174 <frame_dummy+0x10>)
 8010168:	b11b      	cbz	r3, 8010172 <frame_dummy+0xe>
 801016a:	4903      	ldr	r1, [pc, #12]	@ (8010178 <frame_dummy+0x14>)
 801016c:	4803      	ldr	r0, [pc, #12]	@ (801017c <frame_dummy+0x18>)
 801016e:	f3af 8000 	nop.w
 8010172:	bd08      	pop	{r3, pc}
 8010174:	00000000 	.word	0x00000000
 8010178:	20000090 	.word	0x20000090
 801017c:	08014ba0 	.word	0x08014ba0

08010180 <memchr>:
 8010180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010184:	2a10      	cmp	r2, #16
 8010186:	db2b      	blt.n	80101e0 <memchr+0x60>
 8010188:	f010 0f07 	tst.w	r0, #7
 801018c:	d008      	beq.n	80101a0 <memchr+0x20>
 801018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010192:	3a01      	subs	r2, #1
 8010194:	428b      	cmp	r3, r1
 8010196:	d02d      	beq.n	80101f4 <memchr+0x74>
 8010198:	f010 0f07 	tst.w	r0, #7
 801019c:	b342      	cbz	r2, 80101f0 <memchr+0x70>
 801019e:	d1f6      	bne.n	801018e <memchr+0xe>
 80101a0:	b4f0      	push	{r4, r5, r6, r7}
 80101a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80101a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80101aa:	f022 0407 	bic.w	r4, r2, #7
 80101ae:	f07f 0700 	mvns.w	r7, #0
 80101b2:	2300      	movs	r3, #0
 80101b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80101b8:	3c08      	subs	r4, #8
 80101ba:	ea85 0501 	eor.w	r5, r5, r1
 80101be:	ea86 0601 	eor.w	r6, r6, r1
 80101c2:	fa85 f547 	uadd8	r5, r5, r7
 80101c6:	faa3 f587 	sel	r5, r3, r7
 80101ca:	fa86 f647 	uadd8	r6, r6, r7
 80101ce:	faa5 f687 	sel	r6, r5, r7
 80101d2:	b98e      	cbnz	r6, 80101f8 <memchr+0x78>
 80101d4:	d1ee      	bne.n	80101b4 <memchr+0x34>
 80101d6:	bcf0      	pop	{r4, r5, r6, r7}
 80101d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80101dc:	f002 0207 	and.w	r2, r2, #7
 80101e0:	b132      	cbz	r2, 80101f0 <memchr+0x70>
 80101e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101e6:	3a01      	subs	r2, #1
 80101e8:	ea83 0301 	eor.w	r3, r3, r1
 80101ec:	b113      	cbz	r3, 80101f4 <memchr+0x74>
 80101ee:	d1f8      	bne.n	80101e2 <memchr+0x62>
 80101f0:	2000      	movs	r0, #0
 80101f2:	4770      	bx	lr
 80101f4:	3801      	subs	r0, #1
 80101f6:	4770      	bx	lr
 80101f8:	2d00      	cmp	r5, #0
 80101fa:	bf06      	itte	eq
 80101fc:	4635      	moveq	r5, r6
 80101fe:	3803      	subeq	r0, #3
 8010200:	3807      	subne	r0, #7
 8010202:	f015 0f01 	tst.w	r5, #1
 8010206:	d107      	bne.n	8010218 <memchr+0x98>
 8010208:	3001      	adds	r0, #1
 801020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801020e:	bf02      	ittt	eq
 8010210:	3001      	addeq	r0, #1
 8010212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010216:	3001      	addeq	r0, #1
 8010218:	bcf0      	pop	{r4, r5, r6, r7}
 801021a:	3801      	subs	r0, #1
 801021c:	4770      	bx	lr
 801021e:	bf00      	nop

08010220 <__aeabi_uldivmod>:
 8010220:	b953      	cbnz	r3, 8010238 <__aeabi_uldivmod+0x18>
 8010222:	b94a      	cbnz	r2, 8010238 <__aeabi_uldivmod+0x18>
 8010224:	2900      	cmp	r1, #0
 8010226:	bf08      	it	eq
 8010228:	2800      	cmpeq	r0, #0
 801022a:	bf1c      	itt	ne
 801022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010234:	f000 b988 	b.w	8010548 <__aeabi_idiv0>
 8010238:	f1ad 0c08 	sub.w	ip, sp, #8
 801023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010240:	f000 f806 	bl	8010250 <__udivmoddi4>
 8010244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801024c:	b004      	add	sp, #16
 801024e:	4770      	bx	lr

08010250 <__udivmoddi4>:
 8010250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010254:	9d08      	ldr	r5, [sp, #32]
 8010256:	468e      	mov	lr, r1
 8010258:	4604      	mov	r4, r0
 801025a:	4688      	mov	r8, r1
 801025c:	2b00      	cmp	r3, #0
 801025e:	d14a      	bne.n	80102f6 <__udivmoddi4+0xa6>
 8010260:	428a      	cmp	r2, r1
 8010262:	4617      	mov	r7, r2
 8010264:	d962      	bls.n	801032c <__udivmoddi4+0xdc>
 8010266:	fab2 f682 	clz	r6, r2
 801026a:	b14e      	cbz	r6, 8010280 <__udivmoddi4+0x30>
 801026c:	f1c6 0320 	rsb	r3, r6, #32
 8010270:	fa01 f806 	lsl.w	r8, r1, r6
 8010274:	fa20 f303 	lsr.w	r3, r0, r3
 8010278:	40b7      	lsls	r7, r6
 801027a:	ea43 0808 	orr.w	r8, r3, r8
 801027e:	40b4      	lsls	r4, r6
 8010280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010284:	fa1f fc87 	uxth.w	ip, r7
 8010288:	fbb8 f1fe 	udiv	r1, r8, lr
 801028c:	0c23      	lsrs	r3, r4, #16
 801028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8010292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010296:	fb01 f20c 	mul.w	r2, r1, ip
 801029a:	429a      	cmp	r2, r3
 801029c:	d909      	bls.n	80102b2 <__udivmoddi4+0x62>
 801029e:	18fb      	adds	r3, r7, r3
 80102a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80102a4:	f080 80ea 	bcs.w	801047c <__udivmoddi4+0x22c>
 80102a8:	429a      	cmp	r2, r3
 80102aa:	f240 80e7 	bls.w	801047c <__udivmoddi4+0x22c>
 80102ae:	3902      	subs	r1, #2
 80102b0:	443b      	add	r3, r7
 80102b2:	1a9a      	subs	r2, r3, r2
 80102b4:	b2a3      	uxth	r3, r4
 80102b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80102ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80102be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80102c6:	459c      	cmp	ip, r3
 80102c8:	d909      	bls.n	80102de <__udivmoddi4+0x8e>
 80102ca:	18fb      	adds	r3, r7, r3
 80102cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80102d0:	f080 80d6 	bcs.w	8010480 <__udivmoddi4+0x230>
 80102d4:	459c      	cmp	ip, r3
 80102d6:	f240 80d3 	bls.w	8010480 <__udivmoddi4+0x230>
 80102da:	443b      	add	r3, r7
 80102dc:	3802      	subs	r0, #2
 80102de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80102e2:	eba3 030c 	sub.w	r3, r3, ip
 80102e6:	2100      	movs	r1, #0
 80102e8:	b11d      	cbz	r5, 80102f2 <__udivmoddi4+0xa2>
 80102ea:	40f3      	lsrs	r3, r6
 80102ec:	2200      	movs	r2, #0
 80102ee:	e9c5 3200 	strd	r3, r2, [r5]
 80102f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102f6:	428b      	cmp	r3, r1
 80102f8:	d905      	bls.n	8010306 <__udivmoddi4+0xb6>
 80102fa:	b10d      	cbz	r5, 8010300 <__udivmoddi4+0xb0>
 80102fc:	e9c5 0100 	strd	r0, r1, [r5]
 8010300:	2100      	movs	r1, #0
 8010302:	4608      	mov	r0, r1
 8010304:	e7f5      	b.n	80102f2 <__udivmoddi4+0xa2>
 8010306:	fab3 f183 	clz	r1, r3
 801030a:	2900      	cmp	r1, #0
 801030c:	d146      	bne.n	801039c <__udivmoddi4+0x14c>
 801030e:	4573      	cmp	r3, lr
 8010310:	d302      	bcc.n	8010318 <__udivmoddi4+0xc8>
 8010312:	4282      	cmp	r2, r0
 8010314:	f200 8105 	bhi.w	8010522 <__udivmoddi4+0x2d2>
 8010318:	1a84      	subs	r4, r0, r2
 801031a:	eb6e 0203 	sbc.w	r2, lr, r3
 801031e:	2001      	movs	r0, #1
 8010320:	4690      	mov	r8, r2
 8010322:	2d00      	cmp	r5, #0
 8010324:	d0e5      	beq.n	80102f2 <__udivmoddi4+0xa2>
 8010326:	e9c5 4800 	strd	r4, r8, [r5]
 801032a:	e7e2      	b.n	80102f2 <__udivmoddi4+0xa2>
 801032c:	2a00      	cmp	r2, #0
 801032e:	f000 8090 	beq.w	8010452 <__udivmoddi4+0x202>
 8010332:	fab2 f682 	clz	r6, r2
 8010336:	2e00      	cmp	r6, #0
 8010338:	f040 80a4 	bne.w	8010484 <__udivmoddi4+0x234>
 801033c:	1a8a      	subs	r2, r1, r2
 801033e:	0c03      	lsrs	r3, r0, #16
 8010340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010344:	b280      	uxth	r0, r0
 8010346:	b2bc      	uxth	r4, r7
 8010348:	2101      	movs	r1, #1
 801034a:	fbb2 fcfe 	udiv	ip, r2, lr
 801034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8010352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010356:	fb04 f20c 	mul.w	r2, r4, ip
 801035a:	429a      	cmp	r2, r3
 801035c:	d907      	bls.n	801036e <__udivmoddi4+0x11e>
 801035e:	18fb      	adds	r3, r7, r3
 8010360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8010364:	d202      	bcs.n	801036c <__udivmoddi4+0x11c>
 8010366:	429a      	cmp	r2, r3
 8010368:	f200 80e0 	bhi.w	801052c <__udivmoddi4+0x2dc>
 801036c:	46c4      	mov	ip, r8
 801036e:	1a9b      	subs	r3, r3, r2
 8010370:	fbb3 f2fe 	udiv	r2, r3, lr
 8010374:	fb0e 3312 	mls	r3, lr, r2, r3
 8010378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 801037c:	fb02 f404 	mul.w	r4, r2, r4
 8010380:	429c      	cmp	r4, r3
 8010382:	d907      	bls.n	8010394 <__udivmoddi4+0x144>
 8010384:	18fb      	adds	r3, r7, r3
 8010386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 801038a:	d202      	bcs.n	8010392 <__udivmoddi4+0x142>
 801038c:	429c      	cmp	r4, r3
 801038e:	f200 80ca 	bhi.w	8010526 <__udivmoddi4+0x2d6>
 8010392:	4602      	mov	r2, r0
 8010394:	1b1b      	subs	r3, r3, r4
 8010396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 801039a:	e7a5      	b.n	80102e8 <__udivmoddi4+0x98>
 801039c:	f1c1 0620 	rsb	r6, r1, #32
 80103a0:	408b      	lsls	r3, r1
 80103a2:	fa22 f706 	lsr.w	r7, r2, r6
 80103a6:	431f      	orrs	r7, r3
 80103a8:	fa0e f401 	lsl.w	r4, lr, r1
 80103ac:	fa20 f306 	lsr.w	r3, r0, r6
 80103b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80103b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80103b8:	4323      	orrs	r3, r4
 80103ba:	fa00 f801 	lsl.w	r8, r0, r1
 80103be:	fa1f fc87 	uxth.w	ip, r7
 80103c2:	fbbe f0f9 	udiv	r0, lr, r9
 80103c6:	0c1c      	lsrs	r4, r3, #16
 80103c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80103cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80103d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80103d4:	45a6      	cmp	lr, r4
 80103d6:	fa02 f201 	lsl.w	r2, r2, r1
 80103da:	d909      	bls.n	80103f0 <__udivmoddi4+0x1a0>
 80103dc:	193c      	adds	r4, r7, r4
 80103de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80103e2:	f080 809c 	bcs.w	801051e <__udivmoddi4+0x2ce>
 80103e6:	45a6      	cmp	lr, r4
 80103e8:	f240 8099 	bls.w	801051e <__udivmoddi4+0x2ce>
 80103ec:	3802      	subs	r0, #2
 80103ee:	443c      	add	r4, r7
 80103f0:	eba4 040e 	sub.w	r4, r4, lr
 80103f4:	fa1f fe83 	uxth.w	lr, r3
 80103f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80103fc:	fb09 4413 	mls	r4, r9, r3, r4
 8010400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8010404:	fb03 fc0c 	mul.w	ip, r3, ip
 8010408:	45a4      	cmp	ip, r4
 801040a:	d908      	bls.n	801041e <__udivmoddi4+0x1ce>
 801040c:	193c      	adds	r4, r7, r4
 801040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8010412:	f080 8082 	bcs.w	801051a <__udivmoddi4+0x2ca>
 8010416:	45a4      	cmp	ip, r4
 8010418:	d97f      	bls.n	801051a <__udivmoddi4+0x2ca>
 801041a:	3b02      	subs	r3, #2
 801041c:	443c      	add	r4, r7
 801041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8010422:	eba4 040c 	sub.w	r4, r4, ip
 8010426:	fba0 ec02 	umull	lr, ip, r0, r2
 801042a:	4564      	cmp	r4, ip
 801042c:	4673      	mov	r3, lr
 801042e:	46e1      	mov	r9, ip
 8010430:	d362      	bcc.n	80104f8 <__udivmoddi4+0x2a8>
 8010432:	d05f      	beq.n	80104f4 <__udivmoddi4+0x2a4>
 8010434:	b15d      	cbz	r5, 801044e <__udivmoddi4+0x1fe>
 8010436:	ebb8 0203 	subs.w	r2, r8, r3
 801043a:	eb64 0409 	sbc.w	r4, r4, r9
 801043e:	fa04 f606 	lsl.w	r6, r4, r6
 8010442:	fa22 f301 	lsr.w	r3, r2, r1
 8010446:	431e      	orrs	r6, r3
 8010448:	40cc      	lsrs	r4, r1
 801044a:	e9c5 6400 	strd	r6, r4, [r5]
 801044e:	2100      	movs	r1, #0
 8010450:	e74f      	b.n	80102f2 <__udivmoddi4+0xa2>
 8010452:	fbb1 fcf2 	udiv	ip, r1, r2
 8010456:	0c01      	lsrs	r1, r0, #16
 8010458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 801045c:	b280      	uxth	r0, r0
 801045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8010462:	463b      	mov	r3, r7
 8010464:	4638      	mov	r0, r7
 8010466:	463c      	mov	r4, r7
 8010468:	46b8      	mov	r8, r7
 801046a:	46be      	mov	lr, r7
 801046c:	2620      	movs	r6, #32
 801046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8010472:	eba2 0208 	sub.w	r2, r2, r8
 8010476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 801047a:	e766      	b.n	801034a <__udivmoddi4+0xfa>
 801047c:	4601      	mov	r1, r0
 801047e:	e718      	b.n	80102b2 <__udivmoddi4+0x62>
 8010480:	4610      	mov	r0, r2
 8010482:	e72c      	b.n	80102de <__udivmoddi4+0x8e>
 8010484:	f1c6 0220 	rsb	r2, r6, #32
 8010488:	fa2e f302 	lsr.w	r3, lr, r2
 801048c:	40b7      	lsls	r7, r6
 801048e:	40b1      	lsls	r1, r6
 8010490:	fa20 f202 	lsr.w	r2, r0, r2
 8010494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010498:	430a      	orrs	r2, r1
 801049a:	fbb3 f8fe 	udiv	r8, r3, lr
 801049e:	b2bc      	uxth	r4, r7
 80104a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80104a4:	0c11      	lsrs	r1, r2, #16
 80104a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80104aa:	fb08 f904 	mul.w	r9, r8, r4
 80104ae:	40b0      	lsls	r0, r6
 80104b0:	4589      	cmp	r9, r1
 80104b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80104b6:	b280      	uxth	r0, r0
 80104b8:	d93e      	bls.n	8010538 <__udivmoddi4+0x2e8>
 80104ba:	1879      	adds	r1, r7, r1
 80104bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80104c0:	d201      	bcs.n	80104c6 <__udivmoddi4+0x276>
 80104c2:	4589      	cmp	r9, r1
 80104c4:	d81f      	bhi.n	8010506 <__udivmoddi4+0x2b6>
 80104c6:	eba1 0109 	sub.w	r1, r1, r9
 80104ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80104ce:	fb09 f804 	mul.w	r8, r9, r4
 80104d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80104d6:	b292      	uxth	r2, r2
 80104d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80104dc:	4542      	cmp	r2, r8
 80104de:	d229      	bcs.n	8010534 <__udivmoddi4+0x2e4>
 80104e0:	18ba      	adds	r2, r7, r2
 80104e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80104e6:	d2c4      	bcs.n	8010472 <__udivmoddi4+0x222>
 80104e8:	4542      	cmp	r2, r8
 80104ea:	d2c2      	bcs.n	8010472 <__udivmoddi4+0x222>
 80104ec:	f1a9 0102 	sub.w	r1, r9, #2
 80104f0:	443a      	add	r2, r7
 80104f2:	e7be      	b.n	8010472 <__udivmoddi4+0x222>
 80104f4:	45f0      	cmp	r8, lr
 80104f6:	d29d      	bcs.n	8010434 <__udivmoddi4+0x1e4>
 80104f8:	ebbe 0302 	subs.w	r3, lr, r2
 80104fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8010500:	3801      	subs	r0, #1
 8010502:	46e1      	mov	r9, ip
 8010504:	e796      	b.n	8010434 <__udivmoddi4+0x1e4>
 8010506:	eba7 0909 	sub.w	r9, r7, r9
 801050a:	4449      	add	r1, r9
 801050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8010510:	fbb1 f9fe 	udiv	r9, r1, lr
 8010514:	fb09 f804 	mul.w	r8, r9, r4
 8010518:	e7db      	b.n	80104d2 <__udivmoddi4+0x282>
 801051a:	4673      	mov	r3, lr
 801051c:	e77f      	b.n	801041e <__udivmoddi4+0x1ce>
 801051e:	4650      	mov	r0, sl
 8010520:	e766      	b.n	80103f0 <__udivmoddi4+0x1a0>
 8010522:	4608      	mov	r0, r1
 8010524:	e6fd      	b.n	8010322 <__udivmoddi4+0xd2>
 8010526:	443b      	add	r3, r7
 8010528:	3a02      	subs	r2, #2
 801052a:	e733      	b.n	8010394 <__udivmoddi4+0x144>
 801052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8010530:	443b      	add	r3, r7
 8010532:	e71c      	b.n	801036e <__udivmoddi4+0x11e>
 8010534:	4649      	mov	r1, r9
 8010536:	e79c      	b.n	8010472 <__udivmoddi4+0x222>
 8010538:	eba1 0109 	sub.w	r1, r1, r9
 801053c:	46c4      	mov	ip, r8
 801053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8010542:	fb09 f804 	mul.w	r8, r9, r4
 8010546:	e7c4      	b.n	80104d2 <__udivmoddi4+0x282>

08010548 <__aeabi_idiv0>:
 8010548:	4770      	bx	lr
 801054a:	bf00      	nop

0801054c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 801054c:	b480      	push	{r7}
 801054e:	b085      	sub	sp, #20
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8010554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010558:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801055a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	4313      	orrs	r3, r2
 8010562:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8010564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4013      	ands	r3, r2
 801056e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010570:	68fb      	ldr	r3, [r7, #12]
}
 8010572:	bf00      	nop
 8010574:	3714      	adds	r7, #20
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr
	...

08010580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010584:	f000 fc2a 	bl	8010ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010588:	f000 f84c 	bl	8010624 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 801058c:	f000 f8a2 	bl	80106d4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010590:	f000 f90a 	bl	80107a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8010594:	f000 f8bc 	bl	8010710 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8010598:	2000      	movs	r0, #0
 801059a:	f000 fb41 	bl	8010c20 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 801059e:	2001      	movs	r0, #1
 80105a0:	f000 fb3e 	bl	8010c20 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80105a4:	2002      	movs	r0, #2
 80105a6:	f000 fb3b 	bl	8010c20 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80105aa:	2101      	movs	r1, #1
 80105ac:	2000      	movs	r0, #0
 80105ae:	f000 fba5 	bl	8010cfc <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80105b2:	2101      	movs	r1, #1
 80105b4:	2001      	movs	r0, #1
 80105b6:	f000 fba1 	bl	8010cfc <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80105ba:	2101      	movs	r1, #1
 80105bc:	2002      	movs	r0, #2
 80105be:	f000 fb9d 	bl	8010cfc <BSP_PB_Init>

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_BLUE);
 80105c2:	2000      	movs	r0, #0
 80105c4:	f000 fb66 	bl	8010c94 <BSP_LED_On>
  BSP_LED_On(LED_GREEN);
 80105c8:	2001      	movs	r0, #1
 80105ca:	f000 fb63 	bl	8010c94 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 80105ce:	2002      	movs	r0, #2
 80105d0:	f000 fb60 	bl	8010c94 <BSP_LED_On>
  printf("Starting Application(%d.%d)\r\n", APP_Version[0], APP_Version[1] );
 80105d4:	2300      	movs	r3, #0
 80105d6:	2202      	movs	r2, #2
 80105d8:	4619      	mov	r1, r3
 80105da:	480f      	ldr	r0, [pc, #60]	@ (8010618 <main+0x98>)
 80105dc:	f003 fc16 	bl	8013e0c <iprintf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
	printf("Salaam from the App.\r\n");
 80105e0:	480e      	ldr	r0, [pc, #56]	@ (801061c <main+0x9c>)
 80105e2:	f003 fc7b 	bl	8013edc <puts>
    BSP_LED_On(LED_BLUE);
 80105e6:	2000      	movs	r0, #0
 80105e8:	f000 fb54 	bl	8010c94 <BSP_LED_On>
    BSP_LED_On(LED_GREEN);
 80105ec:	2001      	movs	r0, #1
 80105ee:	f000 fb51 	bl	8010c94 <BSP_LED_On>
    HAL_Delay(delay);
 80105f2:	4b0b      	ldr	r3, [pc, #44]	@ (8010620 <main+0xa0>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f000 fc76 	bl	8010ee8 <HAL_Delay>
    BSP_LED_Off(LED_BLUE);
 80105fc:	2000      	movs	r0, #0
 80105fe:	f000 fb63 	bl	8010cc8 <BSP_LED_Off>
    BSP_LED_Off(LED_GREEN);
 8010602:	2001      	movs	r0, #1
 8010604:	f000 fb60 	bl	8010cc8 <BSP_LED_Off>
    HAL_Delay(delay);
 8010608:	4b05      	ldr	r3, [pc, #20]	@ (8010620 <main+0xa0>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	4618      	mov	r0, r3
 801060e:	f000 fc6b 	bl	8010ee8 <HAL_Delay>
	printf("Salaam from the App.\r\n");
 8010612:	bf00      	nop
 8010614:	e7e4      	b.n	80105e0 <main+0x60>
 8010616:	bf00      	nop
 8010618:	08014bb8 	.word	0x08014bb8
 801061c:	08014bd8 	.word	0x08014bd8
 8010620:	20000008 	.word	0x20000008

08010624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b09a      	sub	sp, #104	@ 0x68
 8010628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801062a:	f107 0320 	add.w	r3, r7, #32
 801062e:	2248      	movs	r2, #72	@ 0x48
 8010630:	2100      	movs	r1, #0
 8010632:	4618      	mov	r0, r3
 8010634:	f003 fd32 	bl	801409c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010638:	1d3b      	adds	r3, r7, #4
 801063a:	2200      	movs	r2, #0
 801063c:	601a      	str	r2, [r3, #0]
 801063e:	605a      	str	r2, [r3, #4]
 8010640:	609a      	str	r2, [r3, #8]
 8010642:	60da      	str	r2, [r3, #12]
 8010644:	611a      	str	r2, [r3, #16]
 8010646:	615a      	str	r2, [r3, #20]
 8010648:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801064a:	4b21      	ldr	r3, [pc, #132]	@ (80106d0 <SystemClock_Config+0xac>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8010652:	4a1f      	ldr	r2, [pc, #124]	@ (80106d0 <SystemClock_Config+0xac>)
 8010654:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010658:	6013      	str	r3, [r2, #0]
 801065a:	4b1d      	ldr	r3, [pc, #116]	@ (80106d0 <SystemClock_Config+0xac>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010662:	603b      	str	r3, [r7, #0]
 8010664:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8010666:	2322      	movs	r3, #34	@ 0x22
 8010668:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801066a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8010670:	2301      	movs	r3, #1
 8010672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010674:	2340      	movs	r3, #64	@ 0x40
 8010676:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8010678:	2300      	movs	r3, #0
 801067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 801067c:	23a0      	movs	r3, #160	@ 0xa0
 801067e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8010680:	2300      	movs	r3, #0
 8010682:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010684:	f107 0320 	add.w	r3, r7, #32
 8010688:	4618      	mov	r0, r3
 801068a:	f001 fa7d 	bl	8011b88 <HAL_RCC_OscConfig>
 801068e:	4603      	mov	r3, r0
 8010690:	2b00      	cmp	r3, #0
 8010692:	d001      	beq.n	8010698 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8010694:	f000 f8c2 	bl	801081c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8010698:	236f      	movs	r3, #111	@ 0x6f
 801069a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 801069c:	2300      	movs	r3, #0
 801069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80106a0:	2300      	movs	r3, #0
 80106a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80106a4:	2300      	movs	r3, #0
 80106a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80106a8:	2300      	movs	r3, #0
 80106aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80106ac:	2300      	movs	r3, #0
 80106ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80106b0:	2300      	movs	r3, #0
 80106b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80106b4:	1d3b      	adds	r3, r7, #4
 80106b6:	2101      	movs	r1, #1
 80106b8:	4618      	mov	r0, r3
 80106ba:	f001 fdd9 	bl	8012270 <HAL_RCC_ClockConfig>
 80106be:	4603      	mov	r3, r0
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d001      	beq.n	80106c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80106c4:	f000 f8aa 	bl	801081c <Error_Handler>
  }
}
 80106c8:	bf00      	nop
 80106ca:	3768      	adds	r7, #104	@ 0x68
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}
 80106d0:	58000400 	.word	0x58000400

080106d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b094      	sub	sp, #80	@ 0x50
 80106d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80106da:	463b      	mov	r3, r7
 80106dc:	2250      	movs	r2, #80	@ 0x50
 80106de:	2100      	movs	r1, #0
 80106e0:	4618      	mov	r0, r3
 80106e2:	f003 fcdb 	bl	801409c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80106e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80106ea:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80106ec:	2300      	movs	r3, #0
 80106ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80106f0:	2300      	movs	r3, #0
 80106f2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80106f4:	463b      	mov	r3, r7
 80106f6:	4618      	mov	r0, r3
 80106f8:	f002 f9f7 	bl	8012aea <HAL_RCCEx_PeriphCLKConfig>
 80106fc:	4603      	mov	r3, r0
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d001      	beq.n	8010706 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8010702:	f000 f88b 	bl	801081c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8010706:	bf00      	nop
 8010708:	3750      	adds	r7, #80	@ 0x50
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
	...

08010710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8010714:	4b22      	ldr	r3, [pc, #136]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 8010716:	4a23      	ldr	r2, [pc, #140]	@ (80107a4 <MX_USART1_UART_Init+0x94>)
 8010718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801071a:	4b21      	ldr	r3, [pc, #132]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 801071c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8010720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010722:	4b1f      	ldr	r3, [pc, #124]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 8010724:	2200      	movs	r2, #0
 8010726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8010728:	4b1d      	ldr	r3, [pc, #116]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 801072a:	2200      	movs	r2, #0
 801072c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801072e:	4b1c      	ldr	r3, [pc, #112]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 8010730:	2200      	movs	r2, #0
 8010732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8010734:	4b1a      	ldr	r3, [pc, #104]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 8010736:	220c      	movs	r2, #12
 8010738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801073a:	4b19      	ldr	r3, [pc, #100]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 801073c:	2200      	movs	r2, #0
 801073e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010740:	4b17      	ldr	r3, [pc, #92]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 8010742:	2200      	movs	r2, #0
 8010744:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010746:	4b16      	ldr	r3, [pc, #88]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 8010748:	2200      	movs	r2, #0
 801074a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801074c:	4b14      	ldr	r3, [pc, #80]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 801074e:	2200      	movs	r2, #0
 8010750:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8010752:	4b13      	ldr	r3, [pc, #76]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 8010754:	2200      	movs	r2, #0
 8010756:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8010758:	4811      	ldr	r0, [pc, #68]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 801075a:	f002 fc6d 	bl	8013038 <HAL_UART_Init>
 801075e:	4603      	mov	r3, r0
 8010760:	2b00      	cmp	r3, #0
 8010762:	d001      	beq.n	8010768 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8010764:	f000 f85a 	bl	801081c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8010768:	2100      	movs	r1, #0
 801076a:	480d      	ldr	r0, [pc, #52]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 801076c:	f003 f9c2 	bl	8013af4 <HAL_UARTEx_SetTxFifoThreshold>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	d001      	beq.n	801077a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8010776:	f000 f851 	bl	801081c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801077a:	2100      	movs	r1, #0
 801077c:	4808      	ldr	r0, [pc, #32]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 801077e:	f003 f9f7 	bl	8013b70 <HAL_UARTEx_SetRxFifoThreshold>
 8010782:	4603      	mov	r3, r0
 8010784:	2b00      	cmp	r3, #0
 8010786:	d001      	beq.n	801078c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8010788:	f000 f848 	bl	801081c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 801078c:	4804      	ldr	r0, [pc, #16]	@ (80107a0 <MX_USART1_UART_Init+0x90>)
 801078e:	f003 f978 	bl	8013a82 <HAL_UARTEx_DisableFifoMode>
 8010792:	4603      	mov	r3, r0
 8010794:	2b00      	cmp	r3, #0
 8010796:	d001      	beq.n	801079c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8010798:	f000 f840 	bl	801081c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801079c:	bf00      	nop
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	200000a8 	.word	0x200000a8
 80107a4:	40013800 	.word	0x40013800

080107a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b086      	sub	sp, #24
 80107ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80107ae:	1d3b      	adds	r3, r7, #4
 80107b0:	2200      	movs	r2, #0
 80107b2:	601a      	str	r2, [r3, #0]
 80107b4:	605a      	str	r2, [r3, #4]
 80107b6:	609a      	str	r2, [r3, #8]
 80107b8:	60da      	str	r2, [r3, #12]
 80107ba:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80107bc:	2004      	movs	r0, #4
 80107be:	f7ff fec5 	bl	801054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80107c2:	2001      	movs	r0, #1
 80107c4:	f7ff fec2 	bl	801054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80107c8:	2002      	movs	r0, #2
 80107ca:	f7ff febf 	bl	801054c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80107ce:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80107d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107d4:	2302      	movs	r3, #2
 80107d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107d8:	2300      	movs	r3, #0
 80107da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107dc:	2300      	movs	r3, #0
 80107de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80107e0:	230a      	movs	r3, #10
 80107e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80107e4:	1d3b      	adds	r3, r7, #4
 80107e6:	4619      	mov	r1, r3
 80107e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80107ec:	f000 fcb0 	bl	8011150 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80107f0:	bf00      	nop
 80107f2:	3718      	adds	r7, #24
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8010800:	1d39      	adds	r1, r7, #4
 8010802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010806:	2201      	movs	r2, #1
 8010808:	4803      	ldr	r0, [pc, #12]	@ (8010818 <__io_putchar+0x20>)
 801080a:	f002 fc65 	bl	80130d8 <HAL_UART_Transmit>
  return ch;
 801080e:	687b      	ldr	r3, [r7, #4]
}
 8010810:	4618      	mov	r0, r3
 8010812:	3708      	adds	r7, #8
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	200000a8 	.word	0x200000a8

0801081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801081c:	b480      	push	{r7}
 801081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010820:	b672      	cpsid	i
}
 8010822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010824:	bf00      	nop
 8010826:	e7fd      	b.n	8010824 <Error_Handler+0x8>

08010828 <LL_AHB2_GRP1_EnableClock>:
{
 8010828:	b480      	push	{r7}
 801082a:	b085      	sub	sp, #20
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8010830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010834:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010836:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	4313      	orrs	r3, r2
 801083e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8010840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010844:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	4013      	ands	r3, r2
 801084a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801084c:	68fb      	ldr	r3, [r7, #12]
}
 801084e:	bf00      	nop
 8010850:	3714      	adds	r7, #20
 8010852:	46bd      	mov	sp, r7
 8010854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010858:	4770      	bx	lr

0801085a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 801085a:	b480      	push	{r7}
 801085c:	b085      	sub	sp, #20
 801085e:	af00      	add	r7, sp, #0
 8010860:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8010862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010866:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010868:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	4313      	orrs	r3, r2
 8010870:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8010872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010876:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	4013      	ands	r3, r2
 801087c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801087e:	68fb      	ldr	r3, [r7, #12]
}
 8010880:	bf00      	nop
 8010882:	3714      	adds	r7, #20
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr

0801088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801088c:	b480      	push	{r7}
 801088e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010890:	bf00      	nop
 8010892:	46bd      	mov	sp, r7
 8010894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010898:	4770      	bx	lr
	...

0801089c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b09c      	sub	sp, #112	@ 0x70
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80108a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80108a8:	2200      	movs	r2, #0
 80108aa:	601a      	str	r2, [r3, #0]
 80108ac:	605a      	str	r2, [r3, #4]
 80108ae:	609a      	str	r2, [r3, #8]
 80108b0:	60da      	str	r2, [r3, #12]
 80108b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80108b4:	f107 030c 	add.w	r3, r7, #12
 80108b8:	2250      	movs	r2, #80	@ 0x50
 80108ba:	2100      	movs	r1, #0
 80108bc:	4618      	mov	r0, r3
 80108be:	f003 fbed 	bl	801409c <memset>
  if(huart->Instance==USART1)
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4a16      	ldr	r2, [pc, #88]	@ (8010920 <HAL_UART_MspInit+0x84>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d124      	bne.n	8010916 <HAL_UART_MspInit+0x7a>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80108cc:	2301      	movs	r3, #1
 80108ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80108d0:	2300      	movs	r3, #0
 80108d2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80108d4:	f107 030c 	add.w	r3, r7, #12
 80108d8:	4618      	mov	r0, r3
 80108da:	f002 f906 	bl	8012aea <HAL_RCCEx_PeriphCLKConfig>
 80108de:	4603      	mov	r3, r0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d001      	beq.n	80108e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80108e4:	f7ff ff9a 	bl	801081c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80108e8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80108ec:	f7ff ffb5 	bl	801085a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80108f0:	2002      	movs	r0, #2
 80108f2:	f7ff ff99 	bl	8010828 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80108f6:	23c0      	movs	r3, #192	@ 0xc0
 80108f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108fa:	2302      	movs	r3, #2
 80108fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108fe:	2300      	movs	r3, #0
 8010900:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010902:	2300      	movs	r3, #0
 8010904:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010906:	2307      	movs	r3, #7
 8010908:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801090a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801090e:	4619      	mov	r1, r3
 8010910:	4804      	ldr	r0, [pc, #16]	@ (8010924 <HAL_UART_MspInit+0x88>)
 8010912:	f000 fc1d 	bl	8011150 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8010916:	bf00      	nop
 8010918:	3770      	adds	r7, #112	@ 0x70
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
 801091e:	bf00      	nop
 8010920:	40013800 	.word	0x40013800
 8010924:	48000400 	.word	0x48000400

08010928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010928:	b480      	push	{r7}
 801092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 801092c:	bf00      	nop
 801092e:	e7fd      	b.n	801092c <NMI_Handler+0x4>

08010930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010930:	b480      	push	{r7}
 8010932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010934:	bf00      	nop
 8010936:	e7fd      	b.n	8010934 <HardFault_Handler+0x4>

08010938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010938:	b480      	push	{r7}
 801093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801093c:	bf00      	nop
 801093e:	e7fd      	b.n	801093c <MemManage_Handler+0x4>

08010940 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010940:	b480      	push	{r7}
 8010942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010944:	bf00      	nop
 8010946:	e7fd      	b.n	8010944 <BusFault_Handler+0x4>

08010948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010948:	b480      	push	{r7}
 801094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801094c:	bf00      	nop
 801094e:	e7fd      	b.n	801094c <UsageFault_Handler+0x4>

08010950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010950:	b480      	push	{r7}
 8010952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010954:	bf00      	nop
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr

0801095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801095e:	b480      	push	{r7}
 8010960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010962:	bf00      	nop
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801096c:	b480      	push	{r7}
 801096e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010970:	bf00      	nop
 8010972:	46bd      	mov	sp, r7
 8010974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010978:	4770      	bx	lr

0801097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801097a:	b580      	push	{r7, lr}
 801097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801097e:	f000 fa87 	bl	8010e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010982:	bf00      	nop
 8010984:	bd80      	pop	{r7, pc}

08010986 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010986:	b580      	push	{r7, lr}
 8010988:	b086      	sub	sp, #24
 801098a:	af00      	add	r7, sp, #0
 801098c:	60f8      	str	r0, [r7, #12]
 801098e:	60b9      	str	r1, [r7, #8]
 8010990:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010992:	2300      	movs	r3, #0
 8010994:	617b      	str	r3, [r7, #20]
 8010996:	e00a      	b.n	80109ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8010998:	f3af 8000 	nop.w
 801099c:	4601      	mov	r1, r0
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	1c5a      	adds	r2, r3, #1
 80109a2:	60ba      	str	r2, [r7, #8]
 80109a4:	b2ca      	uxtb	r2, r1
 80109a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	3301      	adds	r3, #1
 80109ac:	617b      	str	r3, [r7, #20]
 80109ae:	697a      	ldr	r2, [r7, #20]
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	429a      	cmp	r2, r3
 80109b4:	dbf0      	blt.n	8010998 <_read+0x12>
  }

  return len;
 80109b6:	687b      	ldr	r3, [r7, #4]
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3718      	adds	r7, #24
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b086      	sub	sp, #24
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	60f8      	str	r0, [r7, #12]
 80109c8:	60b9      	str	r1, [r7, #8]
 80109ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80109cc:	2300      	movs	r3, #0
 80109ce:	617b      	str	r3, [r7, #20]
 80109d0:	e009      	b.n	80109e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	1c5a      	adds	r2, r3, #1
 80109d6:	60ba      	str	r2, [r7, #8]
 80109d8:	781b      	ldrb	r3, [r3, #0]
 80109da:	4618      	mov	r0, r3
 80109dc:	f7ff ff0c 	bl	80107f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	3301      	adds	r3, #1
 80109e4:	617b      	str	r3, [r7, #20]
 80109e6:	697a      	ldr	r2, [r7, #20]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	dbf1      	blt.n	80109d2 <_write+0x12>
  }
  return len;
 80109ee:	687b      	ldr	r3, [r7, #4]
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3718      	adds	r7, #24
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <_close>:

int _close(int file)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b083      	sub	sp, #12
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8010a00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	370c      	adds	r7, #12
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr

08010a10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010a10:	b480      	push	{r7}
 8010a12:	b083      	sub	sp, #12
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8010a20:	605a      	str	r2, [r3, #4]
  return 0;
 8010a22:	2300      	movs	r3, #0
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	370c      	adds	r7, #12
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr

08010a30 <_isatty>:

int _isatty(int file)
{
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8010a38:	2301      	movs	r3, #1
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	370c      	adds	r7, #12
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a44:	4770      	bx	lr

08010a46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010a46:	b480      	push	{r7}
 8010a48:	b085      	sub	sp, #20
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	60f8      	str	r0, [r7, #12]
 8010a4e:	60b9      	str	r1, [r7, #8]
 8010a50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8010a52:	2300      	movs	r3, #0
}
 8010a54:	4618      	mov	r0, r3
 8010a56:	3714      	adds	r7, #20
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5e:	4770      	bx	lr

08010a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b086      	sub	sp, #24
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010a68:	4a14      	ldr	r2, [pc, #80]	@ (8010abc <_sbrk+0x5c>)
 8010a6a:	4b15      	ldr	r3, [pc, #84]	@ (8010ac0 <_sbrk+0x60>)
 8010a6c:	1ad3      	subs	r3, r2, r3
 8010a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010a74:	4b13      	ldr	r3, [pc, #76]	@ (8010ac4 <_sbrk+0x64>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d102      	bne.n	8010a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010a7c:	4b11      	ldr	r3, [pc, #68]	@ (8010ac4 <_sbrk+0x64>)
 8010a7e:	4a12      	ldr	r2, [pc, #72]	@ (8010ac8 <_sbrk+0x68>)
 8010a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010a82:	4b10      	ldr	r3, [pc, #64]	@ (8010ac4 <_sbrk+0x64>)
 8010a84:	681a      	ldr	r2, [r3, #0]
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	4413      	add	r3, r2
 8010a8a:	693a      	ldr	r2, [r7, #16]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d207      	bcs.n	8010aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010a90:	f003 fb52 	bl	8014138 <__errno>
 8010a94:	4603      	mov	r3, r0
 8010a96:	220c      	movs	r2, #12
 8010a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8010a9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010a9e:	e009      	b.n	8010ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010aa0:	4b08      	ldr	r3, [pc, #32]	@ (8010ac4 <_sbrk+0x64>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010aa6:	4b07      	ldr	r3, [pc, #28]	@ (8010ac4 <_sbrk+0x64>)
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	4413      	add	r3, r2
 8010aae:	4a05      	ldr	r2, [pc, #20]	@ (8010ac4 <_sbrk+0x64>)
 8010ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3718      	adds	r7, #24
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}
 8010abc:	20030000 	.word	0x20030000
 8010ac0:	00000400 	.word	0x00000400
 8010ac4:	2000013c 	.word	0x2000013c
 8010ac8:	20000290 	.word	0x20000290

08010acc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010acc:	b480      	push	{r7}
 8010ace:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8010ad0:	4b26      	ldr	r3, [pc, #152]	@ (8010b6c <SystemInit+0xa0>)
 8010ad2:	4a27      	ldr	r2, [pc, #156]	@ (8010b70 <SystemInit+0xa4>)
 8010ad4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8010ad6:	4b25      	ldr	r3, [pc, #148]	@ (8010b6c <SystemInit+0xa0>)
 8010ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010adc:	4a23      	ldr	r2, [pc, #140]	@ (8010b6c <SystemInit+0xa0>)
 8010ade:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010ae2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8010ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010af0:	f043 0301 	orr.w	r3, r3, #1
 8010af4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8010af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010afa:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8010afe:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8010b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8010b74 <SystemInit+0xa8>)
 8010b0c:	4013      	ands	r3, r2
 8010b0e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8010b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010b18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010b1c:	f023 0305 	bic.w	r3, r3, #5
 8010b20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8010b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010b2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010b30:	f023 0301 	bic.w	r3, r3, #1
 8010b34:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8010b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8010b78 <SystemInit+0xac>)
 8010b3e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8010b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b44:	4a0c      	ldr	r2, [pc, #48]	@ (8010b78 <SystemInit+0xac>)
 8010b46:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8010b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010b52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010b56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8010b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	619a      	str	r2, [r3, #24]
}
 8010b60:	bf00      	nop
 8010b62:	46bd      	mov	sp, r7
 8010b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b68:	4770      	bx	lr
 8010b6a:	bf00      	nop
 8010b6c:	e000ed00 	.word	0xe000ed00
 8010b70:	08010000 	.word	0x08010000
 8010b74:	faf6fefb 	.word	0xfaf6fefb
 8010b78:	22041000 	.word	0x22041000

08010b7c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8010b7c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010b7e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010b80:	3304      	adds	r3, #4

08010b82 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010b82:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010b84:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8010b86:	d3f9      	bcc.n	8010b7c <CopyDataInit>
  bx lr
 8010b88:	4770      	bx	lr

08010b8a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8010b8a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8010b8c:	3004      	adds	r0, #4

08010b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8010b8e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8010b90:	d3fb      	bcc.n	8010b8a <FillZerobss>
  bx lr
 8010b92:	4770      	bx	lr

08010b94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8010b94:	480c      	ldr	r0, [pc, #48]	@ (8010bc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8010b96:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8010b98:	f7ff ff98 	bl	8010acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8010b9c:	480b      	ldr	r0, [pc, #44]	@ (8010bcc <LoopForever+0x6>)
 8010b9e:	490c      	ldr	r1, [pc, #48]	@ (8010bd0 <LoopForever+0xa>)
 8010ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8010bd4 <LoopForever+0xe>)
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	f7ff ffed 	bl	8010b82 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8010ba8:	480b      	ldr	r0, [pc, #44]	@ (8010bd8 <LoopForever+0x12>)
 8010baa:	490c      	ldr	r1, [pc, #48]	@ (8010bdc <LoopForever+0x16>)
 8010bac:	4a0c      	ldr	r2, [pc, #48]	@ (8010be0 <LoopForever+0x1a>)
 8010bae:	2300      	movs	r3, #0
 8010bb0:	f7ff ffe7 	bl	8010b82 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8010bb4:	480b      	ldr	r0, [pc, #44]	@ (8010be4 <LoopForever+0x1e>)
 8010bb6:	490c      	ldr	r1, [pc, #48]	@ (8010be8 <LoopForever+0x22>)
 8010bb8:	2300      	movs	r3, #0
 8010bba:	f7ff ffe8 	bl	8010b8e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8010bbe:	f003 fac1 	bl	8014144 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8010bc2:	f7ff fcdd 	bl	8010580 <main>

08010bc6 <LoopForever>:

LoopForever:
  b LoopForever
 8010bc6:	e7fe      	b.n	8010bc6 <LoopForever>
  ldr   r0, =_estack
 8010bc8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8010bcc:	20000008 	.word	0x20000008
 8010bd0:	2000008c 	.word	0x2000008c
 8010bd4:	08014d3c 	.word	0x08014d3c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8010bd8:	20030000 	.word	0x20030000
 8010bdc:	20030000 	.word	0x20030000
 8010be0:	08014dc0 	.word	0x08014dc0
  INIT_BSS _sbss, _ebss
 8010be4:	2000008c 	.word	0x2000008c
 8010be8:	20000290 	.word	0x20000290

08010bec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8010bec:	e7fe      	b.n	8010bec <ADC1_IRQHandler>

08010bee <LL_AHB2_GRP1_EnableClock>:
{
 8010bee:	b480      	push	{r7}
 8010bf0:	b085      	sub	sp, #20
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8010bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010bfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010bfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	4313      	orrs	r3, r2
 8010c04:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8010c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010c0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	4013      	ands	r3, r2
 8010c10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010c12:	68fb      	ldr	r3, [r7, #12]
}
 8010c14:	bf00      	nop
 8010c16:	3714      	adds	r7, #20
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	4770      	bx	lr

08010c20 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b088      	sub	sp, #32
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	4603      	mov	r3, r0
 8010c28:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8010c2a:	f107 030c 	add.w	r3, r7, #12
 8010c2e:	2200      	movs	r2, #0
 8010c30:	601a      	str	r2, [r3, #0]
 8010c32:	605a      	str	r2, [r3, #4]
 8010c34:	609a      	str	r2, [r3, #8]
 8010c36:	60da      	str	r2, [r3, #12]
 8010c38:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8010c3a:	2002      	movs	r0, #2
 8010c3c:	f7ff ffd7 	bl	8010bee <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8010c40:	79fb      	ldrb	r3, [r7, #7]
 8010c42:	4a12      	ldr	r2, [pc, #72]	@ (8010c8c <BSP_LED_Init+0x6c>)
 8010c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c48:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010c52:	2302      	movs	r3, #2
 8010c54:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8010c56:	79fb      	ldrb	r3, [r7, #7]
 8010c58:	4a0d      	ldr	r2, [pc, #52]	@ (8010c90 <BSP_LED_Init+0x70>)
 8010c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c5e:	f107 020c 	add.w	r2, r7, #12
 8010c62:	4611      	mov	r1, r2
 8010c64:	4618      	mov	r0, r3
 8010c66:	f000 fa73 	bl	8011150 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8010c6a:	79fb      	ldrb	r3, [r7, #7]
 8010c6c:	4a08      	ldr	r2, [pc, #32]	@ (8010c90 <BSP_LED_Init+0x70>)
 8010c6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010c72:	79fb      	ldrb	r3, [r7, #7]
 8010c74:	4a05      	ldr	r2, [pc, #20]	@ (8010c8c <BSP_LED_Init+0x6c>)
 8010c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	4619      	mov	r1, r3
 8010c7e:	f000 fbd7 	bl	8011430 <HAL_GPIO_WritePin>
}
 8010c82:	bf00      	nop
 8010c84:	3720      	adds	r7, #32
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	08014cbc 	.word	0x08014cbc
 8010c90:	20000010 	.word	0x20000010

08010c94 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8010c9e:	79fb      	ldrb	r3, [r7, #7]
 8010ca0:	4a07      	ldr	r2, [pc, #28]	@ (8010cc0 <BSP_LED_On+0x2c>)
 8010ca2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010ca6:	79fb      	ldrb	r3, [r7, #7]
 8010ca8:	4a06      	ldr	r2, [pc, #24]	@ (8010cc4 <BSP_LED_On+0x30>)
 8010caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cae:	2201      	movs	r2, #1
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	f000 fbbd 	bl	8011430 <HAL_GPIO_WritePin>
}
 8010cb6:	bf00      	nop
 8010cb8:	3708      	adds	r7, #8
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}
 8010cbe:	bf00      	nop
 8010cc0:	20000010 	.word	0x20000010
 8010cc4:	08014cbc 	.word	0x08014cbc

08010cc8 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	4603      	mov	r3, r0
 8010cd0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8010cd2:	79fb      	ldrb	r3, [r7, #7]
 8010cd4:	4a07      	ldr	r2, [pc, #28]	@ (8010cf4 <BSP_LED_Off+0x2c>)
 8010cd6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010cda:	79fb      	ldrb	r3, [r7, #7]
 8010cdc:	4a06      	ldr	r2, [pc, #24]	@ (8010cf8 <BSP_LED_Off+0x30>)
 8010cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	f000 fba3 	bl	8011430 <HAL_GPIO_WritePin>
}
 8010cea:	bf00      	nop
 8010cec:	3708      	adds	r7, #8
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	20000010 	.word	0x20000010
 8010cf8:	08014cbc 	.word	0x08014cbc

08010cfc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b088      	sub	sp, #32
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	4603      	mov	r3, r0
 8010d04:	460a      	mov	r2, r1
 8010d06:	71fb      	strb	r3, [r7, #7]
 8010d08:	4613      	mov	r3, r2
 8010d0a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8010d0c:	f107 030c 	add.w	r3, r7, #12
 8010d10:	2200      	movs	r2, #0
 8010d12:	601a      	str	r2, [r3, #0]
 8010d14:	605a      	str	r2, [r3, #4]
 8010d16:	609a      	str	r2, [r3, #8]
 8010d18:	60da      	str	r2, [r3, #12]
 8010d1a:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8010d1c:	79fb      	ldrb	r3, [r7, #7]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d103      	bne.n	8010d2a <BSP_PB_Init+0x2e>
 8010d22:	2004      	movs	r0, #4
 8010d24:	f7ff ff63 	bl	8010bee <LL_AHB2_GRP1_EnableClock>
 8010d28:	e00c      	b.n	8010d44 <BSP_PB_Init+0x48>
 8010d2a:	79fb      	ldrb	r3, [r7, #7]
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d103      	bne.n	8010d38 <BSP_PB_Init+0x3c>
 8010d30:	2008      	movs	r0, #8
 8010d32:	f7ff ff5c 	bl	8010bee <LL_AHB2_GRP1_EnableClock>
 8010d36:	e005      	b.n	8010d44 <BSP_PB_Init+0x48>
 8010d38:	79fb      	ldrb	r3, [r7, #7]
 8010d3a:	2b02      	cmp	r3, #2
 8010d3c:	d102      	bne.n	8010d44 <BSP_PB_Init+0x48>
 8010d3e:	2008      	movs	r0, #8
 8010d40:	f7ff ff55 	bl	8010bee <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8010d44:	79bb      	ldrb	r3, [r7, #6]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d117      	bne.n	8010d7a <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8010d4a:	79fb      	ldrb	r3, [r7, #7]
 8010d4c:	4a20      	ldr	r2, [pc, #128]	@ (8010dd0 <BSP_PB_Init+0xd4>)
 8010d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d52:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8010d54:	2300      	movs	r3, #0
 8010d56:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8010d58:	2301      	movs	r3, #1
 8010d5a:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010d5c:	2302      	movs	r3, #2
 8010d5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8010d60:	79fb      	ldrb	r3, [r7, #7]
 8010d62:	4a1c      	ldr	r2, [pc, #112]	@ (8010dd4 <BSP_PB_Init+0xd8>)
 8010d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d68:	f107 020c 	add.w	r2, r7, #12
 8010d6c:	4611      	mov	r1, r2
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f000 f9ee 	bl	8011150 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8010d74:	2001      	movs	r0, #1
 8010d76:	f000 f8b7 	bl	8010ee8 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8010d7a:	79bb      	ldrb	r3, [r7, #6]
 8010d7c:	2b01      	cmp	r3, #1
 8010d7e:	d123      	bne.n	8010dc8 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8010d80:	79fb      	ldrb	r3, [r7, #7]
 8010d82:	4a13      	ldr	r2, [pc, #76]	@ (8010dd0 <BSP_PB_Init+0xd4>)
 8010d84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d88:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8010d8e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8010d92:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8010d94:	79fb      	ldrb	r3, [r7, #7]
 8010d96:	4a0f      	ldr	r2, [pc, #60]	@ (8010dd4 <BSP_PB_Init+0xd8>)
 8010d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d9c:	f107 020c 	add.w	r2, r7, #12
 8010da0:	4611      	mov	r1, r2
 8010da2:	4618      	mov	r0, r3
 8010da4:	f000 f9d4 	bl	8011150 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8010da8:	79fb      	ldrb	r3, [r7, #7]
 8010daa:	4a0b      	ldr	r2, [pc, #44]	@ (8010dd8 <BSP_PB_Init+0xdc>)
 8010dac:	5cd3      	ldrb	r3, [r2, r3]
 8010dae:	b25b      	sxtb	r3, r3
 8010db0:	2200      	movs	r2, #0
 8010db2:	210f      	movs	r1, #15
 8010db4:	4618      	mov	r0, r3
 8010db6:	f000 f996 	bl	80110e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8010dba:	79fb      	ldrb	r3, [r7, #7]
 8010dbc:	4a06      	ldr	r2, [pc, #24]	@ (8010dd8 <BSP_PB_Init+0xdc>)
 8010dbe:	5cd3      	ldrb	r3, [r2, r3]
 8010dc0:	b25b      	sxtb	r3, r3
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f000 f9a9 	bl	801111a <HAL_NVIC_EnableIRQ>
  }
}
 8010dc8:	bf00      	nop
 8010dca:	3720      	adds	r7, #32
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	08014cc4 	.word	0x08014cc4
 8010dd4:	2000001c 	.word	0x2000001c
 8010dd8:	08014ccc 	.word	0x08014ccc

08010ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8010de2:	2300      	movs	r3, #0
 8010de4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010de6:	4b0c      	ldr	r3, [pc, #48]	@ (8010e18 <HAL_Init+0x3c>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	4a0b      	ldr	r2, [pc, #44]	@ (8010e18 <HAL_Init+0x3c>)
 8010dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010df0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010df2:	2003      	movs	r0, #3
 8010df4:	f000 f96c 	bl	80110d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010df8:	2000      	movs	r0, #0
 8010dfa:	f000 f80f 	bl	8010e1c <HAL_InitTick>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d002      	beq.n	8010e0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8010e04:	2301      	movs	r3, #1
 8010e06:	71fb      	strb	r3, [r7, #7]
 8010e08:	e001      	b.n	8010e0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8010e0a:	f7ff fd3f 	bl	801088c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8010e0e:	79fb      	ldrb	r3, [r7, #7]
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3708      	adds	r7, #8
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	58004000 	.word	0x58004000

08010e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b084      	sub	sp, #16
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8010e24:	2300      	movs	r3, #0
 8010e26:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8010e28:	4b17      	ldr	r3, [pc, #92]	@ (8010e88 <HAL_InitTick+0x6c>)
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d024      	beq.n	8010e7a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8010e30:	f001 fbca 	bl	80125c8 <HAL_RCC_GetHCLKFreq>
 8010e34:	4602      	mov	r2, r0
 8010e36:	4b14      	ldr	r3, [pc, #80]	@ (8010e88 <HAL_InitTick+0x6c>)
 8010e38:	781b      	ldrb	r3, [r3, #0]
 8010e3a:	4619      	mov	r1, r3
 8010e3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f000 f974 	bl	8011136 <HAL_SYSTICK_Config>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d10f      	bne.n	8010e74 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2b0f      	cmp	r3, #15
 8010e58:	d809      	bhi.n	8010e6e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	6879      	ldr	r1, [r7, #4]
 8010e5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e62:	f000 f940 	bl	80110e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8010e66:	4a09      	ldr	r2, [pc, #36]	@ (8010e8c <HAL_InitTick+0x70>)
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6013      	str	r3, [r2, #0]
 8010e6c:	e007      	b.n	8010e7e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8010e6e:	2301      	movs	r3, #1
 8010e70:	73fb      	strb	r3, [r7, #15]
 8010e72:	e004      	b.n	8010e7e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8010e74:	2301      	movs	r3, #1
 8010e76:	73fb      	strb	r3, [r7, #15]
 8010e78:	e001      	b.n	8010e7e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8010e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3710      	adds	r7, #16
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	2000002c 	.word	0x2000002c
 8010e8c:	20000028 	.word	0x20000028

08010e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010e90:	b480      	push	{r7}
 8010e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8010e94:	4b06      	ldr	r3, [pc, #24]	@ (8010eb0 <HAL_IncTick+0x20>)
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	461a      	mov	r2, r3
 8010e9a:	4b06      	ldr	r3, [pc, #24]	@ (8010eb4 <HAL_IncTick+0x24>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	4413      	add	r3, r2
 8010ea0:	4a04      	ldr	r2, [pc, #16]	@ (8010eb4 <HAL_IncTick+0x24>)
 8010ea2:	6013      	str	r3, [r2, #0]
}
 8010ea4:	bf00      	nop
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eac:	4770      	bx	lr
 8010eae:	bf00      	nop
 8010eb0:	2000002c 	.word	0x2000002c
 8010eb4:	20000140 	.word	0x20000140

08010eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	af00      	add	r7, sp, #0
  return uwTick;
 8010ebc:	4b03      	ldr	r3, [pc, #12]	@ (8010ecc <HAL_GetTick+0x14>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec8:	4770      	bx	lr
 8010eca:	bf00      	nop
 8010ecc:	20000140 	.word	0x20000140

08010ed0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8010ed4:	4b03      	ldr	r3, [pc, #12]	@ (8010ee4 <HAL_GetTickPrio+0x14>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	46bd      	mov	sp, r7
 8010edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee0:	4770      	bx	lr
 8010ee2:	bf00      	nop
 8010ee4:	20000028 	.word	0x20000028

08010ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b084      	sub	sp, #16
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010ef0:	f7ff ffe2 	bl	8010eb8 <HAL_GetTick>
 8010ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010f00:	d005      	beq.n	8010f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010f02:	4b0a      	ldr	r3, [pc, #40]	@ (8010f2c <HAL_Delay+0x44>)
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	461a      	mov	r2, r3
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	4413      	add	r3, r2
 8010f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8010f0e:	bf00      	nop
 8010f10:	f7ff ffd2 	bl	8010eb8 <HAL_GetTick>
 8010f14:	4602      	mov	r2, r0
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	1ad3      	subs	r3, r2, r3
 8010f1a:	68fa      	ldr	r2, [r7, #12]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d8f7      	bhi.n	8010f10 <HAL_Delay+0x28>
  {
  }
}
 8010f20:	bf00      	nop
 8010f22:	bf00      	nop
 8010f24:	3710      	adds	r7, #16
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	2000002c 	.word	0x2000002c

08010f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010f30:	b480      	push	{r7}
 8010f32:	b085      	sub	sp, #20
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f003 0307 	and.w	r3, r3, #7
 8010f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010f40:	4b0c      	ldr	r3, [pc, #48]	@ (8010f74 <__NVIC_SetPriorityGrouping+0x44>)
 8010f42:	68db      	ldr	r3, [r3, #12]
 8010f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010f46:	68ba      	ldr	r2, [r7, #8]
 8010f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010f4c:	4013      	ands	r3, r2
 8010f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8010f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010f62:	4a04      	ldr	r2, [pc, #16]	@ (8010f74 <__NVIC_SetPriorityGrouping+0x44>)
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	60d3      	str	r3, [r2, #12]
}
 8010f68:	bf00      	nop
 8010f6a:	3714      	adds	r7, #20
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr
 8010f74:	e000ed00 	.word	0xe000ed00

08010f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010f7c:	4b04      	ldr	r3, [pc, #16]	@ (8010f90 <__NVIC_GetPriorityGrouping+0x18>)
 8010f7e:	68db      	ldr	r3, [r3, #12]
 8010f80:	0a1b      	lsrs	r3, r3, #8
 8010f82:	f003 0307 	and.w	r3, r3, #7
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8e:	4770      	bx	lr
 8010f90:	e000ed00 	.word	0xe000ed00

08010f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010f94:	b480      	push	{r7}
 8010f96:	b083      	sub	sp, #12
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	db0b      	blt.n	8010fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010fa6:	79fb      	ldrb	r3, [r7, #7]
 8010fa8:	f003 021f 	and.w	r2, r3, #31
 8010fac:	4907      	ldr	r1, [pc, #28]	@ (8010fcc <__NVIC_EnableIRQ+0x38>)
 8010fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fb2:	095b      	lsrs	r3, r3, #5
 8010fb4:	2001      	movs	r0, #1
 8010fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8010fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8010fbe:	bf00      	nop
 8010fc0:	370c      	adds	r7, #12
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc8:	4770      	bx	lr
 8010fca:	bf00      	nop
 8010fcc:	e000e100 	.word	0xe000e100

08010fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b083      	sub	sp, #12
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	6039      	str	r1, [r7, #0]
 8010fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	db0a      	blt.n	8010ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	b2da      	uxtb	r2, r3
 8010fe8:	490c      	ldr	r1, [pc, #48]	@ (801101c <__NVIC_SetPriority+0x4c>)
 8010fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fee:	0112      	lsls	r2, r2, #4
 8010ff0:	b2d2      	uxtb	r2, r2
 8010ff2:	440b      	add	r3, r1
 8010ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010ff8:	e00a      	b.n	8011010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	b2da      	uxtb	r2, r3
 8010ffe:	4908      	ldr	r1, [pc, #32]	@ (8011020 <__NVIC_SetPriority+0x50>)
 8011000:	79fb      	ldrb	r3, [r7, #7]
 8011002:	f003 030f 	and.w	r3, r3, #15
 8011006:	3b04      	subs	r3, #4
 8011008:	0112      	lsls	r2, r2, #4
 801100a:	b2d2      	uxtb	r2, r2
 801100c:	440b      	add	r3, r1
 801100e:	761a      	strb	r2, [r3, #24]
}
 8011010:	bf00      	nop
 8011012:	370c      	adds	r7, #12
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr
 801101c:	e000e100 	.word	0xe000e100
 8011020:	e000ed00 	.word	0xe000ed00

08011024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011024:	b480      	push	{r7}
 8011026:	b089      	sub	sp, #36	@ 0x24
 8011028:	af00      	add	r7, sp, #0
 801102a:	60f8      	str	r0, [r7, #12]
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	f003 0307 	and.w	r3, r3, #7
 8011036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011038:	69fb      	ldr	r3, [r7, #28]
 801103a:	f1c3 0307 	rsb	r3, r3, #7
 801103e:	2b04      	cmp	r3, #4
 8011040:	bf28      	it	cs
 8011042:	2304      	movcs	r3, #4
 8011044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011046:	69fb      	ldr	r3, [r7, #28]
 8011048:	3304      	adds	r3, #4
 801104a:	2b06      	cmp	r3, #6
 801104c:	d902      	bls.n	8011054 <NVIC_EncodePriority+0x30>
 801104e:	69fb      	ldr	r3, [r7, #28]
 8011050:	3b03      	subs	r3, #3
 8011052:	e000      	b.n	8011056 <NVIC_EncodePriority+0x32>
 8011054:	2300      	movs	r3, #0
 8011056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011058:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801105c:	69bb      	ldr	r3, [r7, #24]
 801105e:	fa02 f303 	lsl.w	r3, r2, r3
 8011062:	43da      	mvns	r2, r3
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	401a      	ands	r2, r3
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801106c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011070:	697b      	ldr	r3, [r7, #20]
 8011072:	fa01 f303 	lsl.w	r3, r1, r3
 8011076:	43d9      	mvns	r1, r3
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801107c:	4313      	orrs	r3, r2
         );
}
 801107e:	4618      	mov	r0, r3
 8011080:	3724      	adds	r7, #36	@ 0x24
 8011082:	46bd      	mov	sp, r7
 8011084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011088:	4770      	bx	lr
	...

0801108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b082      	sub	sp, #8
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	3b01      	subs	r3, #1
 8011098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801109c:	d301      	bcc.n	80110a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801109e:	2301      	movs	r3, #1
 80110a0:	e00f      	b.n	80110c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80110a2:	4a0a      	ldr	r2, [pc, #40]	@ (80110cc <SysTick_Config+0x40>)
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	3b01      	subs	r3, #1
 80110a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80110aa:	210f      	movs	r1, #15
 80110ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110b0:	f7ff ff8e 	bl	8010fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80110b4:	4b05      	ldr	r3, [pc, #20]	@ (80110cc <SysTick_Config+0x40>)
 80110b6:	2200      	movs	r2, #0
 80110b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80110ba:	4b04      	ldr	r3, [pc, #16]	@ (80110cc <SysTick_Config+0x40>)
 80110bc:	2207      	movs	r2, #7
 80110be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80110c0:	2300      	movs	r3, #0
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3708      	adds	r7, #8
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
 80110ca:	bf00      	nop
 80110cc:	e000e010 	.word	0xe000e010

080110d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f7ff ff29 	bl	8010f30 <__NVIC_SetPriorityGrouping>
}
 80110de:	bf00      	nop
 80110e0:	3708      	adds	r7, #8
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}

080110e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80110e6:	b580      	push	{r7, lr}
 80110e8:	b086      	sub	sp, #24
 80110ea:	af00      	add	r7, sp, #0
 80110ec:	4603      	mov	r3, r0
 80110ee:	60b9      	str	r1, [r7, #8]
 80110f0:	607a      	str	r2, [r7, #4]
 80110f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80110f4:	f7ff ff40 	bl	8010f78 <__NVIC_GetPriorityGrouping>
 80110f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80110fa:	687a      	ldr	r2, [r7, #4]
 80110fc:	68b9      	ldr	r1, [r7, #8]
 80110fe:	6978      	ldr	r0, [r7, #20]
 8011100:	f7ff ff90 	bl	8011024 <NVIC_EncodePriority>
 8011104:	4602      	mov	r2, r0
 8011106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801110a:	4611      	mov	r1, r2
 801110c:	4618      	mov	r0, r3
 801110e:	f7ff ff5f 	bl	8010fd0 <__NVIC_SetPriority>
}
 8011112:	bf00      	nop
 8011114:	3718      	adds	r7, #24
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}

0801111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801111a:	b580      	push	{r7, lr}
 801111c:	b082      	sub	sp, #8
 801111e:	af00      	add	r7, sp, #0
 8011120:	4603      	mov	r3, r0
 8011122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011128:	4618      	mov	r0, r3
 801112a:	f7ff ff33 	bl	8010f94 <__NVIC_EnableIRQ>
}
 801112e:	bf00      	nop
 8011130:	3708      	adds	r7, #8
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}

08011136 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011136:	b580      	push	{r7, lr}
 8011138:	b082      	sub	sp, #8
 801113a:	af00      	add	r7, sp, #0
 801113c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f7ff ffa4 	bl	801108c <SysTick_Config>
 8011144:	4603      	mov	r3, r0
}
 8011146:	4618      	mov	r0, r3
 8011148:	3708      	adds	r7, #8
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}
	...

08011150 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011150:	b480      	push	{r7}
 8011152:	b087      	sub	sp, #28
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
 8011158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801115a:	2300      	movs	r3, #0
 801115c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801115e:	e14c      	b.n	80113fa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	681a      	ldr	r2, [r3, #0]
 8011164:	2101      	movs	r1, #1
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	fa01 f303 	lsl.w	r3, r1, r3
 801116c:	4013      	ands	r3, r2
 801116e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2b00      	cmp	r3, #0
 8011174:	f000 813e 	beq.w	80113f4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	685b      	ldr	r3, [r3, #4]
 801117c:	f003 0303 	and.w	r3, r3, #3
 8011180:	2b01      	cmp	r3, #1
 8011182:	d005      	beq.n	8011190 <HAL_GPIO_Init+0x40>
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	f003 0303 	and.w	r3, r3, #3
 801118c:	2b02      	cmp	r3, #2
 801118e:	d130      	bne.n	80111f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	689b      	ldr	r3, [r3, #8]
 8011194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	005b      	lsls	r3, r3, #1
 801119a:	2203      	movs	r2, #3
 801119c:	fa02 f303 	lsl.w	r3, r2, r3
 80111a0:	43db      	mvns	r3, r3
 80111a2:	693a      	ldr	r2, [r7, #16]
 80111a4:	4013      	ands	r3, r2
 80111a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	68da      	ldr	r2, [r3, #12]
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	005b      	lsls	r3, r3, #1
 80111b0:	fa02 f303 	lsl.w	r3, r2, r3
 80111b4:	693a      	ldr	r2, [r7, #16]
 80111b6:	4313      	orrs	r3, r2
 80111b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	693a      	ldr	r2, [r7, #16]
 80111be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	685b      	ldr	r3, [r3, #4]
 80111c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80111c6:	2201      	movs	r2, #1
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	fa02 f303 	lsl.w	r3, r2, r3
 80111ce:	43db      	mvns	r3, r3
 80111d0:	693a      	ldr	r2, [r7, #16]
 80111d2:	4013      	ands	r3, r2
 80111d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	091b      	lsrs	r3, r3, #4
 80111dc:	f003 0201 	and.w	r2, r3, #1
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	fa02 f303 	lsl.w	r3, r2, r3
 80111e6:	693a      	ldr	r2, [r7, #16]
 80111e8:	4313      	orrs	r3, r2
 80111ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	693a      	ldr	r2, [r7, #16]
 80111f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	685b      	ldr	r3, [r3, #4]
 80111f6:	f003 0303 	and.w	r3, r3, #3
 80111fa:	2b03      	cmp	r3, #3
 80111fc:	d017      	beq.n	801122e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	005b      	lsls	r3, r3, #1
 8011208:	2203      	movs	r2, #3
 801120a:	fa02 f303 	lsl.w	r3, r2, r3
 801120e:	43db      	mvns	r3, r3
 8011210:	693a      	ldr	r2, [r7, #16]
 8011212:	4013      	ands	r3, r2
 8011214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	689a      	ldr	r2, [r3, #8]
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	005b      	lsls	r3, r3, #1
 801121e:	fa02 f303 	lsl.w	r3, r2, r3
 8011222:	693a      	ldr	r2, [r7, #16]
 8011224:	4313      	orrs	r3, r2
 8011226:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	693a      	ldr	r2, [r7, #16]
 801122c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	685b      	ldr	r3, [r3, #4]
 8011232:	f003 0303 	and.w	r3, r3, #3
 8011236:	2b02      	cmp	r3, #2
 8011238:	d123      	bne.n	8011282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	08da      	lsrs	r2, r3, #3
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	3208      	adds	r2, #8
 8011242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	f003 0307 	and.w	r3, r3, #7
 801124e:	009b      	lsls	r3, r3, #2
 8011250:	220f      	movs	r2, #15
 8011252:	fa02 f303 	lsl.w	r3, r2, r3
 8011256:	43db      	mvns	r3, r3
 8011258:	693a      	ldr	r2, [r7, #16]
 801125a:	4013      	ands	r3, r2
 801125c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801125e:	683b      	ldr	r3, [r7, #0]
 8011260:	691a      	ldr	r2, [r3, #16]
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	f003 0307 	and.w	r3, r3, #7
 8011268:	009b      	lsls	r3, r3, #2
 801126a:	fa02 f303 	lsl.w	r3, r2, r3
 801126e:	693a      	ldr	r2, [r7, #16]
 8011270:	4313      	orrs	r3, r2
 8011272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	08da      	lsrs	r2, r3, #3
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	3208      	adds	r2, #8
 801127c:	6939      	ldr	r1, [r7, #16]
 801127e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	005b      	lsls	r3, r3, #1
 801128c:	2203      	movs	r2, #3
 801128e:	fa02 f303 	lsl.w	r3, r2, r3
 8011292:	43db      	mvns	r3, r3
 8011294:	693a      	ldr	r2, [r7, #16]
 8011296:	4013      	ands	r3, r2
 8011298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	f003 0203 	and.w	r2, r3, #3
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	005b      	lsls	r3, r3, #1
 80112a6:	fa02 f303 	lsl.w	r3, r2, r3
 80112aa:	693a      	ldr	r2, [r7, #16]
 80112ac:	4313      	orrs	r3, r2
 80112ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	693a      	ldr	r2, [r7, #16]
 80112b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80112be:	2b00      	cmp	r3, #0
 80112c0:	f000 8098 	beq.w	80113f4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80112c4:	4a54      	ldr	r2, [pc, #336]	@ (8011418 <HAL_GPIO_Init+0x2c8>)
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	089b      	lsrs	r3, r3, #2
 80112ca:	3302      	adds	r3, #2
 80112cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	f003 0303 	and.w	r3, r3, #3
 80112d8:	009b      	lsls	r3, r3, #2
 80112da:	220f      	movs	r2, #15
 80112dc:	fa02 f303 	lsl.w	r3, r2, r3
 80112e0:	43db      	mvns	r3, r3
 80112e2:	693a      	ldr	r2, [r7, #16]
 80112e4:	4013      	ands	r3, r2
 80112e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80112ee:	d019      	beq.n	8011324 <HAL_GPIO_Init+0x1d4>
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	4a4a      	ldr	r2, [pc, #296]	@ (801141c <HAL_GPIO_Init+0x2cc>)
 80112f4:	4293      	cmp	r3, r2
 80112f6:	d013      	beq.n	8011320 <HAL_GPIO_Init+0x1d0>
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	4a49      	ldr	r2, [pc, #292]	@ (8011420 <HAL_GPIO_Init+0x2d0>)
 80112fc:	4293      	cmp	r3, r2
 80112fe:	d00d      	beq.n	801131c <HAL_GPIO_Init+0x1cc>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	4a48      	ldr	r2, [pc, #288]	@ (8011424 <HAL_GPIO_Init+0x2d4>)
 8011304:	4293      	cmp	r3, r2
 8011306:	d007      	beq.n	8011318 <HAL_GPIO_Init+0x1c8>
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	4a47      	ldr	r2, [pc, #284]	@ (8011428 <HAL_GPIO_Init+0x2d8>)
 801130c:	4293      	cmp	r3, r2
 801130e:	d101      	bne.n	8011314 <HAL_GPIO_Init+0x1c4>
 8011310:	2304      	movs	r3, #4
 8011312:	e008      	b.n	8011326 <HAL_GPIO_Init+0x1d6>
 8011314:	2307      	movs	r3, #7
 8011316:	e006      	b.n	8011326 <HAL_GPIO_Init+0x1d6>
 8011318:	2303      	movs	r3, #3
 801131a:	e004      	b.n	8011326 <HAL_GPIO_Init+0x1d6>
 801131c:	2302      	movs	r3, #2
 801131e:	e002      	b.n	8011326 <HAL_GPIO_Init+0x1d6>
 8011320:	2301      	movs	r3, #1
 8011322:	e000      	b.n	8011326 <HAL_GPIO_Init+0x1d6>
 8011324:	2300      	movs	r3, #0
 8011326:	697a      	ldr	r2, [r7, #20]
 8011328:	f002 0203 	and.w	r2, r2, #3
 801132c:	0092      	lsls	r2, r2, #2
 801132e:	4093      	lsls	r3, r2
 8011330:	693a      	ldr	r2, [r7, #16]
 8011332:	4313      	orrs	r3, r2
 8011334:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8011336:	4938      	ldr	r1, [pc, #224]	@ (8011418 <HAL_GPIO_Init+0x2c8>)
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	089b      	lsrs	r3, r3, #2
 801133c:	3302      	adds	r3, #2
 801133e:	693a      	ldr	r2, [r7, #16]
 8011340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8011344:	4b39      	ldr	r3, [pc, #228]	@ (801142c <HAL_GPIO_Init+0x2dc>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	43db      	mvns	r3, r3
 801134e:	693a      	ldr	r2, [r7, #16]
 8011350:	4013      	ands	r3, r2
 8011352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801135c:	2b00      	cmp	r3, #0
 801135e:	d003      	beq.n	8011368 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8011360:	693a      	ldr	r2, [r7, #16]
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	4313      	orrs	r3, r2
 8011366:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8011368:	4a30      	ldr	r2, [pc, #192]	@ (801142c <HAL_GPIO_Init+0x2dc>)
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801136e:	4b2f      	ldr	r3, [pc, #188]	@ (801142c <HAL_GPIO_Init+0x2dc>)
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	43db      	mvns	r3, r3
 8011378:	693a      	ldr	r2, [r7, #16]
 801137a:	4013      	ands	r3, r2
 801137c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011386:	2b00      	cmp	r3, #0
 8011388:	d003      	beq.n	8011392 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 801138a:	693a      	ldr	r2, [r7, #16]
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	4313      	orrs	r3, r2
 8011390:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8011392:	4a26      	ldr	r2, [pc, #152]	@ (801142c <HAL_GPIO_Init+0x2dc>)
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8011398:	4b24      	ldr	r3, [pc, #144]	@ (801142c <HAL_GPIO_Init+0x2dc>)
 801139a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801139e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	43db      	mvns	r3, r3
 80113a4:	693a      	ldr	r2, [r7, #16]
 80113a6:	4013      	ands	r3, r2
 80113a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d003      	beq.n	80113be <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80113b6:	693a      	ldr	r2, [r7, #16]
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	4313      	orrs	r3, r2
 80113bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80113be:	4a1b      	ldr	r2, [pc, #108]	@ (801142c <HAL_GPIO_Init+0x2dc>)
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80113c6:	4b19      	ldr	r3, [pc, #100]	@ (801142c <HAL_GPIO_Init+0x2dc>)
 80113c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80113cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	43db      	mvns	r3, r3
 80113d2:	693a      	ldr	r2, [r7, #16]
 80113d4:	4013      	ands	r3, r2
 80113d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	685b      	ldr	r3, [r3, #4]
 80113dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d003      	beq.n	80113ec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80113e4:	693a      	ldr	r2, [r7, #16]
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	4313      	orrs	r3, r2
 80113ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80113ec:	4a0f      	ldr	r2, [pc, #60]	@ (801142c <HAL_GPIO_Init+0x2dc>)
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	3301      	adds	r3, #1
 80113f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	681a      	ldr	r2, [r3, #0]
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	fa22 f303 	lsr.w	r3, r2, r3
 8011404:	2b00      	cmp	r3, #0
 8011406:	f47f aeab 	bne.w	8011160 <HAL_GPIO_Init+0x10>
  }
}
 801140a:	bf00      	nop
 801140c:	bf00      	nop
 801140e:	371c      	adds	r7, #28
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr
 8011418:	40010000 	.word	0x40010000
 801141c:	48000400 	.word	0x48000400
 8011420:	48000800 	.word	0x48000800
 8011424:	48000c00 	.word	0x48000c00
 8011428:	48001000 	.word	0x48001000
 801142c:	58000800 	.word	0x58000800

08011430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011430:	b480      	push	{r7}
 8011432:	b083      	sub	sp, #12
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	460b      	mov	r3, r1
 801143a:	807b      	strh	r3, [r7, #2]
 801143c:	4613      	mov	r3, r2
 801143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011440:	787b      	ldrb	r3, [r7, #1]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d003      	beq.n	801144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011446:	887a      	ldrh	r2, [r7, #2]
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801144c:	e002      	b.n	8011454 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801144e:	887a      	ldrh	r2, [r7, #2]
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8011454:	bf00      	nop
 8011456:	370c      	adds	r7, #12
 8011458:	46bd      	mov	sp, r7
 801145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145e:	4770      	bx	lr

08011460 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8011460:	b480      	push	{r7}
 8011462:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011464:	4b05      	ldr	r3, [pc, #20]	@ (801147c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4a04      	ldr	r2, [pc, #16]	@ (801147c <HAL_PWR_EnableBkUpAccess+0x1c>)
 801146a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801146e:	6013      	str	r3, [r2, #0]
}
 8011470:	bf00      	nop
 8011472:	46bd      	mov	sp, r7
 8011474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011478:	4770      	bx	lr
 801147a:	bf00      	nop
 801147c:	58000400 	.word	0x58000400

08011480 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8011480:	b480      	push	{r7}
 8011482:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8011484:	4b04      	ldr	r3, [pc, #16]	@ (8011498 <HAL_PWREx_GetVoltageRange+0x18>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 801148c:	4618      	mov	r0, r3
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr
 8011496:	bf00      	nop
 8011498:	58000400 	.word	0x58000400

0801149c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 801149c:	b480      	push	{r7}
 801149e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80114a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80114aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80114ae:	d101      	bne.n	80114b4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80114b0:	2301      	movs	r3, #1
 80114b2:	e000      	b.n	80114b6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80114b4:	2300      	movs	r3, #0
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr

080114c0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80114c0:	b480      	push	{r7}
 80114c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80114c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80114ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80114d2:	6013      	str	r3, [r2, #0]
}
 80114d4:	bf00      	nop
 80114d6:	46bd      	mov	sp, r7
 80114d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114dc:	4770      	bx	lr

080114de <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80114de:	b480      	push	{r7}
 80114e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80114e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80114ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80114f0:	6013      	str	r3, [r2, #0]
}
 80114f2:	bf00      	nop
 80114f4:	46bd      	mov	sp, r7
 80114f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fa:	4770      	bx	lr

080114fc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80114fc:	b480      	push	{r7}
 80114fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8011500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801150a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801150e:	d101      	bne.n	8011514 <LL_RCC_HSE_IsReady+0x18>
 8011510:	2301      	movs	r3, #1
 8011512:	e000      	b.n	8011516 <LL_RCC_HSE_IsReady+0x1a>
 8011514:	2300      	movs	r3, #0
}
 8011516:	4618      	mov	r0, r3
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr

08011520 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8011520:	b480      	push	{r7}
 8011522:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8011524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801152e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011532:	6013      	str	r3, [r2, #0]
}
 8011534:	bf00      	nop
 8011536:	46bd      	mov	sp, r7
 8011538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153c:	4770      	bx	lr

0801153e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 801153e:	b480      	push	{r7}
 8011540:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8011542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801154c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011550:	6013      	str	r3, [r2, #0]
}
 8011552:	bf00      	nop
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr

0801155c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 801155c:	b480      	push	{r7}
 801155e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8011560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801156a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801156e:	d101      	bne.n	8011574 <LL_RCC_HSI_IsReady+0x18>
 8011570:	2301      	movs	r3, #1
 8011572:	e000      	b.n	8011576 <LL_RCC_HSI_IsReady+0x1a>
 8011574:	2300      	movs	r3, #0
}
 8011576:	4618      	mov	r0, r3
 8011578:	46bd      	mov	sp, r7
 801157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157e:	4770      	bx	lr

08011580 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8011588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	061b      	lsls	r3, r3, #24
 8011596:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801159a:	4313      	orrs	r3, r2
 801159c:	604b      	str	r3, [r1, #4]
}
 801159e:	bf00      	nop
 80115a0:	370c      	adds	r7, #12
 80115a2:	46bd      	mov	sp, r7
 80115a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a8:	4770      	bx	lr

080115aa <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80115aa:	b480      	push	{r7}
 80115ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80115ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80115b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80115b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80115ba:	f043 0301 	orr.w	r3, r3, #1
 80115be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80115c2:	bf00      	nop
 80115c4:	46bd      	mov	sp, r7
 80115c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ca:	4770      	bx	lr

080115cc <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80115cc:	b480      	push	{r7}
 80115ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80115d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80115d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80115d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80115dc:	f023 0301 	bic.w	r3, r3, #1
 80115e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80115e4:	bf00      	nop
 80115e6:	46bd      	mov	sp, r7
 80115e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ec:	4770      	bx	lr

080115ee <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80115ee:	b480      	push	{r7}
 80115f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80115f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80115f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80115fa:	f003 0302 	and.w	r3, r3, #2
 80115fe:	2b02      	cmp	r3, #2
 8011600:	d101      	bne.n	8011606 <LL_RCC_HSI48_IsReady+0x18>
 8011602:	2301      	movs	r3, #1
 8011604:	e000      	b.n	8011608 <LL_RCC_HSI48_IsReady+0x1a>
 8011606:	2300      	movs	r3, #0
}
 8011608:	4618      	mov	r0, r3
 801160a:	46bd      	mov	sp, r7
 801160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011610:	4770      	bx	lr

08011612 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8011612:	b480      	push	{r7}
 8011614:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8011616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801161a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801161e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8011622:	f043 0301 	orr.w	r3, r3, #1
 8011626:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 801162a:	bf00      	nop
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr

08011634 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8011634:	b480      	push	{r7}
 8011636:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8011638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801163c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011640:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8011644:	f023 0301 	bic.w	r3, r3, #1
 8011648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 801164c:	bf00      	nop
 801164e:	46bd      	mov	sp, r7
 8011650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011654:	4770      	bx	lr

08011656 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8011656:	b480      	push	{r7}
 8011658:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801165a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801165e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011662:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8011666:	f043 0304 	orr.w	r3, r3, #4
 801166a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 801166e:	bf00      	nop
 8011670:	46bd      	mov	sp, r7
 8011672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011676:	4770      	bx	lr

08011678 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8011678:	b480      	push	{r7}
 801167a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801167c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011684:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8011688:	f023 0304 	bic.w	r3, r3, #4
 801168c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8011690:	bf00      	nop
 8011692:	46bd      	mov	sp, r7
 8011694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011698:	4770      	bx	lr

0801169a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 801169a:	b480      	push	{r7}
 801169c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801169e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80116a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80116a6:	f003 0302 	and.w	r3, r3, #2
 80116aa:	2b02      	cmp	r3, #2
 80116ac:	d101      	bne.n	80116b2 <LL_RCC_LSE_IsReady+0x18>
 80116ae:	2301      	movs	r3, #1
 80116b0:	e000      	b.n	80116b4 <LL_RCC_LSE_IsReady+0x1a>
 80116b2:	2300      	movs	r3, #0
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	46bd      	mov	sp, r7
 80116b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116bc:	4770      	bx	lr

080116be <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80116be:	b480      	push	{r7}
 80116c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80116c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80116c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80116ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80116ce:	f043 0301 	orr.w	r3, r3, #1
 80116d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80116d6:	bf00      	nop
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr

080116e0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80116e0:	b480      	push	{r7}
 80116e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80116e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80116e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80116ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80116f0:	f023 0301 	bic.w	r3, r3, #1
 80116f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80116f8:	bf00      	nop
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr

08011702 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8011702:	b480      	push	{r7}
 8011704:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8011706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801170a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801170e:	f003 0302 	and.w	r3, r3, #2
 8011712:	2b02      	cmp	r3, #2
 8011714:	d101      	bne.n	801171a <LL_RCC_LSI1_IsReady+0x18>
 8011716:	2301      	movs	r3, #1
 8011718:	e000      	b.n	801171c <LL_RCC_LSI1_IsReady+0x1a>
 801171a:	2300      	movs	r3, #0
}
 801171c:	4618      	mov	r0, r3
 801171e:	46bd      	mov	sp, r7
 8011720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011724:	4770      	bx	lr

08011726 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8011726:	b480      	push	{r7}
 8011728:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801172a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801172e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011732:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8011736:	f043 0304 	orr.w	r3, r3, #4
 801173a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 801173e:	bf00      	nop
 8011740:	46bd      	mov	sp, r7
 8011742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011746:	4770      	bx	lr

08011748 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8011748:	b480      	push	{r7}
 801174a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801174c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011754:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8011758:	f023 0304 	bic.w	r3, r3, #4
 801175c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8011760:	bf00      	nop
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr

0801176a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 801176a:	b480      	push	{r7}
 801176c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 801176e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011776:	f003 0308 	and.w	r3, r3, #8
 801177a:	2b08      	cmp	r3, #8
 801177c:	d101      	bne.n	8011782 <LL_RCC_LSI2_IsReady+0x18>
 801177e:	2301      	movs	r3, #1
 8011780:	e000      	b.n	8011784 <LL_RCC_LSI2_IsReady+0x1a>
 8011782:	2300      	movs	r3, #0
}
 8011784:	4618      	mov	r0, r3
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr

0801178e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 801178e:	b480      	push	{r7}
 8011790:	b083      	sub	sp, #12
 8011792:	af00      	add	r7, sp, #0
 8011794:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8011796:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801179a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801179e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	021b      	lsls	r3, r3, #8
 80117a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80117aa:	4313      	orrs	r3, r2
 80117ac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80117b0:	bf00      	nop
 80117b2:	370c      	adds	r7, #12
 80117b4:	46bd      	mov	sp, r7
 80117b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ba:	4770      	bx	lr

080117bc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80117bc:	b480      	push	{r7}
 80117be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80117c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80117ca:	f043 0301 	orr.w	r3, r3, #1
 80117ce:	6013      	str	r3, [r2, #0]
}
 80117d0:	bf00      	nop
 80117d2:	46bd      	mov	sp, r7
 80117d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d8:	4770      	bx	lr

080117da <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80117da:	b480      	push	{r7}
 80117dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80117de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80117e8:	f023 0301 	bic.w	r3, r3, #1
 80117ec:	6013      	str	r3, [r2, #0]
}
 80117ee:	bf00      	nop
 80117f0:	46bd      	mov	sp, r7
 80117f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f6:	4770      	bx	lr

080117f8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80117f8:	b480      	push	{r7}
 80117fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80117fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	f003 0302 	and.w	r3, r3, #2
 8011806:	2b02      	cmp	r3, #2
 8011808:	d101      	bne.n	801180e <LL_RCC_MSI_IsReady+0x16>
 801180a:	2301      	movs	r3, #1
 801180c:	e000      	b.n	8011810 <LL_RCC_MSI_IsReady+0x18>
 801180e:	2300      	movs	r3, #0
}
 8011810:	4618      	mov	r0, r3
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr

0801181a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 801181a:	b480      	push	{r7}
 801181c:	b083      	sub	sp, #12
 801181e:	af00      	add	r7, sp, #0
 8011820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8011822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801182c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	4313      	orrs	r3, r2
 8011834:	600b      	str	r3, [r1, #0]
}
 8011836:	bf00      	nop
 8011838:	370c      	adds	r7, #12
 801183a:	46bd      	mov	sp, r7
 801183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011840:	4770      	bx	lr

08011842 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8011842:	b480      	push	{r7}
 8011844:	b083      	sub	sp, #12
 8011846:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8011848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011852:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2bb0      	cmp	r3, #176	@ 0xb0
 8011858:	d901      	bls.n	801185e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 801185a:	23b0      	movs	r3, #176	@ 0xb0
 801185c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 801185e:	687b      	ldr	r3, [r7, #4]
}
 8011860:	4618      	mov	r0, r3
 8011862:	370c      	adds	r7, #12
 8011864:	46bd      	mov	sp, r7
 8011866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186a:	4770      	bx	lr

0801186c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 801186c:	b480      	push	{r7}
 801186e:	b083      	sub	sp, #12
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8011874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	021b      	lsls	r3, r3, #8
 8011882:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011886:	4313      	orrs	r3, r2
 8011888:	604b      	str	r3, [r1, #4]
}
 801188a:	bf00      	nop
 801188c:	370c      	adds	r7, #12
 801188e:	46bd      	mov	sp, r7
 8011890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011894:	4770      	bx	lr

08011896 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8011896:	b480      	push	{r7}
 8011898:	b083      	sub	sp, #12
 801189a:	af00      	add	r7, sp, #0
 801189c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 801189e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80118a2:	689b      	ldr	r3, [r3, #8]
 80118a4:	f023 0203 	bic.w	r2, r3, #3
 80118a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	4313      	orrs	r3, r2
 80118b0:	608b      	str	r3, [r1, #8]
}
 80118b2:	bf00      	nop
 80118b4:	370c      	adds	r7, #12
 80118b6:	46bd      	mov	sp, r7
 80118b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118bc:	4770      	bx	lr

080118be <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80118be:	b480      	push	{r7}
 80118c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80118c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80118c6:	689b      	ldr	r3, [r3, #8]
 80118c8:	f003 030c 	and.w	r3, r3, #12
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	46bd      	mov	sp, r7
 80118d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d4:	4770      	bx	lr

080118d6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80118d6:	b480      	push	{r7}
 80118d8:	b083      	sub	sp, #12
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80118de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80118e2:	689b      	ldr	r3, [r3, #8]
 80118e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80118e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	4313      	orrs	r3, r2
 80118f0:	608b      	str	r3, [r1, #8]
}
 80118f2:	bf00      	nop
 80118f4:	370c      	adds	r7, #12
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr

080118fe <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80118fe:	b480      	push	{r7}
 8011900:	b083      	sub	sp, #12
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8011906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801190a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801190e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8011912:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	4313      	orrs	r3, r2
 801191a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 801191e:	bf00      	nop
 8011920:	370c      	adds	r7, #12
 8011922:	46bd      	mov	sp, r7
 8011924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011928:	4770      	bx	lr

0801192a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 801192a:	b480      	push	{r7}
 801192c:	b083      	sub	sp, #12
 801192e:	af00      	add	r7, sp, #0
 8011930:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8011932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011936:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801193a:	f023 020f 	bic.w	r2, r3, #15
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	091b      	lsrs	r3, r3, #4
 8011942:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011946:	4313      	orrs	r3, r2
 8011948:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 801194c:	bf00      	nop
 801194e:	370c      	adds	r7, #12
 8011950:	46bd      	mov	sp, r7
 8011952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011956:	4770      	bx	lr

08011958 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8011958:	b480      	push	{r7}
 801195a:	b083      	sub	sp, #12
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8011960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011964:	689b      	ldr	r3, [r3, #8]
 8011966:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801196a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	4313      	orrs	r3, r2
 8011972:	608b      	str	r3, [r1, #8]
}
 8011974:	bf00      	nop
 8011976:	370c      	adds	r7, #12
 8011978:	46bd      	mov	sp, r7
 801197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197e:	4770      	bx	lr

08011980 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8011980:	b480      	push	{r7}
 8011982:	b083      	sub	sp, #12
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8011988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801198c:	689b      	ldr	r3, [r3, #8]
 801198e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8011992:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	4313      	orrs	r3, r2
 801199a:	608b      	str	r3, [r1, #8]
}
 801199c:	bf00      	nop
 801199e:	370c      	adds	r7, #12
 80119a0:	46bd      	mov	sp, r7
 80119a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a6:	4770      	bx	lr

080119a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80119a8:	b480      	push	{r7}
 80119aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80119ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80119b0:	689b      	ldr	r3, [r3, #8]
 80119b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr

080119c0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80119c0:	b480      	push	{r7}
 80119c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80119c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80119c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80119cc:	011b      	lsls	r3, r3, #4
 80119ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	46bd      	mov	sp, r7
 80119d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119da:	4770      	bx	lr

080119dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80119dc:	b480      	push	{r7}
 80119de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80119e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80119e4:	689b      	ldr	r3, [r3, #8]
 80119e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr

080119f4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80119f4:	b480      	push	{r7}
 80119f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80119f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80119fc:	689b      	ldr	r3, [r3, #8]
 80119fe:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr

08011a0c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8011a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8011a1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011a1e:	6013      	str	r3, [r2, #0]
}
 8011a20:	bf00      	nop
 8011a22:	46bd      	mov	sp, r7
 8011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a28:	4770      	bx	lr

08011a2a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8011a2a:	b480      	push	{r7}
 8011a2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8011a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8011a38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011a3c:	6013      	str	r3, [r2, #0]
}
 8011a3e:	bf00      	nop
 8011a40:	46bd      	mov	sp, r7
 8011a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a46:	4770      	bx	lr

08011a48 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8011a48:	b480      	push	{r7}
 8011a4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8011a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011a56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011a5a:	d101      	bne.n	8011a60 <LL_RCC_PLL_IsReady+0x18>
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	e000      	b.n	8011a62 <LL_RCC_PLL_IsReady+0x1a>
 8011a60:	2300      	movs	r3, #0
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr

08011a6c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8011a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011a74:	68db      	ldr	r3, [r3, #12]
 8011a76:	0a1b      	lsrs	r3, r3, #8
 8011a78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a84:	4770      	bx	lr

08011a86 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8011a86:	b480      	push	{r7}
 8011a88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8011a8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011a8e:	68db      	ldr	r3, [r3, #12]
 8011a90:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	46bd      	mov	sp, r7
 8011a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9c:	4770      	bx	lr

08011a9e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8011a9e:	b480      	push	{r7}
 8011aa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8011aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011aa6:	68db      	ldr	r3, [r3, #12]
 8011aa8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab4:	4770      	bx	lr

08011ab6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8011ab6:	b480      	push	{r7}
 8011ab8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8011aba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011abe:	68db      	ldr	r3, [r3, #12]
 8011ac0:	f003 0303 	and.w	r3, r3, #3
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011acc:	4770      	bx	lr

08011ace <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8011ace:	b480      	push	{r7}
 8011ad0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8011ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011ad6:	689b      	ldr	r3, [r3, #8]
 8011ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011ae0:	d101      	bne.n	8011ae6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	e000      	b.n	8011ae8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8011ae6:	2300      	movs	r3, #0
}
 8011ae8:	4618      	mov	r0, r3
 8011aea:	46bd      	mov	sp, r7
 8011aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af0:	4770      	bx	lr

08011af2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8011af2:	b480      	push	{r7}
 8011af4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8011af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011afa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8011afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011b02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011b06:	d101      	bne.n	8011b0c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8011b08:	2301      	movs	r3, #1
 8011b0a:	e000      	b.n	8011b0e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8011b0c:	2300      	movs	r3, #0
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	46bd      	mov	sp, r7
 8011b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b16:	4770      	bx	lr

08011b18 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8011b18:	b480      	push	{r7}
 8011b1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8011b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011b20:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8011b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011b2c:	d101      	bne.n	8011b32 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8011b2e:	2301      	movs	r3, #1
 8011b30:	e000      	b.n	8011b34 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8011b32:	2300      	movs	r3, #0
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	46bd      	mov	sp, r7
 8011b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3c:	4770      	bx	lr

08011b3e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8011b3e:	b480      	push	{r7}
 8011b40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8011b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011b46:	689b      	ldr	r3, [r3, #8]
 8011b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011b4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011b50:	d101      	bne.n	8011b56 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8011b52:	2301      	movs	r3, #1
 8011b54:	e000      	b.n	8011b58 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8011b56:	2300      	movs	r3, #0
}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b60:	4770      	bx	lr

08011b62 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8011b62:	b480      	push	{r7}
 8011b64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8011b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011b6a:	689b      	ldr	r3, [r3, #8]
 8011b6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011b70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011b74:	d101      	bne.n	8011b7a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8011b76:	2301      	movs	r3, #1
 8011b78:	e000      	b.n	8011b7c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8011b7a:	2300      	movs	r3, #0
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b84:	4770      	bx	lr
	...

08011b88 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011b88:	b590      	push	{r4, r7, lr}
 8011b8a:	b08d      	sub	sp, #52	@ 0x34
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d101      	bne.n	8011b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011b96:	2301      	movs	r3, #1
 8011b98:	e363      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	f003 0320 	and.w	r3, r3, #32
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	f000 808d 	beq.w	8011cc2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011ba8:	f7ff fe89 	bl	80118be <LL_RCC_GetSysClkSource>
 8011bac:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011bae:	f7ff ff82 	bl	8011ab6 <LL_RCC_PLL_GetMainSource>
 8011bb2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8011bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d005      	beq.n	8011bc6 <HAL_RCC_OscConfig+0x3e>
 8011bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bbc:	2b0c      	cmp	r3, #12
 8011bbe:	d147      	bne.n	8011c50 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8011bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bc2:	2b01      	cmp	r3, #1
 8011bc4:	d144      	bne.n	8011c50 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	69db      	ldr	r3, [r3, #28]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d101      	bne.n	8011bd2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8011bce:	2301      	movs	r3, #1
 8011bd0:	e347      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011bd6:	f7ff fe34 	bl	8011842 <LL_RCC_MSI_GetRange>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	429c      	cmp	r4, r3
 8011bde:	d914      	bls.n	8011c0a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011be4:	4618      	mov	r0, r3
 8011be6:	f000 fd2f 	bl	8012648 <RCC_SetFlashLatencyFromMSIRange>
 8011bea:	4603      	mov	r3, r0
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d001      	beq.n	8011bf4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	e336      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f7ff fe0e 	bl	801181a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	6a1b      	ldr	r3, [r3, #32]
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7ff fe32 	bl	801186c <LL_RCC_MSI_SetCalibTrimming>
 8011c08:	e013      	b.n	8011c32 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f7ff fe03 	bl	801181a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	6a1b      	ldr	r3, [r3, #32]
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7ff fe27 	bl	801186c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c22:	4618      	mov	r0, r3
 8011c24:	f000 fd10 	bl	8012648 <RCC_SetFlashLatencyFromMSIRange>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d001      	beq.n	8011c32 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8011c2e:	2301      	movs	r3, #1
 8011c30:	e317      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8011c32:	f000 fcc9 	bl	80125c8 <HAL_RCC_GetHCLKFreq>
 8011c36:	4603      	mov	r3, r0
 8011c38:	4aa4      	ldr	r2, [pc, #656]	@ (8011ecc <HAL_RCC_OscConfig+0x344>)
 8011c3a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8011c3c:	4ba4      	ldr	r3, [pc, #656]	@ (8011ed0 <HAL_RCC_OscConfig+0x348>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7ff f8eb 	bl	8010e1c <HAL_InitTick>
 8011c46:	4603      	mov	r3, r0
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d039      	beq.n	8011cc0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	e308      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	69db      	ldr	r3, [r3, #28]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d01e      	beq.n	8011c96 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8011c58:	f7ff fdb0 	bl	80117bc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011c5c:	f7ff f92c 	bl	8010eb8 <HAL_GetTick>
 8011c60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8011c62:	e008      	b.n	8011c76 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011c64:	f7ff f928 	bl	8010eb8 <HAL_GetTick>
 8011c68:	4602      	mov	r2, r0
 8011c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c6c:	1ad3      	subs	r3, r2, r3
 8011c6e:	2b02      	cmp	r3, #2
 8011c70:	d901      	bls.n	8011c76 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8011c72:	2303      	movs	r3, #3
 8011c74:	e2f5      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8011c76:	f7ff fdbf 	bl	80117f8 <LL_RCC_MSI_IsReady>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d0f1      	beq.n	8011c64 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7ff fdc8 	bl	801181a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6a1b      	ldr	r3, [r3, #32]
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7ff fdec 	bl	801186c <LL_RCC_MSI_SetCalibTrimming>
 8011c94:	e015      	b.n	8011cc2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8011c96:	f7ff fda0 	bl	80117da <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011c9a:	f7ff f90d 	bl	8010eb8 <HAL_GetTick>
 8011c9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8011ca0:	e008      	b.n	8011cb4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011ca2:	f7ff f909 	bl	8010eb8 <HAL_GetTick>
 8011ca6:	4602      	mov	r2, r0
 8011ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011caa:	1ad3      	subs	r3, r2, r3
 8011cac:	2b02      	cmp	r3, #2
 8011cae:	d901      	bls.n	8011cb4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8011cb0:	2303      	movs	r3, #3
 8011cb2:	e2d6      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8011cb4:	f7ff fda0 	bl	80117f8 <LL_RCC_MSI_IsReady>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d1f1      	bne.n	8011ca2 <HAL_RCC_OscConfig+0x11a>
 8011cbe:	e000      	b.n	8011cc2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8011cc0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f003 0301 	and.w	r3, r3, #1
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d047      	beq.n	8011d5e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011cce:	f7ff fdf6 	bl	80118be <LL_RCC_GetSysClkSource>
 8011cd2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011cd4:	f7ff feef 	bl	8011ab6 <LL_RCC_PLL_GetMainSource>
 8011cd8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8011cda:	6a3b      	ldr	r3, [r7, #32]
 8011cdc:	2b08      	cmp	r3, #8
 8011cde:	d005      	beq.n	8011cec <HAL_RCC_OscConfig+0x164>
 8011ce0:	6a3b      	ldr	r3, [r7, #32]
 8011ce2:	2b0c      	cmp	r3, #12
 8011ce4:	d108      	bne.n	8011cf8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	2b03      	cmp	r3, #3
 8011cea:	d105      	bne.n	8011cf8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d134      	bne.n	8011d5e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	e2b4      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	685b      	ldr	r3, [r3, #4]
 8011cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011d00:	d102      	bne.n	8011d08 <HAL_RCC_OscConfig+0x180>
 8011d02:	f7ff fbdd 	bl	80114c0 <LL_RCC_HSE_Enable>
 8011d06:	e001      	b.n	8011d0c <HAL_RCC_OscConfig+0x184>
 8011d08:	f7ff fbe9 	bl	80114de <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d012      	beq.n	8011d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011d14:	f7ff f8d0 	bl	8010eb8 <HAL_GetTick>
 8011d18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8011d1a:	e008      	b.n	8011d2e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011d1c:	f7ff f8cc 	bl	8010eb8 <HAL_GetTick>
 8011d20:	4602      	mov	r2, r0
 8011d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d24:	1ad3      	subs	r3, r2, r3
 8011d26:	2b64      	cmp	r3, #100	@ 0x64
 8011d28:	d901      	bls.n	8011d2e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8011d2a:	2303      	movs	r3, #3
 8011d2c:	e299      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8011d2e:	f7ff fbe5 	bl	80114fc <LL_RCC_HSE_IsReady>
 8011d32:	4603      	mov	r3, r0
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d0f1      	beq.n	8011d1c <HAL_RCC_OscConfig+0x194>
 8011d38:	e011      	b.n	8011d5e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011d3a:	f7ff f8bd 	bl	8010eb8 <HAL_GetTick>
 8011d3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8011d40:	e008      	b.n	8011d54 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011d42:	f7ff f8b9 	bl	8010eb8 <HAL_GetTick>
 8011d46:	4602      	mov	r2, r0
 8011d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d4a:	1ad3      	subs	r3, r2, r3
 8011d4c:	2b64      	cmp	r3, #100	@ 0x64
 8011d4e:	d901      	bls.n	8011d54 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8011d50:	2303      	movs	r3, #3
 8011d52:	e286      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8011d54:	f7ff fbd2 	bl	80114fc <LL_RCC_HSE_IsReady>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d1f1      	bne.n	8011d42 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	f003 0302 	and.w	r3, r3, #2
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d04c      	beq.n	8011e04 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011d6a:	f7ff fda8 	bl	80118be <LL_RCC_GetSysClkSource>
 8011d6e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011d70:	f7ff fea1 	bl	8011ab6 <LL_RCC_PLL_GetMainSource>
 8011d74:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8011d76:	69bb      	ldr	r3, [r7, #24]
 8011d78:	2b04      	cmp	r3, #4
 8011d7a:	d005      	beq.n	8011d88 <HAL_RCC_OscConfig+0x200>
 8011d7c:	69bb      	ldr	r3, [r7, #24]
 8011d7e:	2b0c      	cmp	r3, #12
 8011d80:	d10e      	bne.n	8011da0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	2b02      	cmp	r3, #2
 8011d86:	d10b      	bne.n	8011da0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	68db      	ldr	r3, [r3, #12]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d101      	bne.n	8011d94 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8011d90:	2301      	movs	r3, #1
 8011d92:	e266      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	691b      	ldr	r3, [r3, #16]
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f7ff fbf1 	bl	8011580 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8011d9e:	e031      	b.n	8011e04 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	68db      	ldr	r3, [r3, #12]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d019      	beq.n	8011ddc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011da8:	f7ff fbba 	bl	8011520 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011dac:	f7ff f884 	bl	8010eb8 <HAL_GetTick>
 8011db0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8011db2:	e008      	b.n	8011dc6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011db4:	f7ff f880 	bl	8010eb8 <HAL_GetTick>
 8011db8:	4602      	mov	r2, r0
 8011dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dbc:	1ad3      	subs	r3, r2, r3
 8011dbe:	2b02      	cmp	r3, #2
 8011dc0:	d901      	bls.n	8011dc6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8011dc2:	2303      	movs	r3, #3
 8011dc4:	e24d      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8011dc6:	f7ff fbc9 	bl	801155c <LL_RCC_HSI_IsReady>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d0f1      	beq.n	8011db4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	691b      	ldr	r3, [r3, #16]
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f7ff fbd3 	bl	8011580 <LL_RCC_HSI_SetCalibTrimming>
 8011dda:	e013      	b.n	8011e04 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011ddc:	f7ff fbaf 	bl	801153e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011de0:	f7ff f86a 	bl	8010eb8 <HAL_GetTick>
 8011de4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8011de6:	e008      	b.n	8011dfa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011de8:	f7ff f866 	bl	8010eb8 <HAL_GetTick>
 8011dec:	4602      	mov	r2, r0
 8011dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011df0:	1ad3      	subs	r3, r2, r3
 8011df2:	2b02      	cmp	r3, #2
 8011df4:	d901      	bls.n	8011dfa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8011df6:	2303      	movs	r3, #3
 8011df8:	e233      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8011dfa:	f7ff fbaf 	bl	801155c <LL_RCC_HSI_IsReady>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d1f1      	bne.n	8011de8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f003 0308 	and.w	r3, r3, #8
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d106      	bne.n	8011e1e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	f000 80a3 	beq.w	8011f64 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	695b      	ldr	r3, [r3, #20]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d076      	beq.n	8011f14 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	f003 0310 	and.w	r3, r3, #16
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d046      	beq.n	8011ec0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8011e32:	f7ff fc66 	bl	8011702 <LL_RCC_LSI1_IsReady>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d113      	bne.n	8011e64 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8011e3c:	f7ff fc3f 	bl	80116be <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011e40:	f7ff f83a 	bl	8010eb8 <HAL_GetTick>
 8011e44:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8011e46:	e008      	b.n	8011e5a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8011e48:	f7ff f836 	bl	8010eb8 <HAL_GetTick>
 8011e4c:	4602      	mov	r2, r0
 8011e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e50:	1ad3      	subs	r3, r2, r3
 8011e52:	2b02      	cmp	r3, #2
 8011e54:	d901      	bls.n	8011e5a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8011e56:	2303      	movs	r3, #3
 8011e58:	e203      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8011e5a:	f7ff fc52 	bl	8011702 <LL_RCC_LSI1_IsReady>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d0f1      	beq.n	8011e48 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8011e64:	f7ff fc5f 	bl	8011726 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e68:	f7ff f826 	bl	8010eb8 <HAL_GetTick>
 8011e6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8011e6e:	e008      	b.n	8011e82 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8011e70:	f7ff f822 	bl	8010eb8 <HAL_GetTick>
 8011e74:	4602      	mov	r2, r0
 8011e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e78:	1ad3      	subs	r3, r2, r3
 8011e7a:	2b03      	cmp	r3, #3
 8011e7c:	d901      	bls.n	8011e82 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8011e7e:	2303      	movs	r3, #3
 8011e80:	e1ef      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8011e82:	f7ff fc72 	bl	801176a <LL_RCC_LSI2_IsReady>
 8011e86:	4603      	mov	r3, r0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d0f1      	beq.n	8011e70 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	699b      	ldr	r3, [r3, #24]
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7ff fc7c 	bl	801178e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8011e96:	f7ff fc23 	bl	80116e0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e9a:	f7ff f80d 	bl	8010eb8 <HAL_GetTick>
 8011e9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8011ea0:	e008      	b.n	8011eb4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8011ea2:	f7ff f809 	bl	8010eb8 <HAL_GetTick>
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eaa:	1ad3      	subs	r3, r2, r3
 8011eac:	2b02      	cmp	r3, #2
 8011eae:	d901      	bls.n	8011eb4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8011eb0:	2303      	movs	r3, #3
 8011eb2:	e1d6      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8011eb4:	f7ff fc25 	bl	8011702 <LL_RCC_LSI1_IsReady>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d1f1      	bne.n	8011ea2 <HAL_RCC_OscConfig+0x31a>
 8011ebe:	e051      	b.n	8011f64 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8011ec0:	f7ff fbfd 	bl	80116be <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011ec4:	f7fe fff8 	bl	8010eb8 <HAL_GetTick>
 8011ec8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8011eca:	e00c      	b.n	8011ee6 <HAL_RCC_OscConfig+0x35e>
 8011ecc:	2000000c 	.word	0x2000000c
 8011ed0:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8011ed4:	f7fe fff0 	bl	8010eb8 <HAL_GetTick>
 8011ed8:	4602      	mov	r2, r0
 8011eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011edc:	1ad3      	subs	r3, r2, r3
 8011ede:	2b02      	cmp	r3, #2
 8011ee0:	d901      	bls.n	8011ee6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8011ee2:	2303      	movs	r3, #3
 8011ee4:	e1bd      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8011ee6:	f7ff fc0c 	bl	8011702 <LL_RCC_LSI1_IsReady>
 8011eea:	4603      	mov	r3, r0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d0f1      	beq.n	8011ed4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8011ef0:	f7ff fc2a 	bl	8011748 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8011ef4:	e008      	b.n	8011f08 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8011ef6:	f7fe ffdf 	bl	8010eb8 <HAL_GetTick>
 8011efa:	4602      	mov	r2, r0
 8011efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011efe:	1ad3      	subs	r3, r2, r3
 8011f00:	2b03      	cmp	r3, #3
 8011f02:	d901      	bls.n	8011f08 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8011f04:	2303      	movs	r3, #3
 8011f06:	e1ac      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8011f08:	f7ff fc2f 	bl	801176a <LL_RCC_LSI2_IsReady>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d1f1      	bne.n	8011ef6 <HAL_RCC_OscConfig+0x36e>
 8011f12:	e027      	b.n	8011f64 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8011f14:	f7ff fc18 	bl	8011748 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011f18:	f7fe ffce 	bl	8010eb8 <HAL_GetTick>
 8011f1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8011f1e:	e008      	b.n	8011f32 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8011f20:	f7fe ffca 	bl	8010eb8 <HAL_GetTick>
 8011f24:	4602      	mov	r2, r0
 8011f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f28:	1ad3      	subs	r3, r2, r3
 8011f2a:	2b03      	cmp	r3, #3
 8011f2c:	d901      	bls.n	8011f32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8011f2e:	2303      	movs	r3, #3
 8011f30:	e197      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8011f32:	f7ff fc1a 	bl	801176a <LL_RCC_LSI2_IsReady>
 8011f36:	4603      	mov	r3, r0
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d1f1      	bne.n	8011f20 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8011f3c:	f7ff fbd0 	bl	80116e0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011f40:	f7fe ffba 	bl	8010eb8 <HAL_GetTick>
 8011f44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8011f46:	e008      	b.n	8011f5a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8011f48:	f7fe ffb6 	bl	8010eb8 <HAL_GetTick>
 8011f4c:	4602      	mov	r2, r0
 8011f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f50:	1ad3      	subs	r3, r2, r3
 8011f52:	2b02      	cmp	r3, #2
 8011f54:	d901      	bls.n	8011f5a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8011f56:	2303      	movs	r3, #3
 8011f58:	e183      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8011f5a:	f7ff fbd2 	bl	8011702 <LL_RCC_LSI1_IsReady>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d1f1      	bne.n	8011f48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	f003 0304 	and.w	r3, r3, #4
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d05b      	beq.n	8012028 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011f70:	4ba7      	ldr	r3, [pc, #668]	@ (8012210 <HAL_RCC_OscConfig+0x688>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d114      	bne.n	8011fa6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8011f7c:	f7ff fa70 	bl	8011460 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011f80:	f7fe ff9a 	bl	8010eb8 <HAL_GetTick>
 8011f84:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011f86:	e008      	b.n	8011f9a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011f88:	f7fe ff96 	bl	8010eb8 <HAL_GetTick>
 8011f8c:	4602      	mov	r2, r0
 8011f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f90:	1ad3      	subs	r3, r2, r3
 8011f92:	2b02      	cmp	r3, #2
 8011f94:	d901      	bls.n	8011f9a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8011f96:	2303      	movs	r3, #3
 8011f98:	e163      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011f9a:	4b9d      	ldr	r3, [pc, #628]	@ (8012210 <HAL_RCC_OscConfig+0x688>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d0f0      	beq.n	8011f88 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	689b      	ldr	r3, [r3, #8]
 8011faa:	2b01      	cmp	r3, #1
 8011fac:	d102      	bne.n	8011fb4 <HAL_RCC_OscConfig+0x42c>
 8011fae:	f7ff fb30 	bl	8011612 <LL_RCC_LSE_Enable>
 8011fb2:	e00c      	b.n	8011fce <HAL_RCC_OscConfig+0x446>
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	689b      	ldr	r3, [r3, #8]
 8011fb8:	2b05      	cmp	r3, #5
 8011fba:	d104      	bne.n	8011fc6 <HAL_RCC_OscConfig+0x43e>
 8011fbc:	f7ff fb4b 	bl	8011656 <LL_RCC_LSE_EnableBypass>
 8011fc0:	f7ff fb27 	bl	8011612 <LL_RCC_LSE_Enable>
 8011fc4:	e003      	b.n	8011fce <HAL_RCC_OscConfig+0x446>
 8011fc6:	f7ff fb35 	bl	8011634 <LL_RCC_LSE_Disable>
 8011fca:	f7ff fb55 	bl	8011678 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	689b      	ldr	r3, [r3, #8]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d014      	beq.n	8012000 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011fd6:	f7fe ff6f 	bl	8010eb8 <HAL_GetTick>
 8011fda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8011fdc:	e00a      	b.n	8011ff4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011fde:	f7fe ff6b 	bl	8010eb8 <HAL_GetTick>
 8011fe2:	4602      	mov	r2, r0
 8011fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fe6:	1ad3      	subs	r3, r2, r3
 8011fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011fec:	4293      	cmp	r3, r2
 8011fee:	d901      	bls.n	8011ff4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8011ff0:	2303      	movs	r3, #3
 8011ff2:	e136      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8011ff4:	f7ff fb51 	bl	801169a <LL_RCC_LSE_IsReady>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d0ef      	beq.n	8011fde <HAL_RCC_OscConfig+0x456>
 8011ffe:	e013      	b.n	8012028 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012000:	f7fe ff5a 	bl	8010eb8 <HAL_GetTick>
 8012004:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8012006:	e00a      	b.n	801201e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012008:	f7fe ff56 	bl	8010eb8 <HAL_GetTick>
 801200c:	4602      	mov	r2, r0
 801200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012010:	1ad3      	subs	r3, r2, r3
 8012012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012016:	4293      	cmp	r3, r2
 8012018:	d901      	bls.n	801201e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 801201a:	2303      	movs	r3, #3
 801201c:	e121      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 801201e:	f7ff fb3c 	bl	801169a <LL_RCC_LSE_IsReady>
 8012022:	4603      	mov	r3, r0
 8012024:	2b00      	cmp	r3, #0
 8012026:	d1ef      	bne.n	8012008 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012030:	2b00      	cmp	r3, #0
 8012032:	d02c      	beq.n	801208e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012038:	2b00      	cmp	r3, #0
 801203a:	d014      	beq.n	8012066 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801203c:	f7ff fab5 	bl	80115aa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012040:	f7fe ff3a 	bl	8010eb8 <HAL_GetTick>
 8012044:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8012046:	e008      	b.n	801205a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012048:	f7fe ff36 	bl	8010eb8 <HAL_GetTick>
 801204c:	4602      	mov	r2, r0
 801204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012050:	1ad3      	subs	r3, r2, r3
 8012052:	2b02      	cmp	r3, #2
 8012054:	d901      	bls.n	801205a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8012056:	2303      	movs	r3, #3
 8012058:	e103      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801205a:	f7ff fac8 	bl	80115ee <LL_RCC_HSI48_IsReady>
 801205e:	4603      	mov	r3, r0
 8012060:	2b00      	cmp	r3, #0
 8012062:	d0f1      	beq.n	8012048 <HAL_RCC_OscConfig+0x4c0>
 8012064:	e013      	b.n	801208e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8012066:	f7ff fab1 	bl	80115cc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801206a:	f7fe ff25 	bl	8010eb8 <HAL_GetTick>
 801206e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8012070:	e008      	b.n	8012084 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012072:	f7fe ff21 	bl	8010eb8 <HAL_GetTick>
 8012076:	4602      	mov	r2, r0
 8012078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801207a:	1ad3      	subs	r3, r2, r3
 801207c:	2b02      	cmp	r3, #2
 801207e:	d901      	bls.n	8012084 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8012080:	2303      	movs	r3, #3
 8012082:	e0ee      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8012084:	f7ff fab3 	bl	80115ee <LL_RCC_HSI48_IsReady>
 8012088:	4603      	mov	r3, r0
 801208a:	2b00      	cmp	r3, #0
 801208c:	d1f1      	bne.n	8012072 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012092:	2b00      	cmp	r3, #0
 8012094:	f000 80e4 	beq.w	8012260 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012098:	f7ff fc11 	bl	80118be <LL_RCC_GetSysClkSource>
 801209c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 801209e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120aa:	2b02      	cmp	r3, #2
 80120ac:	f040 80b4 	bne.w	8012218 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	f003 0203 	and.w	r2, r3, #3
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d123      	bne.n	8012106 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d11c      	bne.n	8012106 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	0a1b      	lsrs	r3, r3, #8
 80120d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80120d8:	429a      	cmp	r2, r3
 80120da:	d114      	bne.n	8012106 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d10d      	bne.n	8012106 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d106      	bne.n	8012106 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8012102:	429a      	cmp	r2, r3
 8012104:	d05d      	beq.n	80121c2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	2b0c      	cmp	r3, #12
 801210a:	d058      	beq.n	80121be <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801210c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012116:	2b00      	cmp	r3, #0
 8012118:	d001      	beq.n	801211e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 801211a:	2301      	movs	r3, #1
 801211c:	e0a1      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801211e:	f7ff fc84 	bl	8011a2a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8012122:	f7fe fec9 	bl	8010eb8 <HAL_GetTick>
 8012126:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012128:	e008      	b.n	801213c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801212a:	f7fe fec5 	bl	8010eb8 <HAL_GetTick>
 801212e:	4602      	mov	r2, r0
 8012130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012132:	1ad3      	subs	r3, r2, r3
 8012134:	2b02      	cmp	r3, #2
 8012136:	d901      	bls.n	801213c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8012138:	2303      	movs	r3, #3
 801213a:	e092      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801213c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012146:	2b00      	cmp	r3, #0
 8012148:	d1ef      	bne.n	801212a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801214a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801214e:	68da      	ldr	r2, [r3, #12]
 8012150:	4b30      	ldr	r3, [pc, #192]	@ (8012214 <HAL_RCC_OscConfig+0x68c>)
 8012152:	4013      	ands	r3, r2
 8012154:	687a      	ldr	r2, [r7, #4]
 8012156:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8012158:	687a      	ldr	r2, [r7, #4]
 801215a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801215c:	4311      	orrs	r1, r2
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8012162:	0212      	lsls	r2, r2, #8
 8012164:	4311      	orrs	r1, r2
 8012166:	687a      	ldr	r2, [r7, #4]
 8012168:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801216a:	4311      	orrs	r1, r2
 801216c:	687a      	ldr	r2, [r7, #4]
 801216e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8012170:	4311      	orrs	r1, r2
 8012172:	687a      	ldr	r2, [r7, #4]
 8012174:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8012176:	430a      	orrs	r2, r1
 8012178:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801217c:	4313      	orrs	r3, r2
 801217e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8012180:	f7ff fc44 	bl	8011a0c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8012184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012188:	68db      	ldr	r3, [r3, #12]
 801218a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801218e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012192:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8012194:	f7fe fe90 	bl	8010eb8 <HAL_GetTick>
 8012198:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801219a:	e008      	b.n	80121ae <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801219c:	f7fe fe8c 	bl	8010eb8 <HAL_GetTick>
 80121a0:	4602      	mov	r2, r0
 80121a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121a4:	1ad3      	subs	r3, r2, r3
 80121a6:	2b02      	cmp	r3, #2
 80121a8:	d901      	bls.n	80121ae <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80121aa:	2303      	movs	r3, #3
 80121ac:	e059      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80121ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d0ef      	beq.n	801219c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80121bc:	e050      	b.n	8012260 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80121be:	2301      	movs	r3, #1
 80121c0:	e04f      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80121c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d147      	bne.n	8012260 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80121d0:	f7ff fc1c 	bl	8011a0c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80121d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80121d8:	68db      	ldr	r3, [r3, #12]
 80121da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80121de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80121e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80121e4:	f7fe fe68 	bl	8010eb8 <HAL_GetTick>
 80121e8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80121ea:	e008      	b.n	80121fe <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80121ec:	f7fe fe64 	bl	8010eb8 <HAL_GetTick>
 80121f0:	4602      	mov	r2, r0
 80121f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121f4:	1ad3      	subs	r3, r2, r3
 80121f6:	2b02      	cmp	r3, #2
 80121f8:	d901      	bls.n	80121fe <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80121fa:	2303      	movs	r3, #3
 80121fc:	e031      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80121fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012208:	2b00      	cmp	r3, #0
 801220a:	d0ef      	beq.n	80121ec <HAL_RCC_OscConfig+0x664>
 801220c:	e028      	b.n	8012260 <HAL_RCC_OscConfig+0x6d8>
 801220e:	bf00      	nop
 8012210:	58000400 	.word	0x58000400
 8012214:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	2b0c      	cmp	r3, #12
 801221c:	d01e      	beq.n	801225c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801221e:	f7ff fc04 	bl	8011a2a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012222:	f7fe fe49 	bl	8010eb8 <HAL_GetTick>
 8012226:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012228:	e008      	b.n	801223c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801222a:	f7fe fe45 	bl	8010eb8 <HAL_GetTick>
 801222e:	4602      	mov	r2, r0
 8012230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012232:	1ad3      	subs	r3, r2, r3
 8012234:	2b02      	cmp	r3, #2
 8012236:	d901      	bls.n	801223c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8012238:	2303      	movs	r3, #3
 801223a:	e012      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801223c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012246:	2b00      	cmp	r3, #0
 8012248:	d1ef      	bne.n	801222a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 801224a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801224e:	68da      	ldr	r2, [r3, #12]
 8012250:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012254:	4b05      	ldr	r3, [pc, #20]	@ (801226c <HAL_RCC_OscConfig+0x6e4>)
 8012256:	4013      	ands	r3, r2
 8012258:	60cb      	str	r3, [r1, #12]
 801225a:	e001      	b.n	8012260 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801225c:	2301      	movs	r3, #1
 801225e:	e000      	b.n	8012262 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8012260:	2300      	movs	r3, #0
}
 8012262:	4618      	mov	r0, r3
 8012264:	3734      	adds	r7, #52	@ 0x34
 8012266:	46bd      	mov	sp, r7
 8012268:	bd90      	pop	{r4, r7, pc}
 801226a:	bf00      	nop
 801226c:	eefefffc 	.word	0xeefefffc

08012270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b084      	sub	sp, #16
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d101      	bne.n	8012284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012280:	2301      	movs	r3, #1
 8012282:	e12d      	b.n	80124e0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8012284:	4b98      	ldr	r3, [pc, #608]	@ (80124e8 <HAL_RCC_ClockConfig+0x278>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	f003 0307 	and.w	r3, r3, #7
 801228c:	683a      	ldr	r2, [r7, #0]
 801228e:	429a      	cmp	r2, r3
 8012290:	d91b      	bls.n	80122ca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012292:	4b95      	ldr	r3, [pc, #596]	@ (80124e8 <HAL_RCC_ClockConfig+0x278>)
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	f023 0207 	bic.w	r2, r3, #7
 801229a:	4993      	ldr	r1, [pc, #588]	@ (80124e8 <HAL_RCC_ClockConfig+0x278>)
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	4313      	orrs	r3, r2
 80122a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80122a2:	f7fe fe09 	bl	8010eb8 <HAL_GetTick>
 80122a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80122a8:	e008      	b.n	80122bc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80122aa:	f7fe fe05 	bl	8010eb8 <HAL_GetTick>
 80122ae:	4602      	mov	r2, r0
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	1ad3      	subs	r3, r2, r3
 80122b4:	2b02      	cmp	r3, #2
 80122b6:	d901      	bls.n	80122bc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80122b8:	2303      	movs	r3, #3
 80122ba:	e111      	b.n	80124e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80122bc:	4b8a      	ldr	r3, [pc, #552]	@ (80124e8 <HAL_RCC_ClockConfig+0x278>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	f003 0307 	and.w	r3, r3, #7
 80122c4:	683a      	ldr	r2, [r7, #0]
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d1ef      	bne.n	80122aa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	f003 0302 	and.w	r3, r3, #2
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d016      	beq.n	8012304 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	689b      	ldr	r3, [r3, #8]
 80122da:	4618      	mov	r0, r3
 80122dc:	f7ff fafb 	bl	80118d6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80122e0:	f7fe fdea 	bl	8010eb8 <HAL_GetTick>
 80122e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80122e6:	e008      	b.n	80122fa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80122e8:	f7fe fde6 	bl	8010eb8 <HAL_GetTick>
 80122ec:	4602      	mov	r2, r0
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	1ad3      	subs	r3, r2, r3
 80122f2:	2b02      	cmp	r3, #2
 80122f4:	d901      	bls.n	80122fa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80122f6:	2303      	movs	r3, #3
 80122f8:	e0f2      	b.n	80124e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80122fa:	f7ff fbe8 	bl	8011ace <LL_RCC_IsActiveFlag_HPRE>
 80122fe:	4603      	mov	r3, r0
 8012300:	2b00      	cmp	r3, #0
 8012302:	d0f1      	beq.n	80122e8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	f003 0320 	and.w	r3, r3, #32
 801230c:	2b00      	cmp	r3, #0
 801230e:	d016      	beq.n	801233e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	695b      	ldr	r3, [r3, #20]
 8012314:	4618      	mov	r0, r3
 8012316:	f7ff faf2 	bl	80118fe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801231a:	f7fe fdcd 	bl	8010eb8 <HAL_GetTick>
 801231e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8012320:	e008      	b.n	8012334 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8012322:	f7fe fdc9 	bl	8010eb8 <HAL_GetTick>
 8012326:	4602      	mov	r2, r0
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	1ad3      	subs	r3, r2, r3
 801232c:	2b02      	cmp	r3, #2
 801232e:	d901      	bls.n	8012334 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8012330:	2303      	movs	r3, #3
 8012332:	e0d5      	b.n	80124e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8012334:	f7ff fbdd 	bl	8011af2 <LL_RCC_IsActiveFlag_C2HPRE>
 8012338:	4603      	mov	r3, r0
 801233a:	2b00      	cmp	r3, #0
 801233c:	d0f1      	beq.n	8012322 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012346:	2b00      	cmp	r3, #0
 8012348:	d016      	beq.n	8012378 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	699b      	ldr	r3, [r3, #24]
 801234e:	4618      	mov	r0, r3
 8012350:	f7ff faeb 	bl	801192a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8012354:	f7fe fdb0 	bl	8010eb8 <HAL_GetTick>
 8012358:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801235a:	e008      	b.n	801236e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801235c:	f7fe fdac 	bl	8010eb8 <HAL_GetTick>
 8012360:	4602      	mov	r2, r0
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	1ad3      	subs	r3, r2, r3
 8012366:	2b02      	cmp	r3, #2
 8012368:	d901      	bls.n	801236e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 801236a:	2303      	movs	r3, #3
 801236c:	e0b8      	b.n	80124e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801236e:	f7ff fbd3 	bl	8011b18 <LL_RCC_IsActiveFlag_SHDHPRE>
 8012372:	4603      	mov	r3, r0
 8012374:	2b00      	cmp	r3, #0
 8012376:	d0f1      	beq.n	801235c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f003 0304 	and.w	r3, r3, #4
 8012380:	2b00      	cmp	r3, #0
 8012382:	d016      	beq.n	80123b2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	68db      	ldr	r3, [r3, #12]
 8012388:	4618      	mov	r0, r3
 801238a:	f7ff fae5 	bl	8011958 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801238e:	f7fe fd93 	bl	8010eb8 <HAL_GetTick>
 8012392:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8012394:	e008      	b.n	80123a8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8012396:	f7fe fd8f 	bl	8010eb8 <HAL_GetTick>
 801239a:	4602      	mov	r2, r0
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	1ad3      	subs	r3, r2, r3
 80123a0:	2b02      	cmp	r3, #2
 80123a2:	d901      	bls.n	80123a8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80123a4:	2303      	movs	r3, #3
 80123a6:	e09b      	b.n	80124e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80123a8:	f7ff fbc9 	bl	8011b3e <LL_RCC_IsActiveFlag_PPRE1>
 80123ac:	4603      	mov	r3, r0
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d0f1      	beq.n	8012396 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	f003 0308 	and.w	r3, r3, #8
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d017      	beq.n	80123ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	691b      	ldr	r3, [r3, #16]
 80123c2:	00db      	lsls	r3, r3, #3
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7ff fadb 	bl	8011980 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80123ca:	f7fe fd75 	bl	8010eb8 <HAL_GetTick>
 80123ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80123d0:	e008      	b.n	80123e4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80123d2:	f7fe fd71 	bl	8010eb8 <HAL_GetTick>
 80123d6:	4602      	mov	r2, r0
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	1ad3      	subs	r3, r2, r3
 80123dc:	2b02      	cmp	r3, #2
 80123de:	d901      	bls.n	80123e4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80123e0:	2303      	movs	r3, #3
 80123e2:	e07d      	b.n	80124e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80123e4:	f7ff fbbd 	bl	8011b62 <LL_RCC_IsActiveFlag_PPRE2>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d0f1      	beq.n	80123d2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	f003 0301 	and.w	r3, r3, #1
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d043      	beq.n	8012482 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	685b      	ldr	r3, [r3, #4]
 80123fe:	2b02      	cmp	r3, #2
 8012400:	d106      	bne.n	8012410 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8012402:	f7ff f87b 	bl	80114fc <LL_RCC_HSE_IsReady>
 8012406:	4603      	mov	r3, r0
 8012408:	2b00      	cmp	r3, #0
 801240a:	d11e      	bne.n	801244a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801240c:	2301      	movs	r3, #1
 801240e:	e067      	b.n	80124e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	685b      	ldr	r3, [r3, #4]
 8012414:	2b03      	cmp	r3, #3
 8012416:	d106      	bne.n	8012426 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8012418:	f7ff fb16 	bl	8011a48 <LL_RCC_PLL_IsReady>
 801241c:	4603      	mov	r3, r0
 801241e:	2b00      	cmp	r3, #0
 8012420:	d113      	bne.n	801244a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8012422:	2301      	movs	r3, #1
 8012424:	e05c      	b.n	80124e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d106      	bne.n	801243c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 801242e:	f7ff f9e3 	bl	80117f8 <LL_RCC_MSI_IsReady>
 8012432:	4603      	mov	r3, r0
 8012434:	2b00      	cmp	r3, #0
 8012436:	d108      	bne.n	801244a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8012438:	2301      	movs	r3, #1
 801243a:	e051      	b.n	80124e0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 801243c:	f7ff f88e 	bl	801155c <LL_RCC_HSI_IsReady>
 8012440:	4603      	mov	r3, r0
 8012442:	2b00      	cmp	r3, #0
 8012444:	d101      	bne.n	801244a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8012446:	2301      	movs	r3, #1
 8012448:	e04a      	b.n	80124e0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	4618      	mov	r0, r3
 8012450:	f7ff fa21 	bl	8011896 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012454:	f7fe fd30 	bl	8010eb8 <HAL_GetTick>
 8012458:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801245a:	e00a      	b.n	8012472 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801245c:	f7fe fd2c 	bl	8010eb8 <HAL_GetTick>
 8012460:	4602      	mov	r2, r0
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	1ad3      	subs	r3, r2, r3
 8012466:	f241 3288 	movw	r2, #5000	@ 0x1388
 801246a:	4293      	cmp	r3, r2
 801246c:	d901      	bls.n	8012472 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 801246e:	2303      	movs	r3, #3
 8012470:	e036      	b.n	80124e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012472:	f7ff fa24 	bl	80118be <LL_RCC_GetSysClkSource>
 8012476:	4602      	mov	r2, r0
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	685b      	ldr	r3, [r3, #4]
 801247c:	009b      	lsls	r3, r3, #2
 801247e:	429a      	cmp	r2, r3
 8012480:	d1ec      	bne.n	801245c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8012482:	4b19      	ldr	r3, [pc, #100]	@ (80124e8 <HAL_RCC_ClockConfig+0x278>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	f003 0307 	and.w	r3, r3, #7
 801248a:	683a      	ldr	r2, [r7, #0]
 801248c:	429a      	cmp	r2, r3
 801248e:	d21b      	bcs.n	80124c8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012490:	4b15      	ldr	r3, [pc, #84]	@ (80124e8 <HAL_RCC_ClockConfig+0x278>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	f023 0207 	bic.w	r2, r3, #7
 8012498:	4913      	ldr	r1, [pc, #76]	@ (80124e8 <HAL_RCC_ClockConfig+0x278>)
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	4313      	orrs	r3, r2
 801249e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80124a0:	f7fe fd0a 	bl	8010eb8 <HAL_GetTick>
 80124a4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80124a6:	e008      	b.n	80124ba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80124a8:	f7fe fd06 	bl	8010eb8 <HAL_GetTick>
 80124ac:	4602      	mov	r2, r0
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	1ad3      	subs	r3, r2, r3
 80124b2:	2b02      	cmp	r3, #2
 80124b4:	d901      	bls.n	80124ba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80124b6:	2303      	movs	r3, #3
 80124b8:	e012      	b.n	80124e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80124ba:	4b0b      	ldr	r3, [pc, #44]	@ (80124e8 <HAL_RCC_ClockConfig+0x278>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	f003 0307 	and.w	r3, r3, #7
 80124c2:	683a      	ldr	r2, [r7, #0]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d1ef      	bne.n	80124a8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80124c8:	f000 f87e 	bl	80125c8 <HAL_RCC_GetHCLKFreq>
 80124cc:	4603      	mov	r3, r0
 80124ce:	4a07      	ldr	r2, [pc, #28]	@ (80124ec <HAL_RCC_ClockConfig+0x27c>)
 80124d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80124d2:	f7fe fcfd 	bl	8010ed0 <HAL_GetTickPrio>
 80124d6:	4603      	mov	r3, r0
 80124d8:	4618      	mov	r0, r3
 80124da:	f7fe fc9f 	bl	8010e1c <HAL_InitTick>
 80124de:	4603      	mov	r3, r0
}
 80124e0:	4618      	mov	r0, r3
 80124e2:	3710      	adds	r7, #16
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}
 80124e8:	58004000 	.word	0x58004000
 80124ec:	2000000c 	.word	0x2000000c

080124f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80124f0:	b590      	push	{r4, r7, lr}
 80124f2:	b085      	sub	sp, #20
 80124f4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80124f6:	f7ff f9e2 	bl	80118be <LL_RCC_GetSysClkSource>
 80124fa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d10a      	bne.n	8012518 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8012502:	f7ff f99e 	bl	8011842 <LL_RCC_MSI_GetRange>
 8012506:	4603      	mov	r3, r0
 8012508:	091b      	lsrs	r3, r3, #4
 801250a:	f003 030f 	and.w	r3, r3, #15
 801250e:	4a2b      	ldr	r2, [pc, #172]	@ (80125bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8012510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012514:	60fb      	str	r3, [r7, #12]
 8012516:	e04b      	b.n	80125b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2b04      	cmp	r3, #4
 801251c:	d102      	bne.n	8012524 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801251e:	4b28      	ldr	r3, [pc, #160]	@ (80125c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8012520:	60fb      	str	r3, [r7, #12]
 8012522:	e045      	b.n	80125b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2b08      	cmp	r3, #8
 8012528:	d10a      	bne.n	8012540 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801252a:	f7fe ffb7 	bl	801149c <LL_RCC_HSE_IsEnabledDiv2>
 801252e:	4603      	mov	r3, r0
 8012530:	2b01      	cmp	r3, #1
 8012532:	d102      	bne.n	801253a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8012534:	4b22      	ldr	r3, [pc, #136]	@ (80125c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8012536:	60fb      	str	r3, [r7, #12]
 8012538:	e03a      	b.n	80125b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 801253a:	4b22      	ldr	r3, [pc, #136]	@ (80125c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 801253c:	60fb      	str	r3, [r7, #12]
 801253e:	e037      	b.n	80125b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8012540:	f7ff fab9 	bl	8011ab6 <LL_RCC_PLL_GetMainSource>
 8012544:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	2b02      	cmp	r3, #2
 801254a:	d003      	beq.n	8012554 <HAL_RCC_GetSysClockFreq+0x64>
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	2b03      	cmp	r3, #3
 8012550:	d003      	beq.n	801255a <HAL_RCC_GetSysClockFreq+0x6a>
 8012552:	e00d      	b.n	8012570 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8012554:	4b1a      	ldr	r3, [pc, #104]	@ (80125c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8012556:	60bb      	str	r3, [r7, #8]
        break;
 8012558:	e015      	b.n	8012586 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801255a:	f7fe ff9f 	bl	801149c <LL_RCC_HSE_IsEnabledDiv2>
 801255e:	4603      	mov	r3, r0
 8012560:	2b01      	cmp	r3, #1
 8012562:	d102      	bne.n	801256a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8012564:	4b16      	ldr	r3, [pc, #88]	@ (80125c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8012566:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8012568:	e00d      	b.n	8012586 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 801256a:	4b16      	ldr	r3, [pc, #88]	@ (80125c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 801256c:	60bb      	str	r3, [r7, #8]
        break;
 801256e:	e00a      	b.n	8012586 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8012570:	f7ff f967 	bl	8011842 <LL_RCC_MSI_GetRange>
 8012574:	4603      	mov	r3, r0
 8012576:	091b      	lsrs	r3, r3, #4
 8012578:	f003 030f 	and.w	r3, r3, #15
 801257c:	4a0f      	ldr	r2, [pc, #60]	@ (80125bc <HAL_RCC_GetSysClockFreq+0xcc>)
 801257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012582:	60bb      	str	r3, [r7, #8]
        break;
 8012584:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8012586:	f7ff fa71 	bl	8011a6c <LL_RCC_PLL_GetN>
 801258a:	4602      	mov	r2, r0
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	fb03 f402 	mul.w	r4, r3, r2
 8012592:	f7ff fa84 	bl	8011a9e <LL_RCC_PLL_GetDivider>
 8012596:	4603      	mov	r3, r0
 8012598:	091b      	lsrs	r3, r3, #4
 801259a:	3301      	adds	r3, #1
 801259c:	fbb4 f4f3 	udiv	r4, r4, r3
 80125a0:	f7ff fa71 	bl	8011a86 <LL_RCC_PLL_GetR>
 80125a4:	4603      	mov	r3, r0
 80125a6:	0f5b      	lsrs	r3, r3, #29
 80125a8:	3301      	adds	r3, #1
 80125aa:	fbb4 f3f3 	udiv	r3, r4, r3
 80125ae:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80125b0:	68fb      	ldr	r3, [r7, #12]
}
 80125b2:	4618      	mov	r0, r3
 80125b4:	3714      	adds	r7, #20
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd90      	pop	{r4, r7, pc}
 80125ba:	bf00      	nop
 80125bc:	08014c7c 	.word	0x08014c7c
 80125c0:	00f42400 	.word	0x00f42400
 80125c4:	01e84800 	.word	0x01e84800

080125c8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80125c8:	b598      	push	{r3, r4, r7, lr}
 80125ca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80125cc:	f7ff ff90 	bl	80124f0 <HAL_RCC_GetSysClockFreq>
 80125d0:	4604      	mov	r4, r0
 80125d2:	f7ff f9e9 	bl	80119a8 <LL_RCC_GetAHBPrescaler>
 80125d6:	4603      	mov	r3, r0
 80125d8:	091b      	lsrs	r3, r3, #4
 80125da:	f003 030f 	and.w	r3, r3, #15
 80125de:	4a03      	ldr	r2, [pc, #12]	@ (80125ec <HAL_RCC_GetHCLKFreq+0x24>)
 80125e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	bd98      	pop	{r3, r4, r7, pc}
 80125ec:	08014c1c 	.word	0x08014c1c

080125f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80125f0:	b598      	push	{r3, r4, r7, lr}
 80125f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80125f4:	f7ff ffe8 	bl	80125c8 <HAL_RCC_GetHCLKFreq>
 80125f8:	4604      	mov	r4, r0
 80125fa:	f7ff f9ef 	bl	80119dc <LL_RCC_GetAPB1Prescaler>
 80125fe:	4603      	mov	r3, r0
 8012600:	0a1b      	lsrs	r3, r3, #8
 8012602:	f003 0307 	and.w	r3, r3, #7
 8012606:	4a04      	ldr	r2, [pc, #16]	@ (8012618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801260c:	f003 031f 	and.w	r3, r3, #31
 8012610:	fa24 f303 	lsr.w	r3, r4, r3
}
 8012614:	4618      	mov	r0, r3
 8012616:	bd98      	pop	{r3, r4, r7, pc}
 8012618:	08014c5c 	.word	0x08014c5c

0801261c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801261c:	b598      	push	{r3, r4, r7, lr}
 801261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8012620:	f7ff ffd2 	bl	80125c8 <HAL_RCC_GetHCLKFreq>
 8012624:	4604      	mov	r4, r0
 8012626:	f7ff f9e5 	bl	80119f4 <LL_RCC_GetAPB2Prescaler>
 801262a:	4603      	mov	r3, r0
 801262c:	0adb      	lsrs	r3, r3, #11
 801262e:	f003 0307 	and.w	r3, r3, #7
 8012632:	4a04      	ldr	r2, [pc, #16]	@ (8012644 <HAL_RCC_GetPCLK2Freq+0x28>)
 8012634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012638:	f003 031f 	and.w	r3, r3, #31
 801263c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8012640:	4618      	mov	r0, r3
 8012642:	bd98      	pop	{r3, r4, r7, pc}
 8012644:	08014c5c 	.word	0x08014c5c

08012648 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8012648:	b590      	push	{r4, r7, lr}
 801264a:	b085      	sub	sp, #20
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2bb0      	cmp	r3, #176	@ 0xb0
 8012654:	d903      	bls.n	801265e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8012656:	4b15      	ldr	r3, [pc, #84]	@ (80126ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8012658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801265a:	60fb      	str	r3, [r7, #12]
 801265c:	e007      	b.n	801266e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	091b      	lsrs	r3, r3, #4
 8012662:	f003 030f 	and.w	r3, r3, #15
 8012666:	4a11      	ldr	r2, [pc, #68]	@ (80126ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8012668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801266c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 801266e:	f7ff f9a7 	bl	80119c0 <LL_RCC_GetAHB4Prescaler>
 8012672:	4603      	mov	r3, r0
 8012674:	091b      	lsrs	r3, r3, #4
 8012676:	f003 030f 	and.w	r3, r3, #15
 801267a:	4a0d      	ldr	r2, [pc, #52]	@ (80126b0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 801267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012680:	68fa      	ldr	r2, [r7, #12]
 8012682:	fbb2 f3f3 	udiv	r3, r2, r3
 8012686:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	4a0a      	ldr	r2, [pc, #40]	@ (80126b4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 801268c:	fba2 2303 	umull	r2, r3, r2, r3
 8012690:	0c9c      	lsrs	r4, r3, #18
 8012692:	f7fe fef5 	bl	8011480 <HAL_PWREx_GetVoltageRange>
 8012696:	4603      	mov	r3, r0
 8012698:	4619      	mov	r1, r3
 801269a:	4620      	mov	r0, r4
 801269c:	f000 f80c 	bl	80126b8 <RCC_SetFlashLatency>
 80126a0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	3714      	adds	r7, #20
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd90      	pop	{r4, r7, pc}
 80126aa:	bf00      	nop
 80126ac:	08014c7c 	.word	0x08014c7c
 80126b0:	08014c1c 	.word	0x08014c1c
 80126b4:	431bde83 	.word	0x431bde83

080126b8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80126b8:	b590      	push	{r4, r7, lr}
 80126ba:	b093      	sub	sp, #76	@ 0x4c
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80126c2:	4b37      	ldr	r3, [pc, #220]	@ (80127a0 <RCC_SetFlashLatency+0xe8>)
 80126c4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80126c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80126ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80126ce:	4a35      	ldr	r2, [pc, #212]	@ (80127a4 <RCC_SetFlashLatency+0xec>)
 80126d0:	f107 031c 	add.w	r3, r7, #28
 80126d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80126d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80126da:	4b33      	ldr	r3, [pc, #204]	@ (80127a8 <RCC_SetFlashLatency+0xf0>)
 80126dc:	f107 040c 	add.w	r4, r7, #12
 80126e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80126e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80126e6:	2300      	movs	r3, #0
 80126e8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80126f0:	d11a      	bne.n	8012728 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80126f2:	2300      	movs	r3, #0
 80126f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80126f6:	e013      	b.n	8012720 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80126f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80126fa:	009b      	lsls	r3, r3, #2
 80126fc:	3348      	adds	r3, #72	@ 0x48
 80126fe:	443b      	add	r3, r7
 8012700:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8012704:	687a      	ldr	r2, [r7, #4]
 8012706:	429a      	cmp	r2, r3
 8012708:	d807      	bhi.n	801271a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801270a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801270c:	009b      	lsls	r3, r3, #2
 801270e:	3348      	adds	r3, #72	@ 0x48
 8012710:	443b      	add	r3, r7
 8012712:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8012716:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8012718:	e020      	b.n	801275c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801271a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801271c:	3301      	adds	r3, #1
 801271e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012722:	2b03      	cmp	r3, #3
 8012724:	d9e8      	bls.n	80126f8 <RCC_SetFlashLatency+0x40>
 8012726:	e019      	b.n	801275c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8012728:	2300      	movs	r3, #0
 801272a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801272c:	e013      	b.n	8012756 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801272e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012730:	009b      	lsls	r3, r3, #2
 8012732:	3348      	adds	r3, #72	@ 0x48
 8012734:	443b      	add	r3, r7
 8012736:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 801273a:	687a      	ldr	r2, [r7, #4]
 801273c:	429a      	cmp	r2, r3
 801273e:	d807      	bhi.n	8012750 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8012740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012742:	009b      	lsls	r3, r3, #2
 8012744:	3348      	adds	r3, #72	@ 0x48
 8012746:	443b      	add	r3, r7
 8012748:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801274c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 801274e:	e005      	b.n	801275c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8012750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012752:	3301      	adds	r3, #1
 8012754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012758:	2b02      	cmp	r3, #2
 801275a:	d9e8      	bls.n	801272e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 801275c:	4b13      	ldr	r3, [pc, #76]	@ (80127ac <RCC_SetFlashLatency+0xf4>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	f023 0207 	bic.w	r2, r3, #7
 8012764:	4911      	ldr	r1, [pc, #68]	@ (80127ac <RCC_SetFlashLatency+0xf4>)
 8012766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012768:	4313      	orrs	r3, r2
 801276a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801276c:	f7fe fba4 	bl	8010eb8 <HAL_GetTick>
 8012770:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8012772:	e008      	b.n	8012786 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8012774:	f7fe fba0 	bl	8010eb8 <HAL_GetTick>
 8012778:	4602      	mov	r2, r0
 801277a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801277c:	1ad3      	subs	r3, r2, r3
 801277e:	2b02      	cmp	r3, #2
 8012780:	d901      	bls.n	8012786 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8012782:	2303      	movs	r3, #3
 8012784:	e007      	b.n	8012796 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8012786:	4b09      	ldr	r3, [pc, #36]	@ (80127ac <RCC_SetFlashLatency+0xf4>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	f003 0307 	and.w	r3, r3, #7
 801278e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012790:	429a      	cmp	r2, r3
 8012792:	d1ef      	bne.n	8012774 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8012794:	2300      	movs	r3, #0
}
 8012796:	4618      	mov	r0, r3
 8012798:	374c      	adds	r7, #76	@ 0x4c
 801279a:	46bd      	mov	sp, r7
 801279c:	bd90      	pop	{r4, r7, pc}
 801279e:	bf00      	nop
 80127a0:	08014bf0 	.word	0x08014bf0
 80127a4:	08014c00 	.word	0x08014c00
 80127a8:	08014c0c 	.word	0x08014c0c
 80127ac:	58004000 	.word	0x58004000

080127b0 <LL_RCC_LSE_IsEnabled>:
{
 80127b0:	b480      	push	{r7}
 80127b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80127b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80127b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80127bc:	f003 0301 	and.w	r3, r3, #1
 80127c0:	2b01      	cmp	r3, #1
 80127c2:	d101      	bne.n	80127c8 <LL_RCC_LSE_IsEnabled+0x18>
 80127c4:	2301      	movs	r3, #1
 80127c6:	e000      	b.n	80127ca <LL_RCC_LSE_IsEnabled+0x1a>
 80127c8:	2300      	movs	r3, #0
}
 80127ca:	4618      	mov	r0, r3
 80127cc:	46bd      	mov	sp, r7
 80127ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d2:	4770      	bx	lr

080127d4 <LL_RCC_LSE_IsReady>:
{
 80127d4:	b480      	push	{r7}
 80127d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80127d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80127dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80127e0:	f003 0302 	and.w	r3, r3, #2
 80127e4:	2b02      	cmp	r3, #2
 80127e6:	d101      	bne.n	80127ec <LL_RCC_LSE_IsReady+0x18>
 80127e8:	2301      	movs	r3, #1
 80127ea:	e000      	b.n	80127ee <LL_RCC_LSE_IsReady+0x1a>
 80127ec:	2300      	movs	r3, #0
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	46bd      	mov	sp, r7
 80127f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f6:	4770      	bx	lr

080127f8 <LL_RCC_SetRFWKPClockSource>:
{
 80127f8:	b480      	push	{r7}
 80127fa:	b083      	sub	sp, #12
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8012800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012808:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 801280c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	4313      	orrs	r3, r2
 8012814:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8012818:	bf00      	nop
 801281a:	370c      	adds	r7, #12
 801281c:	46bd      	mov	sp, r7
 801281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012822:	4770      	bx	lr

08012824 <LL_RCC_SetSMPSClockSource>:
{
 8012824:	b480      	push	{r7}
 8012826:	b083      	sub	sp, #12
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 801282c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012832:	f023 0203 	bic.w	r2, r3, #3
 8012836:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	4313      	orrs	r3, r2
 801283e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8012840:	bf00      	nop
 8012842:	370c      	adds	r7, #12
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr

0801284c <LL_RCC_SetSMPSPrescaler>:
{
 801284c:	b480      	push	{r7}
 801284e:	b083      	sub	sp, #12
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8012854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801285a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 801285e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	4313      	orrs	r3, r2
 8012866:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8012868:	bf00      	nop
 801286a:	370c      	adds	r7, #12
 801286c:	46bd      	mov	sp, r7
 801286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012872:	4770      	bx	lr

08012874 <LL_RCC_SetUSARTClockSource>:
{
 8012874:	b480      	push	{r7}
 8012876:	b083      	sub	sp, #12
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 801287c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012884:	f023 0203 	bic.w	r2, r3, #3
 8012888:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	4313      	orrs	r3, r2
 8012890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8012894:	bf00      	nop
 8012896:	370c      	adds	r7, #12
 8012898:	46bd      	mov	sp, r7
 801289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289e:	4770      	bx	lr

080128a0 <LL_RCC_SetLPUARTClockSource>:
{
 80128a0:	b480      	push	{r7}
 80128a2:	b083      	sub	sp, #12
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80128a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80128ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80128b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80128b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	4313      	orrs	r3, r2
 80128bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80128c0:	bf00      	nop
 80128c2:	370c      	adds	r7, #12
 80128c4:	46bd      	mov	sp, r7
 80128c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ca:	4770      	bx	lr

080128cc <LL_RCC_SetI2CClockSource>:
{
 80128cc:	b480      	push	{r7}
 80128ce:	b083      	sub	sp, #12
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80128d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80128d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	091b      	lsrs	r3, r3, #4
 80128e0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80128e4:	43db      	mvns	r3, r3
 80128e6:	401a      	ands	r2, r3
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	011b      	lsls	r3, r3, #4
 80128ec:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80128f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80128f4:	4313      	orrs	r3, r2
 80128f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80128fa:	bf00      	nop
 80128fc:	370c      	adds	r7, #12
 80128fe:	46bd      	mov	sp, r7
 8012900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012904:	4770      	bx	lr

08012906 <LL_RCC_SetLPTIMClockSource>:
{
 8012906:	b480      	push	{r7}
 8012908:	b083      	sub	sp, #12
 801290a:	af00      	add	r7, sp, #0
 801290c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801290e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012912:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	0c1b      	lsrs	r3, r3, #16
 801291a:	041b      	lsls	r3, r3, #16
 801291c:	43db      	mvns	r3, r3
 801291e:	401a      	ands	r2, r3
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	041b      	lsls	r3, r3, #16
 8012924:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012928:	4313      	orrs	r3, r2
 801292a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801292e:	bf00      	nop
 8012930:	370c      	adds	r7, #12
 8012932:	46bd      	mov	sp, r7
 8012934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012938:	4770      	bx	lr

0801293a <LL_RCC_SetSAIClockSource>:
{
 801293a:	b480      	push	{r7}
 801293c:	b083      	sub	sp, #12
 801293e:	af00      	add	r7, sp, #0
 8012940:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8012942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801294a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801294e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	4313      	orrs	r3, r2
 8012956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801295a:	bf00      	nop
 801295c:	370c      	adds	r7, #12
 801295e:	46bd      	mov	sp, r7
 8012960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012964:	4770      	bx	lr

08012966 <LL_RCC_SetRNGClockSource>:
{
 8012966:	b480      	push	{r7}
 8012968:	b083      	sub	sp, #12
 801296a:	af00      	add	r7, sp, #0
 801296c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 801296e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012976:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 801297a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	4313      	orrs	r3, r2
 8012982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8012986:	bf00      	nop
 8012988:	370c      	adds	r7, #12
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr

08012992 <LL_RCC_SetCLK48ClockSource>:
{
 8012992:	b480      	push	{r7}
 8012994:	b083      	sub	sp, #12
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 801299a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80129a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80129a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	4313      	orrs	r3, r2
 80129ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80129b2:	bf00      	nop
 80129b4:	370c      	adds	r7, #12
 80129b6:	46bd      	mov	sp, r7
 80129b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129bc:	4770      	bx	lr

080129be <LL_RCC_SetUSBClockSource>:
{
 80129be:	b580      	push	{r7, lr}
 80129c0:	b082      	sub	sp, #8
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f7ff ffe3 	bl	8012992 <LL_RCC_SetCLK48ClockSource>
}
 80129cc:	bf00      	nop
 80129ce:	3708      	adds	r7, #8
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}

080129d4 <LL_RCC_SetADCClockSource>:
{
 80129d4:	b480      	push	{r7}
 80129d6:	b083      	sub	sp, #12
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80129dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80129e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80129e4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80129e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	4313      	orrs	r3, r2
 80129f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80129f4:	bf00      	nop
 80129f6:	370c      	adds	r7, #12
 80129f8:	46bd      	mov	sp, r7
 80129fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fe:	4770      	bx	lr

08012a00 <LL_RCC_SetRTCClockSource>:
{
 8012a00:	b480      	push	{r7}
 8012a02:	b083      	sub	sp, #12
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8012a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012a10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8012a14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	4313      	orrs	r3, r2
 8012a1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8012a20:	bf00      	nop
 8012a22:	370c      	adds	r7, #12
 8012a24:	46bd      	mov	sp, r7
 8012a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2a:	4770      	bx	lr

08012a2c <LL_RCC_GetRTCClockSource>:
{
 8012a2c:	b480      	push	{r7}
 8012a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8012a30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012a38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a44:	4770      	bx	lr

08012a46 <LL_RCC_ForceBackupDomainReset>:
{
 8012a46:	b480      	push	{r7}
 8012a48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8012a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012a52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012a56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012a5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8012a5e:	bf00      	nop
 8012a60:	46bd      	mov	sp, r7
 8012a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a66:	4770      	bx	lr

08012a68 <LL_RCC_ReleaseBackupDomainReset>:
{
 8012a68:	b480      	push	{r7}
 8012a6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8012a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012a74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012a78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8012a80:	bf00      	nop
 8012a82:	46bd      	mov	sp, r7
 8012a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a88:	4770      	bx	lr

08012a8a <LL_RCC_PLLSAI1_Enable>:
{
 8012a8a:	b480      	push	{r7}
 8012a8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8012a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012a98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012a9c:	6013      	str	r3, [r2, #0]
}
 8012a9e:	bf00      	nop
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa6:	4770      	bx	lr

08012aa8 <LL_RCC_PLLSAI1_Disable>:
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8012aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012ab6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012aba:	6013      	str	r3, [r2, #0]
}
 8012abc:	bf00      	nop
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac4:	4770      	bx	lr

08012ac6 <LL_RCC_PLLSAI1_IsReady>:
{
 8012ac6:	b480      	push	{r7}
 8012ac8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8012aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012ad4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012ad8:	d101      	bne.n	8012ade <LL_RCC_PLLSAI1_IsReady+0x18>
 8012ada:	2301      	movs	r3, #1
 8012adc:	e000      	b.n	8012ae0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8012ade:	2300      	movs	r3, #0
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae8:	4770      	bx	lr

08012aea <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012aea:	b580      	push	{r7, lr}
 8012aec:	b088      	sub	sp, #32
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8012af2:	2300      	movs	r3, #0
 8012af4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8012af6:	2300      	movs	r3, #0
 8012af8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d034      	beq.n	8012b70 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b0a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8012b0e:	d021      	beq.n	8012b54 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8012b10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8012b14:	d81b      	bhi.n	8012b4e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012b16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012b1a:	d01d      	beq.n	8012b58 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8012b1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012b20:	d815      	bhi.n	8012b4e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d00b      	beq.n	8012b3e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8012b26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012b2a:	d110      	bne.n	8012b4e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8012b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012b30:	68db      	ldr	r3, [r3, #12]
 8012b32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012b3a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8012b3c:	e00d      	b.n	8012b5a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	3304      	adds	r3, #4
 8012b42:	4618      	mov	r0, r3
 8012b44:	f000 f947 	bl	8012dd6 <RCCEx_PLLSAI1_ConfigNP>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8012b4c:	e005      	b.n	8012b5a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8012b4e:	2301      	movs	r3, #1
 8012b50:	77fb      	strb	r3, [r7, #31]
        break;
 8012b52:	e002      	b.n	8012b5a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8012b54:	bf00      	nop
 8012b56:	e000      	b.n	8012b5a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8012b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012b5a:	7ffb      	ldrb	r3, [r7, #31]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d105      	bne.n	8012b6c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b64:	4618      	mov	r0, r3
 8012b66:	f7ff fee8 	bl	801293a <LL_RCC_SetSAIClockSource>
 8012b6a:	e001      	b.n	8012b70 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b6c:	7ffb      	ldrb	r3, [r7, #31]
 8012b6e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d046      	beq.n	8012c0a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8012b7c:	f7ff ff56 	bl	8012a2c <LL_RCC_GetRTCClockSource>
 8012b80:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012b86:	69ba      	ldr	r2, [r7, #24]
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d03c      	beq.n	8012c06 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8012b8c:	f7fe fc68 	bl	8011460 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d105      	bne.n	8012ba2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7ff ff30 	bl	8012a00 <LL_RCC_SetRTCClockSource>
 8012ba0:	e02e      	b.n	8012c00 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8012ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012baa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8012bac:	f7ff ff4b 	bl	8012a46 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8012bb0:	f7ff ff5a 	bl	8012a68 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012bbe:	4313      	orrs	r3, r2
 8012bc0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8012bc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8012bcc:	f7ff fdf0 	bl	80127b0 <LL_RCC_LSE_IsEnabled>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	2b01      	cmp	r3, #1
 8012bd4:	d114      	bne.n	8012c00 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8012bd6:	f7fe f96f 	bl	8010eb8 <HAL_GetTick>
 8012bda:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8012bdc:	e00b      	b.n	8012bf6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012bde:	f7fe f96b 	bl	8010eb8 <HAL_GetTick>
 8012be2:	4602      	mov	r2, r0
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	1ad3      	subs	r3, r2, r3
 8012be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012bec:	4293      	cmp	r3, r2
 8012bee:	d902      	bls.n	8012bf6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8012bf0:	2303      	movs	r3, #3
 8012bf2:	77fb      	strb	r3, [r7, #31]
              break;
 8012bf4:	e004      	b.n	8012c00 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8012bf6:	f7ff fded 	bl	80127d4 <LL_RCC_LSE_IsReady>
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d1ee      	bne.n	8012bde <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8012c00:	7ffb      	ldrb	r3, [r7, #31]
 8012c02:	77bb      	strb	r3, [r7, #30]
 8012c04:	e001      	b.n	8012c0a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c06:	7ffb      	ldrb	r3, [r7, #31]
 8012c08:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	f003 0301 	and.w	r3, r3, #1
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d004      	beq.n	8012c20 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	699b      	ldr	r3, [r3, #24]
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f7ff fe2a 	bl	8012874 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f003 0302 	and.w	r3, r3, #2
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d004      	beq.n	8012c36 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	69db      	ldr	r3, [r3, #28]
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7ff fe35 	bl	80128a0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	f003 0310 	and.w	r3, r3, #16
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d004      	beq.n	8012c4c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7ff fe5d 	bl	8012906 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f003 0320 	and.w	r3, r3, #32
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d004      	beq.n	8012c62 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f7ff fe52 	bl	8012906 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	f003 0304 	and.w	r3, r3, #4
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d004      	beq.n	8012c78 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6a1b      	ldr	r3, [r3, #32]
 8012c72:	4618      	mov	r0, r3
 8012c74:	f7ff fe2a 	bl	80128cc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	f003 0308 	and.w	r3, r3, #8
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d004      	beq.n	8012c8e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f7ff fe1f 	bl	80128cc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d022      	beq.n	8012ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7ff fe8d 	bl	80129be <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012cac:	d107      	bne.n	8012cbe <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8012cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012cb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012cbc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012cc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012cc6:	d10b      	bne.n	8012ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	3304      	adds	r3, #4
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f000 f8dd 	bl	8012e8c <RCCEx_PLLSAI1_ConfigNQ>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8012cd6:	7ffb      	ldrb	r3, [r7, #31]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d001      	beq.n	8012ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8012cdc:	7ffb      	ldrb	r3, [r7, #31]
 8012cde:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d02b      	beq.n	8012d44 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012cf4:	d008      	beq.n	8012d08 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012cfe:	d003      	beq.n	8012d08 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d105      	bne.n	8012d14 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7ff fe2a 	bl	8012966 <LL_RCC_SetRNGClockSource>
 8012d12:	e00a      	b.n	8012d2a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012d1c:	60fb      	str	r3, [r7, #12]
 8012d1e:	2000      	movs	r0, #0
 8012d20:	f7ff fe21 	bl	8012966 <LL_RCC_SetRNGClockSource>
 8012d24:	68f8      	ldr	r0, [r7, #12]
 8012d26:	f7ff fe34 	bl	8012992 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d2e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8012d32:	d107      	bne.n	8012d44 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8012d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012d38:	68db      	ldr	r3, [r3, #12]
 8012d3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012d3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012d42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d022      	beq.n	8012d96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7ff fe3d 	bl	80129d4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012d62:	d107      	bne.n	8012d74 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8012d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012d68:	68db      	ldr	r3, [r3, #12]
 8012d6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012d72:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012d7c:	d10b      	bne.n	8012d96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	3304      	adds	r3, #4
 8012d82:	4618      	mov	r0, r3
 8012d84:	f000 f8dd 	bl	8012f42 <RCCEx_PLLSAI1_ConfigNR>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8012d8c:	7ffb      	ldrb	r3, [r7, #31]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d001      	beq.n	8012d96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8012d92:	7ffb      	ldrb	r3, [r7, #31]
 8012d94:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d004      	beq.n	8012dac <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7ff fd26 	bl	80127f8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d009      	beq.n	8012dcc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7ff fd45 	bl	801284c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f7ff fd2c 	bl	8012824 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8012dcc:	7fbb      	ldrb	r3, [r7, #30]
}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	3720      	adds	r7, #32
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}

08012dd6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8012dd6:	b580      	push	{r7, lr}
 8012dd8:	b084      	sub	sp, #16
 8012dda:	af00      	add	r7, sp, #0
 8012ddc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012dde:	2300      	movs	r3, #0
 8012de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8012de2:	f7ff fe61 	bl	8012aa8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8012de6:	f7fe f867 	bl	8010eb8 <HAL_GetTick>
 8012dea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8012dec:	e009      	b.n	8012e02 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012dee:	f7fe f863 	bl	8010eb8 <HAL_GetTick>
 8012df2:	4602      	mov	r2, r0
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	1ad3      	subs	r3, r2, r3
 8012df8:	2b02      	cmp	r3, #2
 8012dfa:	d902      	bls.n	8012e02 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8012dfc:	2303      	movs	r3, #3
 8012dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8012e00:	e004      	b.n	8012e0c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8012e02:	f7ff fe60 	bl	8012ac6 <LL_RCC_PLLSAI1_IsReady>
 8012e06:	4603      	mov	r3, r0
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d1f0      	bne.n	8012dee <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8012e0c:	7bfb      	ldrb	r3, [r7, #15]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d137      	bne.n	8012e82 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8012e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012e16:	691b      	ldr	r3, [r3, #16]
 8012e18:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	021b      	lsls	r3, r3, #8
 8012e22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012e26:	4313      	orrs	r3, r2
 8012e28:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8012e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012e2e:	691b      	ldr	r3, [r3, #16]
 8012e30:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	685b      	ldr	r3, [r3, #4]
 8012e38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012e3c:	4313      	orrs	r3, r2
 8012e3e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8012e40:	f7ff fe23 	bl	8012a8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012e44:	f7fe f838 	bl	8010eb8 <HAL_GetTick>
 8012e48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8012e4a:	e009      	b.n	8012e60 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012e4c:	f7fe f834 	bl	8010eb8 <HAL_GetTick>
 8012e50:	4602      	mov	r2, r0
 8012e52:	68bb      	ldr	r3, [r7, #8]
 8012e54:	1ad3      	subs	r3, r2, r3
 8012e56:	2b02      	cmp	r3, #2
 8012e58:	d902      	bls.n	8012e60 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8012e5a:	2303      	movs	r3, #3
 8012e5c:	73fb      	strb	r3, [r7, #15]
        break;
 8012e5e:	e004      	b.n	8012e6a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8012e60:	f7ff fe31 	bl	8012ac6 <LL_RCC_PLLSAI1_IsReady>
 8012e64:	4603      	mov	r3, r0
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	d1f0      	bne.n	8012e4c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8012e6a:	7bfb      	ldrb	r3, [r7, #15]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d108      	bne.n	8012e82 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8012e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012e74:	691a      	ldr	r2, [r3, #16]
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	691b      	ldr	r3, [r3, #16]
 8012e7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012e7e:	4313      	orrs	r3, r2
 8012e80:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8012e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e84:	4618      	mov	r0, r3
 8012e86:	3710      	adds	r7, #16
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}

08012e8c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b084      	sub	sp, #16
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012e94:	2300      	movs	r3, #0
 8012e96:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8012e98:	f7ff fe06 	bl	8012aa8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8012e9c:	f7fe f80c 	bl	8010eb8 <HAL_GetTick>
 8012ea0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8012ea2:	e009      	b.n	8012eb8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012ea4:	f7fe f808 	bl	8010eb8 <HAL_GetTick>
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	1ad3      	subs	r3, r2, r3
 8012eae:	2b02      	cmp	r3, #2
 8012eb0:	d902      	bls.n	8012eb8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8012eb2:	2303      	movs	r3, #3
 8012eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8012eb6:	e004      	b.n	8012ec2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8012eb8:	f7ff fe05 	bl	8012ac6 <LL_RCC_PLLSAI1_IsReady>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d1f0      	bne.n	8012ea4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8012ec2:	7bfb      	ldrb	r3, [r7, #15]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d137      	bne.n	8012f38 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8012ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012ecc:	691b      	ldr	r3, [r3, #16]
 8012ece:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	021b      	lsls	r3, r3, #8
 8012ed8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012edc:	4313      	orrs	r3, r2
 8012ede:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8012ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012ee4:	691b      	ldr	r3, [r3, #16]
 8012ee6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	689b      	ldr	r3, [r3, #8]
 8012eee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012ef2:	4313      	orrs	r3, r2
 8012ef4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8012ef6:	f7ff fdc8 	bl	8012a8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012efa:	f7fd ffdd 	bl	8010eb8 <HAL_GetTick>
 8012efe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8012f00:	e009      	b.n	8012f16 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012f02:	f7fd ffd9 	bl	8010eb8 <HAL_GetTick>
 8012f06:	4602      	mov	r2, r0
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	1ad3      	subs	r3, r2, r3
 8012f0c:	2b02      	cmp	r3, #2
 8012f0e:	d902      	bls.n	8012f16 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8012f10:	2303      	movs	r3, #3
 8012f12:	73fb      	strb	r3, [r7, #15]
        break;
 8012f14:	e004      	b.n	8012f20 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8012f16:	f7ff fdd6 	bl	8012ac6 <LL_RCC_PLLSAI1_IsReady>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	2b01      	cmp	r3, #1
 8012f1e:	d1f0      	bne.n	8012f02 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8012f20:	7bfb      	ldrb	r3, [r7, #15]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d108      	bne.n	8012f38 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8012f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012f2a:	691a      	ldr	r2, [r3, #16]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	691b      	ldr	r3, [r3, #16]
 8012f30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012f34:	4313      	orrs	r3, r2
 8012f36:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8012f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3710      	adds	r7, #16
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}

08012f42 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8012f42:	b580      	push	{r7, lr}
 8012f44:	b084      	sub	sp, #16
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8012f4e:	f7ff fdab 	bl	8012aa8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8012f52:	f7fd ffb1 	bl	8010eb8 <HAL_GetTick>
 8012f56:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8012f58:	e009      	b.n	8012f6e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012f5a:	f7fd ffad 	bl	8010eb8 <HAL_GetTick>
 8012f5e:	4602      	mov	r2, r0
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	1ad3      	subs	r3, r2, r3
 8012f64:	2b02      	cmp	r3, #2
 8012f66:	d902      	bls.n	8012f6e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8012f68:	2303      	movs	r3, #3
 8012f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8012f6c:	e004      	b.n	8012f78 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8012f6e:	f7ff fdaa 	bl	8012ac6 <LL_RCC_PLLSAI1_IsReady>
 8012f72:	4603      	mov	r3, r0
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d1f0      	bne.n	8012f5a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8012f78:	7bfb      	ldrb	r3, [r7, #15]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d137      	bne.n	8012fee <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8012f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012f82:	691b      	ldr	r3, [r3, #16]
 8012f84:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	021b      	lsls	r3, r3, #8
 8012f8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012f92:	4313      	orrs	r3, r2
 8012f94:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8012f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012f9a:	691b      	ldr	r3, [r3, #16]
 8012f9c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	68db      	ldr	r3, [r3, #12]
 8012fa4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012fa8:	4313      	orrs	r3, r2
 8012faa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8012fac:	f7ff fd6d 	bl	8012a8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012fb0:	f7fd ff82 	bl	8010eb8 <HAL_GetTick>
 8012fb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8012fb6:	e009      	b.n	8012fcc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012fb8:	f7fd ff7e 	bl	8010eb8 <HAL_GetTick>
 8012fbc:	4602      	mov	r2, r0
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	1ad3      	subs	r3, r2, r3
 8012fc2:	2b02      	cmp	r3, #2
 8012fc4:	d902      	bls.n	8012fcc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8012fc6:	2303      	movs	r3, #3
 8012fc8:	73fb      	strb	r3, [r7, #15]
        break;
 8012fca:	e004      	b.n	8012fd6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8012fcc:	f7ff fd7b 	bl	8012ac6 <LL_RCC_PLLSAI1_IsReady>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	2b01      	cmp	r3, #1
 8012fd4:	d1f0      	bne.n	8012fb8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8012fd6:	7bfb      	ldrb	r3, [r7, #15]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d108      	bne.n	8012fee <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8012fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012fe0:	691a      	ldr	r2, [r3, #16]
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	691b      	ldr	r3, [r3, #16]
 8012fe6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012fea:	4313      	orrs	r3, r2
 8012fec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8012fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3710      	adds	r7, #16
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}

08012ff8 <LL_RCC_GetUSARTClockSource>:
{
 8012ff8:	b480      	push	{r7}
 8012ffa:	b083      	sub	sp, #12
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8013000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013004:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	4013      	ands	r3, r2
}
 801300c:	4618      	mov	r0, r3
 801300e:	370c      	adds	r7, #12
 8013010:	46bd      	mov	sp, r7
 8013012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013016:	4770      	bx	lr

08013018 <LL_RCC_GetLPUARTClockSource>:
{
 8013018:	b480      	push	{r7}
 801301a:	b083      	sub	sp, #12
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8013020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013024:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	4013      	ands	r3, r2
}
 801302c:	4618      	mov	r0, r3
 801302e:	370c      	adds	r7, #12
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr

08013038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d101      	bne.n	801304a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013046:	2301      	movs	r3, #1
 8013048:	e042      	b.n	80130d0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013050:	2b00      	cmp	r3, #0
 8013052:	d106      	bne.n	8013062 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2200      	movs	r2, #0
 8013058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f7fd fc1d 	bl	801089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	2224      	movs	r2, #36	@ 0x24
 8013066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	681a      	ldr	r2, [r3, #0]
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	f022 0201 	bic.w	r2, r2, #1
 8013078:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801307e:	2b00      	cmp	r3, #0
 8013080:	d002      	beq.n	8013088 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f000 fade 	bl	8013644 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f000 f8b3 	bl	80131f4 <UART_SetConfig>
 801308e:	4603      	mov	r3, r0
 8013090:	2b01      	cmp	r3, #1
 8013092:	d101      	bne.n	8013098 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013094:	2301      	movs	r3, #1
 8013096:	e01b      	b.n	80130d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	685a      	ldr	r2, [r3, #4]
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80130a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	689a      	ldr	r2, [r3, #8]
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80130b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	681a      	ldr	r2, [r3, #0]
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	f042 0201 	orr.w	r2, r2, #1
 80130c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f000 fb5d 	bl	8013788 <UART_CheckIdleState>
 80130ce:	4603      	mov	r3, r0
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3708      	adds	r7, #8
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b08a      	sub	sp, #40	@ 0x28
 80130dc:	af02      	add	r7, sp, #8
 80130de:	60f8      	str	r0, [r7, #12]
 80130e0:	60b9      	str	r1, [r7, #8]
 80130e2:	603b      	str	r3, [r7, #0]
 80130e4:	4613      	mov	r3, r2
 80130e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80130ee:	2b20      	cmp	r3, #32
 80130f0:	d17b      	bne.n	80131ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d002      	beq.n	80130fe <HAL_UART_Transmit+0x26>
 80130f8:	88fb      	ldrh	r3, [r7, #6]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d101      	bne.n	8013102 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80130fe:	2301      	movs	r3, #1
 8013100:	e074      	b.n	80131ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	2200      	movs	r2, #0
 8013106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	2221      	movs	r2, #33	@ 0x21
 801310e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013112:	f7fd fed1 	bl	8010eb8 <HAL_GetTick>
 8013116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	88fa      	ldrh	r2, [r7, #6]
 801311c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	88fa      	ldrh	r2, [r7, #6]
 8013124:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	689b      	ldr	r3, [r3, #8]
 801312c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013130:	d108      	bne.n	8013144 <HAL_UART_Transmit+0x6c>
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	691b      	ldr	r3, [r3, #16]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d104      	bne.n	8013144 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801313a:	2300      	movs	r3, #0
 801313c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	61bb      	str	r3, [r7, #24]
 8013142:	e003      	b.n	801314c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013148:	2300      	movs	r3, #0
 801314a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801314c:	e030      	b.n	80131b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	9300      	str	r3, [sp, #0]
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	2200      	movs	r2, #0
 8013156:	2180      	movs	r1, #128	@ 0x80
 8013158:	68f8      	ldr	r0, [r7, #12]
 801315a:	f000 fbbf 	bl	80138dc <UART_WaitOnFlagUntilTimeout>
 801315e:	4603      	mov	r3, r0
 8013160:	2b00      	cmp	r3, #0
 8013162:	d005      	beq.n	8013170 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	2220      	movs	r2, #32
 8013168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801316c:	2303      	movs	r3, #3
 801316e:	e03d      	b.n	80131ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8013170:	69fb      	ldr	r3, [r7, #28]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d10b      	bne.n	801318e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013176:	69bb      	ldr	r3, [r7, #24]
 8013178:	881b      	ldrh	r3, [r3, #0]
 801317a:	461a      	mov	r2, r3
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013184:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8013186:	69bb      	ldr	r3, [r7, #24]
 8013188:	3302      	adds	r3, #2
 801318a:	61bb      	str	r3, [r7, #24]
 801318c:	e007      	b.n	801319e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801318e:	69fb      	ldr	r3, [r7, #28]
 8013190:	781a      	ldrb	r2, [r3, #0]
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8013198:	69fb      	ldr	r3, [r7, #28]
 801319a:	3301      	adds	r3, #1
 801319c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	3b01      	subs	r3, #1
 80131a8:	b29a      	uxth	r2, r3
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80131b6:	b29b      	uxth	r3, r3
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d1c8      	bne.n	801314e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	9300      	str	r3, [sp, #0]
 80131c0:	697b      	ldr	r3, [r7, #20]
 80131c2:	2200      	movs	r2, #0
 80131c4:	2140      	movs	r1, #64	@ 0x40
 80131c6:	68f8      	ldr	r0, [r7, #12]
 80131c8:	f000 fb88 	bl	80138dc <UART_WaitOnFlagUntilTimeout>
 80131cc:	4603      	mov	r3, r0
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d005      	beq.n	80131de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	2220      	movs	r2, #32
 80131d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80131da:	2303      	movs	r3, #3
 80131dc:	e006      	b.n	80131ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	2220      	movs	r2, #32
 80131e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80131e6:	2300      	movs	r3, #0
 80131e8:	e000      	b.n	80131ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80131ea:	2302      	movs	r3, #2
  }
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	3720      	adds	r7, #32
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bd80      	pop	{r7, pc}

080131f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80131f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80131f8:	b08c      	sub	sp, #48	@ 0x30
 80131fa:	af00      	add	r7, sp, #0
 80131fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80131fe:	2300      	movs	r3, #0
 8013200:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	689a      	ldr	r2, [r3, #8]
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	691b      	ldr	r3, [r3, #16]
 801320c:	431a      	orrs	r2, r3
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	695b      	ldr	r3, [r3, #20]
 8013212:	431a      	orrs	r2, r3
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	69db      	ldr	r3, [r3, #28]
 8013218:	4313      	orrs	r3, r2
 801321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801321c:	697b      	ldr	r3, [r7, #20]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	681a      	ldr	r2, [r3, #0]
 8013222:	4baf      	ldr	r3, [pc, #700]	@ (80134e0 <UART_SetConfig+0x2ec>)
 8013224:	4013      	ands	r3, r2
 8013226:	697a      	ldr	r2, [r7, #20]
 8013228:	6812      	ldr	r2, [r2, #0]
 801322a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801322c:	430b      	orrs	r3, r1
 801322e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013230:	697b      	ldr	r3, [r7, #20]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801323a:	697b      	ldr	r3, [r7, #20]
 801323c:	68da      	ldr	r2, [r3, #12]
 801323e:	697b      	ldr	r3, [r7, #20]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	430a      	orrs	r2, r1
 8013244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	699b      	ldr	r3, [r3, #24]
 801324a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801324c:	697b      	ldr	r3, [r7, #20]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	4aa4      	ldr	r2, [pc, #656]	@ (80134e4 <UART_SetConfig+0x2f0>)
 8013252:	4293      	cmp	r3, r2
 8013254:	d004      	beq.n	8013260 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013256:	697b      	ldr	r3, [r7, #20]
 8013258:	6a1b      	ldr	r3, [r3, #32]
 801325a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801325c:	4313      	orrs	r3, r2
 801325e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013260:	697b      	ldr	r3, [r7, #20]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	689b      	ldr	r3, [r3, #8]
 8013266:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801326a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 801326e:	697a      	ldr	r2, [r7, #20]
 8013270:	6812      	ldr	r2, [r2, #0]
 8013272:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013274:	430b      	orrs	r3, r1
 8013276:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801327e:	f023 010f 	bic.w	r1, r3, #15
 8013282:	697b      	ldr	r3, [r7, #20]
 8013284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	430a      	orrs	r2, r1
 801328c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801328e:	697b      	ldr	r3, [r7, #20]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	4a95      	ldr	r2, [pc, #596]	@ (80134e8 <UART_SetConfig+0x2f4>)
 8013294:	4293      	cmp	r3, r2
 8013296:	d125      	bne.n	80132e4 <UART_SetConfig+0xf0>
 8013298:	2003      	movs	r0, #3
 801329a:	f7ff fead 	bl	8012ff8 <LL_RCC_GetUSARTClockSource>
 801329e:	4603      	mov	r3, r0
 80132a0:	2b03      	cmp	r3, #3
 80132a2:	d81b      	bhi.n	80132dc <UART_SetConfig+0xe8>
 80132a4:	a201      	add	r2, pc, #4	@ (adr r2, 80132ac <UART_SetConfig+0xb8>)
 80132a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132aa:	bf00      	nop
 80132ac:	080132bd 	.word	0x080132bd
 80132b0:	080132cd 	.word	0x080132cd
 80132b4:	080132c5 	.word	0x080132c5
 80132b8:	080132d5 	.word	0x080132d5
 80132bc:	2301      	movs	r3, #1
 80132be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80132c2:	e042      	b.n	801334a <UART_SetConfig+0x156>
 80132c4:	2302      	movs	r3, #2
 80132c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80132ca:	e03e      	b.n	801334a <UART_SetConfig+0x156>
 80132cc:	2304      	movs	r3, #4
 80132ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80132d2:	e03a      	b.n	801334a <UART_SetConfig+0x156>
 80132d4:	2308      	movs	r3, #8
 80132d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80132da:	e036      	b.n	801334a <UART_SetConfig+0x156>
 80132dc:	2310      	movs	r3, #16
 80132de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80132e2:	e032      	b.n	801334a <UART_SetConfig+0x156>
 80132e4:	697b      	ldr	r3, [r7, #20]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	4a7e      	ldr	r2, [pc, #504]	@ (80134e4 <UART_SetConfig+0x2f0>)
 80132ea:	4293      	cmp	r3, r2
 80132ec:	d12a      	bne.n	8013344 <UART_SetConfig+0x150>
 80132ee:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80132f2:	f7ff fe91 	bl	8013018 <LL_RCC_GetLPUARTClockSource>
 80132f6:	4603      	mov	r3, r0
 80132f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80132fc:	d01a      	beq.n	8013334 <UART_SetConfig+0x140>
 80132fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8013302:	d81b      	bhi.n	801333c <UART_SetConfig+0x148>
 8013304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013308:	d00c      	beq.n	8013324 <UART_SetConfig+0x130>
 801330a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801330e:	d815      	bhi.n	801333c <UART_SetConfig+0x148>
 8013310:	2b00      	cmp	r3, #0
 8013312:	d003      	beq.n	801331c <UART_SetConfig+0x128>
 8013314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013318:	d008      	beq.n	801332c <UART_SetConfig+0x138>
 801331a:	e00f      	b.n	801333c <UART_SetConfig+0x148>
 801331c:	2300      	movs	r3, #0
 801331e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013322:	e012      	b.n	801334a <UART_SetConfig+0x156>
 8013324:	2302      	movs	r3, #2
 8013326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801332a:	e00e      	b.n	801334a <UART_SetConfig+0x156>
 801332c:	2304      	movs	r3, #4
 801332e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013332:	e00a      	b.n	801334a <UART_SetConfig+0x156>
 8013334:	2308      	movs	r3, #8
 8013336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801333a:	e006      	b.n	801334a <UART_SetConfig+0x156>
 801333c:	2310      	movs	r3, #16
 801333e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013342:	e002      	b.n	801334a <UART_SetConfig+0x156>
 8013344:	2310      	movs	r3, #16
 8013346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	4a65      	ldr	r2, [pc, #404]	@ (80134e4 <UART_SetConfig+0x2f0>)
 8013350:	4293      	cmp	r3, r2
 8013352:	f040 8097 	bne.w	8013484 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013356:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801335a:	2b08      	cmp	r3, #8
 801335c:	d823      	bhi.n	80133a6 <UART_SetConfig+0x1b2>
 801335e:	a201      	add	r2, pc, #4	@ (adr r2, 8013364 <UART_SetConfig+0x170>)
 8013360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013364:	08013389 	.word	0x08013389
 8013368:	080133a7 	.word	0x080133a7
 801336c:	08013391 	.word	0x08013391
 8013370:	080133a7 	.word	0x080133a7
 8013374:	08013397 	.word	0x08013397
 8013378:	080133a7 	.word	0x080133a7
 801337c:	080133a7 	.word	0x080133a7
 8013380:	080133a7 	.word	0x080133a7
 8013384:	0801339f 	.word	0x0801339f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013388:	f7ff f932 	bl	80125f0 <HAL_RCC_GetPCLK1Freq>
 801338c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801338e:	e010      	b.n	80133b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013390:	4b56      	ldr	r3, [pc, #344]	@ (80134ec <UART_SetConfig+0x2f8>)
 8013392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013394:	e00d      	b.n	80133b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013396:	f7ff f8ab 	bl	80124f0 <HAL_RCC_GetSysClockFreq>
 801339a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801339c:	e009      	b.n	80133b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801339e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80133a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80133a4:	e005      	b.n	80133b2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80133a6:	2300      	movs	r3, #0
 80133a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80133aa:	2301      	movs	r3, #1
 80133ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80133b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80133b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	f000 812b 	beq.w	8013610 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80133ba:	697b      	ldr	r3, [r7, #20]
 80133bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133be:	4a4c      	ldr	r2, [pc, #304]	@ (80134f0 <UART_SetConfig+0x2fc>)
 80133c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133c4:	461a      	mov	r2, r3
 80133c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80133cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	685a      	ldr	r2, [r3, #4]
 80133d2:	4613      	mov	r3, r2
 80133d4:	005b      	lsls	r3, r3, #1
 80133d6:	4413      	add	r3, r2
 80133d8:	69ba      	ldr	r2, [r7, #24]
 80133da:	429a      	cmp	r2, r3
 80133dc:	d305      	bcc.n	80133ea <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	685b      	ldr	r3, [r3, #4]
 80133e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80133e4:	69ba      	ldr	r2, [r7, #24]
 80133e6:	429a      	cmp	r2, r3
 80133e8:	d903      	bls.n	80133f2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80133ea:	2301      	movs	r3, #1
 80133ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80133f0:	e10e      	b.n	8013610 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80133f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133f4:	2200      	movs	r2, #0
 80133f6:	60bb      	str	r3, [r7, #8]
 80133f8:	60fa      	str	r2, [r7, #12]
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133fe:	4a3c      	ldr	r2, [pc, #240]	@ (80134f0 <UART_SetConfig+0x2fc>)
 8013400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013404:	b29b      	uxth	r3, r3
 8013406:	2200      	movs	r2, #0
 8013408:	603b      	str	r3, [r7, #0]
 801340a:	607a      	str	r2, [r7, #4]
 801340c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013410:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013414:	f7fc ff04 	bl	8010220 <__aeabi_uldivmod>
 8013418:	4602      	mov	r2, r0
 801341a:	460b      	mov	r3, r1
 801341c:	4610      	mov	r0, r2
 801341e:	4619      	mov	r1, r3
 8013420:	f04f 0200 	mov.w	r2, #0
 8013424:	f04f 0300 	mov.w	r3, #0
 8013428:	020b      	lsls	r3, r1, #8
 801342a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801342e:	0202      	lsls	r2, r0, #8
 8013430:	6979      	ldr	r1, [r7, #20]
 8013432:	6849      	ldr	r1, [r1, #4]
 8013434:	0849      	lsrs	r1, r1, #1
 8013436:	2000      	movs	r0, #0
 8013438:	460c      	mov	r4, r1
 801343a:	4605      	mov	r5, r0
 801343c:	eb12 0804 	adds.w	r8, r2, r4
 8013440:	eb43 0905 	adc.w	r9, r3, r5
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	685b      	ldr	r3, [r3, #4]
 8013448:	2200      	movs	r2, #0
 801344a:	469a      	mov	sl, r3
 801344c:	4693      	mov	fp, r2
 801344e:	4652      	mov	r2, sl
 8013450:	465b      	mov	r3, fp
 8013452:	4640      	mov	r0, r8
 8013454:	4649      	mov	r1, r9
 8013456:	f7fc fee3 	bl	8010220 <__aeabi_uldivmod>
 801345a:	4602      	mov	r2, r0
 801345c:	460b      	mov	r3, r1
 801345e:	4613      	mov	r3, r2
 8013460:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013462:	6a3b      	ldr	r3, [r7, #32]
 8013464:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013468:	d308      	bcc.n	801347c <UART_SetConfig+0x288>
 801346a:	6a3b      	ldr	r3, [r7, #32]
 801346c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013470:	d204      	bcs.n	801347c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	6a3a      	ldr	r2, [r7, #32]
 8013478:	60da      	str	r2, [r3, #12]
 801347a:	e0c9      	b.n	8013610 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801347c:	2301      	movs	r3, #1
 801347e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8013482:	e0c5      	b.n	8013610 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	69db      	ldr	r3, [r3, #28]
 8013488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801348c:	d16d      	bne.n	801356a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801348e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013492:	3b01      	subs	r3, #1
 8013494:	2b07      	cmp	r3, #7
 8013496:	d82d      	bhi.n	80134f4 <UART_SetConfig+0x300>
 8013498:	a201      	add	r2, pc, #4	@ (adr r2, 80134a0 <UART_SetConfig+0x2ac>)
 801349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801349e:	bf00      	nop
 80134a0:	080134c1 	.word	0x080134c1
 80134a4:	080134c9 	.word	0x080134c9
 80134a8:	080134f5 	.word	0x080134f5
 80134ac:	080134cf 	.word	0x080134cf
 80134b0:	080134f5 	.word	0x080134f5
 80134b4:	080134f5 	.word	0x080134f5
 80134b8:	080134f5 	.word	0x080134f5
 80134bc:	080134d7 	.word	0x080134d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80134c0:	f7ff f8ac 	bl	801261c <HAL_RCC_GetPCLK2Freq>
 80134c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80134c6:	e01b      	b.n	8013500 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80134c8:	4b08      	ldr	r3, [pc, #32]	@ (80134ec <UART_SetConfig+0x2f8>)
 80134ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80134cc:	e018      	b.n	8013500 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80134ce:	f7ff f80f 	bl	80124f0 <HAL_RCC_GetSysClockFreq>
 80134d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80134d4:	e014      	b.n	8013500 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80134d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80134da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80134dc:	e010      	b.n	8013500 <UART_SetConfig+0x30c>
 80134de:	bf00      	nop
 80134e0:	cfff69f3 	.word	0xcfff69f3
 80134e4:	40008000 	.word	0x40008000
 80134e8:	40013800 	.word	0x40013800
 80134ec:	00f42400 	.word	0x00f42400
 80134f0:	08014cd0 	.word	0x08014cd0
      default:
        pclk = 0U;
 80134f4:	2300      	movs	r3, #0
 80134f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80134f8:	2301      	movs	r3, #1
 80134fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80134fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013502:	2b00      	cmp	r3, #0
 8013504:	f000 8084 	beq.w	8013610 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801350c:	4a4b      	ldr	r2, [pc, #300]	@ (801363c <UART_SetConfig+0x448>)
 801350e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013512:	461a      	mov	r2, r3
 8013514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013516:	fbb3 f3f2 	udiv	r3, r3, r2
 801351a:	005a      	lsls	r2, r3, #1
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	685b      	ldr	r3, [r3, #4]
 8013520:	085b      	lsrs	r3, r3, #1
 8013522:	441a      	add	r2, r3
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	685b      	ldr	r3, [r3, #4]
 8013528:	fbb2 f3f3 	udiv	r3, r2, r3
 801352c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801352e:	6a3b      	ldr	r3, [r7, #32]
 8013530:	2b0f      	cmp	r3, #15
 8013532:	d916      	bls.n	8013562 <UART_SetConfig+0x36e>
 8013534:	6a3b      	ldr	r3, [r7, #32]
 8013536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801353a:	d212      	bcs.n	8013562 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801353c:	6a3b      	ldr	r3, [r7, #32]
 801353e:	b29b      	uxth	r3, r3
 8013540:	f023 030f 	bic.w	r3, r3, #15
 8013544:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013546:	6a3b      	ldr	r3, [r7, #32]
 8013548:	085b      	lsrs	r3, r3, #1
 801354a:	b29b      	uxth	r3, r3
 801354c:	f003 0307 	and.w	r3, r3, #7
 8013550:	b29a      	uxth	r2, r3
 8013552:	8bfb      	ldrh	r3, [r7, #30]
 8013554:	4313      	orrs	r3, r2
 8013556:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	8bfa      	ldrh	r2, [r7, #30]
 801355e:	60da      	str	r2, [r3, #12]
 8013560:	e056      	b.n	8013610 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8013562:	2301      	movs	r3, #1
 8013564:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8013568:	e052      	b.n	8013610 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801356a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801356e:	3b01      	subs	r3, #1
 8013570:	2b07      	cmp	r3, #7
 8013572:	d822      	bhi.n	80135ba <UART_SetConfig+0x3c6>
 8013574:	a201      	add	r2, pc, #4	@ (adr r2, 801357c <UART_SetConfig+0x388>)
 8013576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801357a:	bf00      	nop
 801357c:	0801359d 	.word	0x0801359d
 8013580:	080135a5 	.word	0x080135a5
 8013584:	080135bb 	.word	0x080135bb
 8013588:	080135ab 	.word	0x080135ab
 801358c:	080135bb 	.word	0x080135bb
 8013590:	080135bb 	.word	0x080135bb
 8013594:	080135bb 	.word	0x080135bb
 8013598:	080135b3 	.word	0x080135b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801359c:	f7ff f83e 	bl	801261c <HAL_RCC_GetPCLK2Freq>
 80135a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80135a2:	e010      	b.n	80135c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80135a4:	4b26      	ldr	r3, [pc, #152]	@ (8013640 <UART_SetConfig+0x44c>)
 80135a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80135a8:	e00d      	b.n	80135c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80135aa:	f7fe ffa1 	bl	80124f0 <HAL_RCC_GetSysClockFreq>
 80135ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80135b0:	e009      	b.n	80135c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80135b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80135b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80135b8:	e005      	b.n	80135c6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80135ba:	2300      	movs	r3, #0
 80135bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80135be:	2301      	movs	r3, #1
 80135c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80135c4:	bf00      	nop
    }

    if (pclk != 0U)
 80135c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d021      	beq.n	8013610 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80135cc:	697b      	ldr	r3, [r7, #20]
 80135ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135d0:	4a1a      	ldr	r2, [pc, #104]	@ (801363c <UART_SetConfig+0x448>)
 80135d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80135d6:	461a      	mov	r2, r3
 80135d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135da:	fbb3 f2f2 	udiv	r2, r3, r2
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	085b      	lsrs	r3, r3, #1
 80135e4:	441a      	add	r2, r3
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	685b      	ldr	r3, [r3, #4]
 80135ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80135ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80135f0:	6a3b      	ldr	r3, [r7, #32]
 80135f2:	2b0f      	cmp	r3, #15
 80135f4:	d909      	bls.n	801360a <UART_SetConfig+0x416>
 80135f6:	6a3b      	ldr	r3, [r7, #32]
 80135f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80135fc:	d205      	bcs.n	801360a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80135fe:	6a3b      	ldr	r3, [r7, #32]
 8013600:	b29a      	uxth	r2, r3
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	60da      	str	r2, [r3, #12]
 8013608:	e002      	b.n	8013610 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801360a:	2301      	movs	r3, #1
 801360c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	2201      	movs	r2, #1
 8013614:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	2201      	movs	r2, #1
 801361c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	2200      	movs	r2, #0
 8013624:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	2200      	movs	r2, #0
 801362a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801362c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8013630:	4618      	mov	r0, r3
 8013632:	3730      	adds	r7, #48	@ 0x30
 8013634:	46bd      	mov	sp, r7
 8013636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801363a:	bf00      	nop
 801363c:	08014cd0 	.word	0x08014cd0
 8013640:	00f42400 	.word	0x00f42400

08013644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013644:	b480      	push	{r7}
 8013646:	b083      	sub	sp, #12
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013650:	f003 0308 	and.w	r3, r3, #8
 8013654:	2b00      	cmp	r3, #0
 8013656:	d00a      	beq.n	801366e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	685b      	ldr	r3, [r3, #4]
 801365e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	430a      	orrs	r2, r1
 801366c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013672:	f003 0301 	and.w	r3, r3, #1
 8013676:	2b00      	cmp	r3, #0
 8013678:	d00a      	beq.n	8013690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	685b      	ldr	r3, [r3, #4]
 8013680:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	430a      	orrs	r2, r1
 801368e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013694:	f003 0302 	and.w	r3, r3, #2
 8013698:	2b00      	cmp	r3, #0
 801369a:	d00a      	beq.n	80136b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	685b      	ldr	r3, [r3, #4]
 80136a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	430a      	orrs	r2, r1
 80136b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136b6:	f003 0304 	and.w	r3, r3, #4
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d00a      	beq.n	80136d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	430a      	orrs	r2, r1
 80136d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136d8:	f003 0310 	and.w	r3, r3, #16
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d00a      	beq.n	80136f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	689b      	ldr	r3, [r3, #8]
 80136e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	430a      	orrs	r2, r1
 80136f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136fa:	f003 0320 	and.w	r3, r3, #32
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d00a      	beq.n	8013718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	689b      	ldr	r3, [r3, #8]
 8013708:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	430a      	orrs	r2, r1
 8013716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801371c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013720:	2b00      	cmp	r3, #0
 8013722:	d01a      	beq.n	801375a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	685b      	ldr	r3, [r3, #4]
 801372a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	430a      	orrs	r2, r1
 8013738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801373e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013742:	d10a      	bne.n	801375a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	685b      	ldr	r3, [r3, #4]
 801374a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	430a      	orrs	r2, r1
 8013758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801375e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013762:	2b00      	cmp	r3, #0
 8013764:	d00a      	beq.n	801377c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	685b      	ldr	r3, [r3, #4]
 801376c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	430a      	orrs	r2, r1
 801377a:	605a      	str	r2, [r3, #4]
  }
}
 801377c:	bf00      	nop
 801377e:	370c      	adds	r7, #12
 8013780:	46bd      	mov	sp, r7
 8013782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013786:	4770      	bx	lr

08013788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b098      	sub	sp, #96	@ 0x60
 801378c:	af02      	add	r7, sp, #8
 801378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	2200      	movs	r2, #0
 8013794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013798:	f7fd fb8e 	bl	8010eb8 <HAL_GetTick>
 801379c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	f003 0308 	and.w	r3, r3, #8
 80137a8:	2b08      	cmp	r3, #8
 80137aa:	d12f      	bne.n	801380c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80137ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80137b0:	9300      	str	r3, [sp, #0]
 80137b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137b4:	2200      	movs	r2, #0
 80137b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80137ba:	6878      	ldr	r0, [r7, #4]
 80137bc:	f000 f88e 	bl	80138dc <UART_WaitOnFlagUntilTimeout>
 80137c0:	4603      	mov	r3, r0
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d022      	beq.n	801380c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ce:	e853 3f00 	ldrex	r3, [r3]
 80137d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80137d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80137da:	653b      	str	r3, [r7, #80]	@ 0x50
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	461a      	mov	r2, r3
 80137e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80137e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80137e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80137ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80137ec:	e841 2300 	strex	r3, r2, [r1]
 80137f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80137f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d1e6      	bne.n	80137c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2220      	movs	r2, #32
 80137fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2200      	movs	r2, #0
 8013804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013808:	2303      	movs	r3, #3
 801380a:	e063      	b.n	80138d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	f003 0304 	and.w	r3, r3, #4
 8013816:	2b04      	cmp	r3, #4
 8013818:	d149      	bne.n	80138ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801381a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801381e:	9300      	str	r3, [sp, #0]
 8013820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013822:	2200      	movs	r2, #0
 8013824:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013828:	6878      	ldr	r0, [r7, #4]
 801382a:	f000 f857 	bl	80138dc <UART_WaitOnFlagUntilTimeout>
 801382e:	4603      	mov	r3, r0
 8013830:	2b00      	cmp	r3, #0
 8013832:	d03c      	beq.n	80138ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801383c:	e853 3f00 	ldrex	r3, [r3]
 8013840:	623b      	str	r3, [r7, #32]
   return(result);
 8013842:	6a3b      	ldr	r3, [r7, #32]
 8013844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013848:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	461a      	mov	r2, r3
 8013850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013852:	633b      	str	r3, [r7, #48]	@ 0x30
 8013854:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013856:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801385a:	e841 2300 	strex	r3, r2, [r1]
 801385e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013862:	2b00      	cmp	r3, #0
 8013864:	d1e6      	bne.n	8013834 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	3308      	adds	r3, #8
 801386c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	e853 3f00 	ldrex	r3, [r3]
 8013874:	60fb      	str	r3, [r7, #12]
   return(result);
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	f023 0301 	bic.w	r3, r3, #1
 801387c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	3308      	adds	r3, #8
 8013884:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013886:	61fa      	str	r2, [r7, #28]
 8013888:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801388a:	69b9      	ldr	r1, [r7, #24]
 801388c:	69fa      	ldr	r2, [r7, #28]
 801388e:	e841 2300 	strex	r3, r2, [r1]
 8013892:	617b      	str	r3, [r7, #20]
   return(result);
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d1e5      	bne.n	8013866 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2220      	movs	r2, #32
 801389e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	2200      	movs	r2, #0
 80138a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80138aa:	2303      	movs	r3, #3
 80138ac:	e012      	b.n	80138d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	2220      	movs	r2, #32
 80138b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	2220      	movs	r2, #32
 80138ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	2200      	movs	r2, #0
 80138c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	2200      	movs	r2, #0
 80138c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	2200      	movs	r2, #0
 80138ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80138d2:	2300      	movs	r3, #0
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3758      	adds	r7, #88	@ 0x58
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd80      	pop	{r7, pc}

080138dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b084      	sub	sp, #16
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	60f8      	str	r0, [r7, #12]
 80138e4:	60b9      	str	r1, [r7, #8]
 80138e6:	603b      	str	r3, [r7, #0]
 80138e8:	4613      	mov	r3, r2
 80138ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80138ec:	e04f      	b.n	801398e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80138f4:	d04b      	beq.n	801398e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80138f6:	f7fd fadf 	bl	8010eb8 <HAL_GetTick>
 80138fa:	4602      	mov	r2, r0
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	1ad3      	subs	r3, r2, r3
 8013900:	69ba      	ldr	r2, [r7, #24]
 8013902:	429a      	cmp	r2, r3
 8013904:	d302      	bcc.n	801390c <UART_WaitOnFlagUntilTimeout+0x30>
 8013906:	69bb      	ldr	r3, [r7, #24]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d101      	bne.n	8013910 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801390c:	2303      	movs	r3, #3
 801390e:	e04e      	b.n	80139ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	f003 0304 	and.w	r3, r3, #4
 801391a:	2b00      	cmp	r3, #0
 801391c:	d037      	beq.n	801398e <UART_WaitOnFlagUntilTimeout+0xb2>
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	2b80      	cmp	r3, #128	@ 0x80
 8013922:	d034      	beq.n	801398e <UART_WaitOnFlagUntilTimeout+0xb2>
 8013924:	68bb      	ldr	r3, [r7, #8]
 8013926:	2b40      	cmp	r3, #64	@ 0x40
 8013928:	d031      	beq.n	801398e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	69db      	ldr	r3, [r3, #28]
 8013930:	f003 0308 	and.w	r3, r3, #8
 8013934:	2b08      	cmp	r3, #8
 8013936:	d110      	bne.n	801395a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	2208      	movs	r2, #8
 801393e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013940:	68f8      	ldr	r0, [r7, #12]
 8013942:	f000 f838 	bl	80139b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	2208      	movs	r2, #8
 801394a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	2200      	movs	r2, #0
 8013952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013956:	2301      	movs	r3, #1
 8013958:	e029      	b.n	80139ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	69db      	ldr	r3, [r3, #28]
 8013960:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013968:	d111      	bne.n	801398e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013972:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013974:	68f8      	ldr	r0, [r7, #12]
 8013976:	f000 f81e 	bl	80139b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	2220      	movs	r2, #32
 801397e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	2200      	movs	r2, #0
 8013986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801398a:	2303      	movs	r3, #3
 801398c:	e00f      	b.n	80139ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	69da      	ldr	r2, [r3, #28]
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	4013      	ands	r3, r2
 8013998:	68ba      	ldr	r2, [r7, #8]
 801399a:	429a      	cmp	r2, r3
 801399c:	bf0c      	ite	eq
 801399e:	2301      	moveq	r3, #1
 80139a0:	2300      	movne	r3, #0
 80139a2:	b2db      	uxtb	r3, r3
 80139a4:	461a      	mov	r2, r3
 80139a6:	79fb      	ldrb	r3, [r7, #7]
 80139a8:	429a      	cmp	r2, r3
 80139aa:	d0a0      	beq.n	80138ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80139ac:	2300      	movs	r3, #0
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	3710      	adds	r7, #16
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}

080139b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80139b6:	b480      	push	{r7}
 80139b8:	b095      	sub	sp, #84	@ 0x54
 80139ba:	af00      	add	r7, sp, #0
 80139bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139c6:	e853 3f00 	ldrex	r3, [r3]
 80139ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80139cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80139d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	461a      	mov	r2, r3
 80139da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80139de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80139e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80139e4:	e841 2300 	strex	r3, r2, [r1]
 80139e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80139ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d1e6      	bne.n	80139be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	3308      	adds	r3, #8
 80139f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139f8:	6a3b      	ldr	r3, [r7, #32]
 80139fa:	e853 3f00 	ldrex	r3, [r3]
 80139fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8013a00:	69fb      	ldr	r3, [r7, #28]
 8013a02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013a06:	f023 0301 	bic.w	r3, r3, #1
 8013a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	3308      	adds	r3, #8
 8013a12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013a14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a1c:	e841 2300 	strex	r3, r2, [r1]
 8013a20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d1e3      	bne.n	80139f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a2c:	2b01      	cmp	r3, #1
 8013a2e:	d118      	bne.n	8013a62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	e853 3f00 	ldrex	r3, [r3]
 8013a3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8013a3e:	68bb      	ldr	r3, [r7, #8]
 8013a40:	f023 0310 	bic.w	r3, r3, #16
 8013a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	461a      	mov	r2, r3
 8013a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a4e:	61bb      	str	r3, [r7, #24]
 8013a50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a52:	6979      	ldr	r1, [r7, #20]
 8013a54:	69ba      	ldr	r2, [r7, #24]
 8013a56:	e841 2300 	strex	r3, r2, [r1]
 8013a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d1e6      	bne.n	8013a30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	2220      	movs	r2, #32
 8013a66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	2200      	movs	r2, #0
 8013a74:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013a76:	bf00      	nop
 8013a78:	3754      	adds	r7, #84	@ 0x54
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr

08013a82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013a82:	b480      	push	{r7}
 8013a84:	b085      	sub	sp, #20
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013a90:	2b01      	cmp	r3, #1
 8013a92:	d101      	bne.n	8013a98 <HAL_UARTEx_DisableFifoMode+0x16>
 8013a94:	2302      	movs	r3, #2
 8013a96:	e027      	b.n	8013ae8 <HAL_UARTEx_DisableFifoMode+0x66>
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2201      	movs	r2, #1
 8013a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2224      	movs	r2, #36	@ 0x24
 8013aa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	681a      	ldr	r2, [r3, #0]
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	f022 0201 	bic.w	r2, r2, #1
 8013abe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8013ac6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2200      	movs	r2, #0
 8013acc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	68fa      	ldr	r2, [r7, #12]
 8013ad4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	2220      	movs	r2, #32
 8013ada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013ae6:	2300      	movs	r3, #0
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3714      	adds	r7, #20
 8013aec:	46bd      	mov	sp, r7
 8013aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af2:	4770      	bx	lr

08013af4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b084      	sub	sp, #16
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013b04:	2b01      	cmp	r3, #1
 8013b06:	d101      	bne.n	8013b0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013b08:	2302      	movs	r3, #2
 8013b0a:	e02d      	b.n	8013b68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2201      	movs	r2, #1
 8013b10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2224      	movs	r2, #36	@ 0x24
 8013b18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	681a      	ldr	r2, [r3, #0]
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	f022 0201 	bic.w	r2, r2, #1
 8013b32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	689b      	ldr	r3, [r3, #8]
 8013b3a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	683a      	ldr	r2, [r7, #0]
 8013b44:	430a      	orrs	r2, r1
 8013b46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	f000 f84f 	bl	8013bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	68fa      	ldr	r2, [r7, #12]
 8013b54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2220      	movs	r2, #32
 8013b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2200      	movs	r2, #0
 8013b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013b66:	2300      	movs	r3, #0
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	3710      	adds	r7, #16
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}

08013b70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b084      	sub	sp, #16
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
 8013b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013b80:	2b01      	cmp	r3, #1
 8013b82:	d101      	bne.n	8013b88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013b84:	2302      	movs	r3, #2
 8013b86:	e02d      	b.n	8013be4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	2201      	movs	r2, #1
 8013b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	2224      	movs	r2, #36	@ 0x24
 8013b94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	681a      	ldr	r2, [r3, #0]
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	f022 0201 	bic.w	r2, r2, #1
 8013bae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	689b      	ldr	r3, [r3, #8]
 8013bb6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	683a      	ldr	r2, [r7, #0]
 8013bc0:	430a      	orrs	r2, r1
 8013bc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f000 f811 	bl	8013bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	68fa      	ldr	r2, [r7, #12]
 8013bd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	2220      	movs	r2, #32
 8013bd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	2200      	movs	r2, #0
 8013bde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013be2:	2300      	movs	r3, #0
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	3710      	adds	r7, #16
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}

08013bec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013bec:	b480      	push	{r7}
 8013bee:	b085      	sub	sp, #20
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d108      	bne.n	8013c0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2201      	movs	r2, #1
 8013c00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	2201      	movs	r2, #1
 8013c08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013c0c:	e031      	b.n	8013c72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013c0e:	2308      	movs	r3, #8
 8013c10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013c12:	2308      	movs	r3, #8
 8013c14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	689b      	ldr	r3, [r3, #8]
 8013c1c:	0e5b      	lsrs	r3, r3, #25
 8013c1e:	b2db      	uxtb	r3, r3
 8013c20:	f003 0307 	and.w	r3, r3, #7
 8013c24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	689b      	ldr	r3, [r3, #8]
 8013c2c:	0f5b      	lsrs	r3, r3, #29
 8013c2e:	b2db      	uxtb	r3, r3
 8013c30:	f003 0307 	and.w	r3, r3, #7
 8013c34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013c36:	7bbb      	ldrb	r3, [r7, #14]
 8013c38:	7b3a      	ldrb	r2, [r7, #12]
 8013c3a:	4911      	ldr	r1, [pc, #68]	@ (8013c80 <UARTEx_SetNbDataToProcess+0x94>)
 8013c3c:	5c8a      	ldrb	r2, [r1, r2]
 8013c3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013c42:	7b3a      	ldrb	r2, [r7, #12]
 8013c44:	490f      	ldr	r1, [pc, #60]	@ (8013c84 <UARTEx_SetNbDataToProcess+0x98>)
 8013c46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013c48:	fb93 f3f2 	sdiv	r3, r3, r2
 8013c4c:	b29a      	uxth	r2, r3
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013c54:	7bfb      	ldrb	r3, [r7, #15]
 8013c56:	7b7a      	ldrb	r2, [r7, #13]
 8013c58:	4909      	ldr	r1, [pc, #36]	@ (8013c80 <UARTEx_SetNbDataToProcess+0x94>)
 8013c5a:	5c8a      	ldrb	r2, [r1, r2]
 8013c5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013c60:	7b7a      	ldrb	r2, [r7, #13]
 8013c62:	4908      	ldr	r1, [pc, #32]	@ (8013c84 <UARTEx_SetNbDataToProcess+0x98>)
 8013c64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013c66:	fb93 f3f2 	sdiv	r3, r3, r2
 8013c6a:	b29a      	uxth	r2, r3
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8013c72:	bf00      	nop
 8013c74:	3714      	adds	r7, #20
 8013c76:	46bd      	mov	sp, r7
 8013c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7c:	4770      	bx	lr
 8013c7e:	bf00      	nop
 8013c80:	08014ce8 	.word	0x08014ce8
 8013c84:	08014cf0 	.word	0x08014cf0

08013c88 <std>:
 8013c88:	2300      	movs	r3, #0
 8013c8a:	b510      	push	{r4, lr}
 8013c8c:	4604      	mov	r4, r0
 8013c8e:	e9c0 3300 	strd	r3, r3, [r0]
 8013c92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c96:	6083      	str	r3, [r0, #8]
 8013c98:	8181      	strh	r1, [r0, #12]
 8013c9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8013c9c:	81c2      	strh	r2, [r0, #14]
 8013c9e:	6183      	str	r3, [r0, #24]
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	2208      	movs	r2, #8
 8013ca4:	305c      	adds	r0, #92	@ 0x5c
 8013ca6:	f000 f9f9 	bl	801409c <memset>
 8013caa:	4b0d      	ldr	r3, [pc, #52]	@ (8013ce0 <std+0x58>)
 8013cac:	6263      	str	r3, [r4, #36]	@ 0x24
 8013cae:	4b0d      	ldr	r3, [pc, #52]	@ (8013ce4 <std+0x5c>)
 8013cb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8013ce8 <std+0x60>)
 8013cb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8013cec <std+0x64>)
 8013cb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8013cba:	4b0d      	ldr	r3, [pc, #52]	@ (8013cf0 <std+0x68>)
 8013cbc:	6224      	str	r4, [r4, #32]
 8013cbe:	429c      	cmp	r4, r3
 8013cc0:	d006      	beq.n	8013cd0 <std+0x48>
 8013cc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013cc6:	4294      	cmp	r4, r2
 8013cc8:	d002      	beq.n	8013cd0 <std+0x48>
 8013cca:	33d0      	adds	r3, #208	@ 0xd0
 8013ccc:	429c      	cmp	r4, r3
 8013cce:	d105      	bne.n	8013cdc <std+0x54>
 8013cd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cd8:	f000 ba58 	b.w	801418c <__retarget_lock_init_recursive>
 8013cdc:	bd10      	pop	{r4, pc}
 8013cde:	bf00      	nop
 8013ce0:	08013eed 	.word	0x08013eed
 8013ce4:	08013f0f 	.word	0x08013f0f
 8013ce8:	08013f47 	.word	0x08013f47
 8013cec:	08013f6b 	.word	0x08013f6b
 8013cf0:	20000144 	.word	0x20000144

08013cf4 <stdio_exit_handler>:
 8013cf4:	4a02      	ldr	r2, [pc, #8]	@ (8013d00 <stdio_exit_handler+0xc>)
 8013cf6:	4903      	ldr	r1, [pc, #12]	@ (8013d04 <stdio_exit_handler+0x10>)
 8013cf8:	4803      	ldr	r0, [pc, #12]	@ (8013d08 <stdio_exit_handler+0x14>)
 8013cfa:	f000 b869 	b.w	8013dd0 <_fwalk_sglue>
 8013cfe:	bf00      	nop
 8013d00:	20000030 	.word	0x20000030
 8013d04:	08014a29 	.word	0x08014a29
 8013d08:	20000040 	.word	0x20000040

08013d0c <cleanup_stdio>:
 8013d0c:	6841      	ldr	r1, [r0, #4]
 8013d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8013d40 <cleanup_stdio+0x34>)
 8013d10:	4299      	cmp	r1, r3
 8013d12:	b510      	push	{r4, lr}
 8013d14:	4604      	mov	r4, r0
 8013d16:	d001      	beq.n	8013d1c <cleanup_stdio+0x10>
 8013d18:	f000 fe86 	bl	8014a28 <_fflush_r>
 8013d1c:	68a1      	ldr	r1, [r4, #8]
 8013d1e:	4b09      	ldr	r3, [pc, #36]	@ (8013d44 <cleanup_stdio+0x38>)
 8013d20:	4299      	cmp	r1, r3
 8013d22:	d002      	beq.n	8013d2a <cleanup_stdio+0x1e>
 8013d24:	4620      	mov	r0, r4
 8013d26:	f000 fe7f 	bl	8014a28 <_fflush_r>
 8013d2a:	68e1      	ldr	r1, [r4, #12]
 8013d2c:	4b06      	ldr	r3, [pc, #24]	@ (8013d48 <cleanup_stdio+0x3c>)
 8013d2e:	4299      	cmp	r1, r3
 8013d30:	d004      	beq.n	8013d3c <cleanup_stdio+0x30>
 8013d32:	4620      	mov	r0, r4
 8013d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d38:	f000 be76 	b.w	8014a28 <_fflush_r>
 8013d3c:	bd10      	pop	{r4, pc}
 8013d3e:	bf00      	nop
 8013d40:	20000144 	.word	0x20000144
 8013d44:	200001ac 	.word	0x200001ac
 8013d48:	20000214 	.word	0x20000214

08013d4c <global_stdio_init.part.0>:
 8013d4c:	b510      	push	{r4, lr}
 8013d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8013d7c <global_stdio_init.part.0+0x30>)
 8013d50:	4c0b      	ldr	r4, [pc, #44]	@ (8013d80 <global_stdio_init.part.0+0x34>)
 8013d52:	4a0c      	ldr	r2, [pc, #48]	@ (8013d84 <global_stdio_init.part.0+0x38>)
 8013d54:	601a      	str	r2, [r3, #0]
 8013d56:	4620      	mov	r0, r4
 8013d58:	2200      	movs	r2, #0
 8013d5a:	2104      	movs	r1, #4
 8013d5c:	f7ff ff94 	bl	8013c88 <std>
 8013d60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013d64:	2201      	movs	r2, #1
 8013d66:	2109      	movs	r1, #9
 8013d68:	f7ff ff8e 	bl	8013c88 <std>
 8013d6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013d70:	2202      	movs	r2, #2
 8013d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d76:	2112      	movs	r1, #18
 8013d78:	f7ff bf86 	b.w	8013c88 <std>
 8013d7c:	2000027c 	.word	0x2000027c
 8013d80:	20000144 	.word	0x20000144
 8013d84:	08013cf5 	.word	0x08013cf5

08013d88 <__sfp_lock_acquire>:
 8013d88:	4801      	ldr	r0, [pc, #4]	@ (8013d90 <__sfp_lock_acquire+0x8>)
 8013d8a:	f000 ba00 	b.w	801418e <__retarget_lock_acquire_recursive>
 8013d8e:	bf00      	nop
 8013d90:	20000285 	.word	0x20000285

08013d94 <__sfp_lock_release>:
 8013d94:	4801      	ldr	r0, [pc, #4]	@ (8013d9c <__sfp_lock_release+0x8>)
 8013d96:	f000 b9fb 	b.w	8014190 <__retarget_lock_release_recursive>
 8013d9a:	bf00      	nop
 8013d9c:	20000285 	.word	0x20000285

08013da0 <__sinit>:
 8013da0:	b510      	push	{r4, lr}
 8013da2:	4604      	mov	r4, r0
 8013da4:	f7ff fff0 	bl	8013d88 <__sfp_lock_acquire>
 8013da8:	6a23      	ldr	r3, [r4, #32]
 8013daa:	b11b      	cbz	r3, 8013db4 <__sinit+0x14>
 8013dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013db0:	f7ff bff0 	b.w	8013d94 <__sfp_lock_release>
 8013db4:	4b04      	ldr	r3, [pc, #16]	@ (8013dc8 <__sinit+0x28>)
 8013db6:	6223      	str	r3, [r4, #32]
 8013db8:	4b04      	ldr	r3, [pc, #16]	@ (8013dcc <__sinit+0x2c>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d1f5      	bne.n	8013dac <__sinit+0xc>
 8013dc0:	f7ff ffc4 	bl	8013d4c <global_stdio_init.part.0>
 8013dc4:	e7f2      	b.n	8013dac <__sinit+0xc>
 8013dc6:	bf00      	nop
 8013dc8:	08013d0d 	.word	0x08013d0d
 8013dcc:	2000027c 	.word	0x2000027c

08013dd0 <_fwalk_sglue>:
 8013dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013dd4:	4607      	mov	r7, r0
 8013dd6:	4688      	mov	r8, r1
 8013dd8:	4614      	mov	r4, r2
 8013dda:	2600      	movs	r6, #0
 8013ddc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013de0:	f1b9 0901 	subs.w	r9, r9, #1
 8013de4:	d505      	bpl.n	8013df2 <_fwalk_sglue+0x22>
 8013de6:	6824      	ldr	r4, [r4, #0]
 8013de8:	2c00      	cmp	r4, #0
 8013dea:	d1f7      	bne.n	8013ddc <_fwalk_sglue+0xc>
 8013dec:	4630      	mov	r0, r6
 8013dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013df2:	89ab      	ldrh	r3, [r5, #12]
 8013df4:	2b01      	cmp	r3, #1
 8013df6:	d907      	bls.n	8013e08 <_fwalk_sglue+0x38>
 8013df8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013dfc:	3301      	adds	r3, #1
 8013dfe:	d003      	beq.n	8013e08 <_fwalk_sglue+0x38>
 8013e00:	4629      	mov	r1, r5
 8013e02:	4638      	mov	r0, r7
 8013e04:	47c0      	blx	r8
 8013e06:	4306      	orrs	r6, r0
 8013e08:	3568      	adds	r5, #104	@ 0x68
 8013e0a:	e7e9      	b.n	8013de0 <_fwalk_sglue+0x10>

08013e0c <iprintf>:
 8013e0c:	b40f      	push	{r0, r1, r2, r3}
 8013e0e:	b507      	push	{r0, r1, r2, lr}
 8013e10:	4906      	ldr	r1, [pc, #24]	@ (8013e2c <iprintf+0x20>)
 8013e12:	ab04      	add	r3, sp, #16
 8013e14:	6808      	ldr	r0, [r1, #0]
 8013e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e1a:	6881      	ldr	r1, [r0, #8]
 8013e1c:	9301      	str	r3, [sp, #4]
 8013e1e:	f000 fadb 	bl	80143d8 <_vfiprintf_r>
 8013e22:	b003      	add	sp, #12
 8013e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e28:	b004      	add	sp, #16
 8013e2a:	4770      	bx	lr
 8013e2c:	2000003c 	.word	0x2000003c

08013e30 <_puts_r>:
 8013e30:	6a03      	ldr	r3, [r0, #32]
 8013e32:	b570      	push	{r4, r5, r6, lr}
 8013e34:	6884      	ldr	r4, [r0, #8]
 8013e36:	4605      	mov	r5, r0
 8013e38:	460e      	mov	r6, r1
 8013e3a:	b90b      	cbnz	r3, 8013e40 <_puts_r+0x10>
 8013e3c:	f7ff ffb0 	bl	8013da0 <__sinit>
 8013e40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e42:	07db      	lsls	r3, r3, #31
 8013e44:	d405      	bmi.n	8013e52 <_puts_r+0x22>
 8013e46:	89a3      	ldrh	r3, [r4, #12]
 8013e48:	0598      	lsls	r0, r3, #22
 8013e4a:	d402      	bmi.n	8013e52 <_puts_r+0x22>
 8013e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e4e:	f000 f99e 	bl	801418e <__retarget_lock_acquire_recursive>
 8013e52:	89a3      	ldrh	r3, [r4, #12]
 8013e54:	0719      	lsls	r1, r3, #28
 8013e56:	d502      	bpl.n	8013e5e <_puts_r+0x2e>
 8013e58:	6923      	ldr	r3, [r4, #16]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d135      	bne.n	8013eca <_puts_r+0x9a>
 8013e5e:	4621      	mov	r1, r4
 8013e60:	4628      	mov	r0, r5
 8013e62:	f000 f8c5 	bl	8013ff0 <__swsetup_r>
 8013e66:	b380      	cbz	r0, 8013eca <_puts_r+0x9a>
 8013e68:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8013e6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e6e:	07da      	lsls	r2, r3, #31
 8013e70:	d405      	bmi.n	8013e7e <_puts_r+0x4e>
 8013e72:	89a3      	ldrh	r3, [r4, #12]
 8013e74:	059b      	lsls	r3, r3, #22
 8013e76:	d402      	bmi.n	8013e7e <_puts_r+0x4e>
 8013e78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e7a:	f000 f989 	bl	8014190 <__retarget_lock_release_recursive>
 8013e7e:	4628      	mov	r0, r5
 8013e80:	bd70      	pop	{r4, r5, r6, pc}
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	da04      	bge.n	8013e90 <_puts_r+0x60>
 8013e86:	69a2      	ldr	r2, [r4, #24]
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	dc17      	bgt.n	8013ebc <_puts_r+0x8c>
 8013e8c:	290a      	cmp	r1, #10
 8013e8e:	d015      	beq.n	8013ebc <_puts_r+0x8c>
 8013e90:	6823      	ldr	r3, [r4, #0]
 8013e92:	1c5a      	adds	r2, r3, #1
 8013e94:	6022      	str	r2, [r4, #0]
 8013e96:	7019      	strb	r1, [r3, #0]
 8013e98:	68a3      	ldr	r3, [r4, #8]
 8013e9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013e9e:	3b01      	subs	r3, #1
 8013ea0:	60a3      	str	r3, [r4, #8]
 8013ea2:	2900      	cmp	r1, #0
 8013ea4:	d1ed      	bne.n	8013e82 <_puts_r+0x52>
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	da11      	bge.n	8013ece <_puts_r+0x9e>
 8013eaa:	4622      	mov	r2, r4
 8013eac:	210a      	movs	r1, #10
 8013eae:	4628      	mov	r0, r5
 8013eb0:	f000 f85f 	bl	8013f72 <__swbuf_r>
 8013eb4:	3001      	adds	r0, #1
 8013eb6:	d0d7      	beq.n	8013e68 <_puts_r+0x38>
 8013eb8:	250a      	movs	r5, #10
 8013eba:	e7d7      	b.n	8013e6c <_puts_r+0x3c>
 8013ebc:	4622      	mov	r2, r4
 8013ebe:	4628      	mov	r0, r5
 8013ec0:	f000 f857 	bl	8013f72 <__swbuf_r>
 8013ec4:	3001      	adds	r0, #1
 8013ec6:	d1e7      	bne.n	8013e98 <_puts_r+0x68>
 8013ec8:	e7ce      	b.n	8013e68 <_puts_r+0x38>
 8013eca:	3e01      	subs	r6, #1
 8013ecc:	e7e4      	b.n	8013e98 <_puts_r+0x68>
 8013ece:	6823      	ldr	r3, [r4, #0]
 8013ed0:	1c5a      	adds	r2, r3, #1
 8013ed2:	6022      	str	r2, [r4, #0]
 8013ed4:	220a      	movs	r2, #10
 8013ed6:	701a      	strb	r2, [r3, #0]
 8013ed8:	e7ee      	b.n	8013eb8 <_puts_r+0x88>
	...

08013edc <puts>:
 8013edc:	4b02      	ldr	r3, [pc, #8]	@ (8013ee8 <puts+0xc>)
 8013ede:	4601      	mov	r1, r0
 8013ee0:	6818      	ldr	r0, [r3, #0]
 8013ee2:	f7ff bfa5 	b.w	8013e30 <_puts_r>
 8013ee6:	bf00      	nop
 8013ee8:	2000003c 	.word	0x2000003c

08013eec <__sread>:
 8013eec:	b510      	push	{r4, lr}
 8013eee:	460c      	mov	r4, r1
 8013ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ef4:	f000 f8fc 	bl	80140f0 <_read_r>
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	bfab      	itete	ge
 8013efc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013efe:	89a3      	ldrhlt	r3, [r4, #12]
 8013f00:	181b      	addge	r3, r3, r0
 8013f02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013f06:	bfac      	ite	ge
 8013f08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013f0a:	81a3      	strhlt	r3, [r4, #12]
 8013f0c:	bd10      	pop	{r4, pc}

08013f0e <__swrite>:
 8013f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f12:	461f      	mov	r7, r3
 8013f14:	898b      	ldrh	r3, [r1, #12]
 8013f16:	05db      	lsls	r3, r3, #23
 8013f18:	4605      	mov	r5, r0
 8013f1a:	460c      	mov	r4, r1
 8013f1c:	4616      	mov	r6, r2
 8013f1e:	d505      	bpl.n	8013f2c <__swrite+0x1e>
 8013f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f24:	2302      	movs	r3, #2
 8013f26:	2200      	movs	r2, #0
 8013f28:	f000 f8d0 	bl	80140cc <_lseek_r>
 8013f2c:	89a3      	ldrh	r3, [r4, #12]
 8013f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013f36:	81a3      	strh	r3, [r4, #12]
 8013f38:	4632      	mov	r2, r6
 8013f3a:	463b      	mov	r3, r7
 8013f3c:	4628      	mov	r0, r5
 8013f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f42:	f000 b8e7 	b.w	8014114 <_write_r>

08013f46 <__sseek>:
 8013f46:	b510      	push	{r4, lr}
 8013f48:	460c      	mov	r4, r1
 8013f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f4e:	f000 f8bd 	bl	80140cc <_lseek_r>
 8013f52:	1c43      	adds	r3, r0, #1
 8013f54:	89a3      	ldrh	r3, [r4, #12]
 8013f56:	bf15      	itete	ne
 8013f58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013f5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013f5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013f62:	81a3      	strheq	r3, [r4, #12]
 8013f64:	bf18      	it	ne
 8013f66:	81a3      	strhne	r3, [r4, #12]
 8013f68:	bd10      	pop	{r4, pc}

08013f6a <__sclose>:
 8013f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f6e:	f000 b89d 	b.w	80140ac <_close_r>

08013f72 <__swbuf_r>:
 8013f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f74:	460e      	mov	r6, r1
 8013f76:	4614      	mov	r4, r2
 8013f78:	4605      	mov	r5, r0
 8013f7a:	b118      	cbz	r0, 8013f84 <__swbuf_r+0x12>
 8013f7c:	6a03      	ldr	r3, [r0, #32]
 8013f7e:	b90b      	cbnz	r3, 8013f84 <__swbuf_r+0x12>
 8013f80:	f7ff ff0e 	bl	8013da0 <__sinit>
 8013f84:	69a3      	ldr	r3, [r4, #24]
 8013f86:	60a3      	str	r3, [r4, #8]
 8013f88:	89a3      	ldrh	r3, [r4, #12]
 8013f8a:	071a      	lsls	r2, r3, #28
 8013f8c:	d501      	bpl.n	8013f92 <__swbuf_r+0x20>
 8013f8e:	6923      	ldr	r3, [r4, #16]
 8013f90:	b943      	cbnz	r3, 8013fa4 <__swbuf_r+0x32>
 8013f92:	4621      	mov	r1, r4
 8013f94:	4628      	mov	r0, r5
 8013f96:	f000 f82b 	bl	8013ff0 <__swsetup_r>
 8013f9a:	b118      	cbz	r0, 8013fa4 <__swbuf_r+0x32>
 8013f9c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013fa0:	4638      	mov	r0, r7
 8013fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fa4:	6823      	ldr	r3, [r4, #0]
 8013fa6:	6922      	ldr	r2, [r4, #16]
 8013fa8:	1a98      	subs	r0, r3, r2
 8013faa:	6963      	ldr	r3, [r4, #20]
 8013fac:	b2f6      	uxtb	r6, r6
 8013fae:	4283      	cmp	r3, r0
 8013fb0:	4637      	mov	r7, r6
 8013fb2:	dc05      	bgt.n	8013fc0 <__swbuf_r+0x4e>
 8013fb4:	4621      	mov	r1, r4
 8013fb6:	4628      	mov	r0, r5
 8013fb8:	f000 fd36 	bl	8014a28 <_fflush_r>
 8013fbc:	2800      	cmp	r0, #0
 8013fbe:	d1ed      	bne.n	8013f9c <__swbuf_r+0x2a>
 8013fc0:	68a3      	ldr	r3, [r4, #8]
 8013fc2:	3b01      	subs	r3, #1
 8013fc4:	60a3      	str	r3, [r4, #8]
 8013fc6:	6823      	ldr	r3, [r4, #0]
 8013fc8:	1c5a      	adds	r2, r3, #1
 8013fca:	6022      	str	r2, [r4, #0]
 8013fcc:	701e      	strb	r6, [r3, #0]
 8013fce:	6962      	ldr	r2, [r4, #20]
 8013fd0:	1c43      	adds	r3, r0, #1
 8013fd2:	429a      	cmp	r2, r3
 8013fd4:	d004      	beq.n	8013fe0 <__swbuf_r+0x6e>
 8013fd6:	89a3      	ldrh	r3, [r4, #12]
 8013fd8:	07db      	lsls	r3, r3, #31
 8013fda:	d5e1      	bpl.n	8013fa0 <__swbuf_r+0x2e>
 8013fdc:	2e0a      	cmp	r6, #10
 8013fde:	d1df      	bne.n	8013fa0 <__swbuf_r+0x2e>
 8013fe0:	4621      	mov	r1, r4
 8013fe2:	4628      	mov	r0, r5
 8013fe4:	f000 fd20 	bl	8014a28 <_fflush_r>
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	d0d9      	beq.n	8013fa0 <__swbuf_r+0x2e>
 8013fec:	e7d6      	b.n	8013f9c <__swbuf_r+0x2a>
	...

08013ff0 <__swsetup_r>:
 8013ff0:	b538      	push	{r3, r4, r5, lr}
 8013ff2:	4b29      	ldr	r3, [pc, #164]	@ (8014098 <__swsetup_r+0xa8>)
 8013ff4:	4605      	mov	r5, r0
 8013ff6:	6818      	ldr	r0, [r3, #0]
 8013ff8:	460c      	mov	r4, r1
 8013ffa:	b118      	cbz	r0, 8014004 <__swsetup_r+0x14>
 8013ffc:	6a03      	ldr	r3, [r0, #32]
 8013ffe:	b90b      	cbnz	r3, 8014004 <__swsetup_r+0x14>
 8014000:	f7ff fece 	bl	8013da0 <__sinit>
 8014004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014008:	0719      	lsls	r1, r3, #28
 801400a:	d422      	bmi.n	8014052 <__swsetup_r+0x62>
 801400c:	06da      	lsls	r2, r3, #27
 801400e:	d407      	bmi.n	8014020 <__swsetup_r+0x30>
 8014010:	2209      	movs	r2, #9
 8014012:	602a      	str	r2, [r5, #0]
 8014014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014018:	81a3      	strh	r3, [r4, #12]
 801401a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801401e:	e033      	b.n	8014088 <__swsetup_r+0x98>
 8014020:	0758      	lsls	r0, r3, #29
 8014022:	d512      	bpl.n	801404a <__swsetup_r+0x5a>
 8014024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014026:	b141      	cbz	r1, 801403a <__swsetup_r+0x4a>
 8014028:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801402c:	4299      	cmp	r1, r3
 801402e:	d002      	beq.n	8014036 <__swsetup_r+0x46>
 8014030:	4628      	mov	r0, r5
 8014032:	f000 f8af 	bl	8014194 <_free_r>
 8014036:	2300      	movs	r3, #0
 8014038:	6363      	str	r3, [r4, #52]	@ 0x34
 801403a:	89a3      	ldrh	r3, [r4, #12]
 801403c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014040:	81a3      	strh	r3, [r4, #12]
 8014042:	2300      	movs	r3, #0
 8014044:	6063      	str	r3, [r4, #4]
 8014046:	6923      	ldr	r3, [r4, #16]
 8014048:	6023      	str	r3, [r4, #0]
 801404a:	89a3      	ldrh	r3, [r4, #12]
 801404c:	f043 0308 	orr.w	r3, r3, #8
 8014050:	81a3      	strh	r3, [r4, #12]
 8014052:	6923      	ldr	r3, [r4, #16]
 8014054:	b94b      	cbnz	r3, 801406a <__swsetup_r+0x7a>
 8014056:	89a3      	ldrh	r3, [r4, #12]
 8014058:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801405c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014060:	d003      	beq.n	801406a <__swsetup_r+0x7a>
 8014062:	4621      	mov	r1, r4
 8014064:	4628      	mov	r0, r5
 8014066:	f000 fd2d 	bl	8014ac4 <__smakebuf_r>
 801406a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801406e:	f013 0201 	ands.w	r2, r3, #1
 8014072:	d00a      	beq.n	801408a <__swsetup_r+0x9a>
 8014074:	2200      	movs	r2, #0
 8014076:	60a2      	str	r2, [r4, #8]
 8014078:	6962      	ldr	r2, [r4, #20]
 801407a:	4252      	negs	r2, r2
 801407c:	61a2      	str	r2, [r4, #24]
 801407e:	6922      	ldr	r2, [r4, #16]
 8014080:	b942      	cbnz	r2, 8014094 <__swsetup_r+0xa4>
 8014082:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014086:	d1c5      	bne.n	8014014 <__swsetup_r+0x24>
 8014088:	bd38      	pop	{r3, r4, r5, pc}
 801408a:	0799      	lsls	r1, r3, #30
 801408c:	bf58      	it	pl
 801408e:	6962      	ldrpl	r2, [r4, #20]
 8014090:	60a2      	str	r2, [r4, #8]
 8014092:	e7f4      	b.n	801407e <__swsetup_r+0x8e>
 8014094:	2000      	movs	r0, #0
 8014096:	e7f7      	b.n	8014088 <__swsetup_r+0x98>
 8014098:	2000003c 	.word	0x2000003c

0801409c <memset>:
 801409c:	4402      	add	r2, r0
 801409e:	4603      	mov	r3, r0
 80140a0:	4293      	cmp	r3, r2
 80140a2:	d100      	bne.n	80140a6 <memset+0xa>
 80140a4:	4770      	bx	lr
 80140a6:	f803 1b01 	strb.w	r1, [r3], #1
 80140aa:	e7f9      	b.n	80140a0 <memset+0x4>

080140ac <_close_r>:
 80140ac:	b538      	push	{r3, r4, r5, lr}
 80140ae:	4d06      	ldr	r5, [pc, #24]	@ (80140c8 <_close_r+0x1c>)
 80140b0:	2300      	movs	r3, #0
 80140b2:	4604      	mov	r4, r0
 80140b4:	4608      	mov	r0, r1
 80140b6:	602b      	str	r3, [r5, #0]
 80140b8:	f7fc fc9e 	bl	80109f8 <_close>
 80140bc:	1c43      	adds	r3, r0, #1
 80140be:	d102      	bne.n	80140c6 <_close_r+0x1a>
 80140c0:	682b      	ldr	r3, [r5, #0]
 80140c2:	b103      	cbz	r3, 80140c6 <_close_r+0x1a>
 80140c4:	6023      	str	r3, [r4, #0]
 80140c6:	bd38      	pop	{r3, r4, r5, pc}
 80140c8:	20000280 	.word	0x20000280

080140cc <_lseek_r>:
 80140cc:	b538      	push	{r3, r4, r5, lr}
 80140ce:	4d07      	ldr	r5, [pc, #28]	@ (80140ec <_lseek_r+0x20>)
 80140d0:	4604      	mov	r4, r0
 80140d2:	4608      	mov	r0, r1
 80140d4:	4611      	mov	r1, r2
 80140d6:	2200      	movs	r2, #0
 80140d8:	602a      	str	r2, [r5, #0]
 80140da:	461a      	mov	r2, r3
 80140dc:	f7fc fcb3 	bl	8010a46 <_lseek>
 80140e0:	1c43      	adds	r3, r0, #1
 80140e2:	d102      	bne.n	80140ea <_lseek_r+0x1e>
 80140e4:	682b      	ldr	r3, [r5, #0]
 80140e6:	b103      	cbz	r3, 80140ea <_lseek_r+0x1e>
 80140e8:	6023      	str	r3, [r4, #0]
 80140ea:	bd38      	pop	{r3, r4, r5, pc}
 80140ec:	20000280 	.word	0x20000280

080140f0 <_read_r>:
 80140f0:	b538      	push	{r3, r4, r5, lr}
 80140f2:	4d07      	ldr	r5, [pc, #28]	@ (8014110 <_read_r+0x20>)
 80140f4:	4604      	mov	r4, r0
 80140f6:	4608      	mov	r0, r1
 80140f8:	4611      	mov	r1, r2
 80140fa:	2200      	movs	r2, #0
 80140fc:	602a      	str	r2, [r5, #0]
 80140fe:	461a      	mov	r2, r3
 8014100:	f7fc fc41 	bl	8010986 <_read>
 8014104:	1c43      	adds	r3, r0, #1
 8014106:	d102      	bne.n	801410e <_read_r+0x1e>
 8014108:	682b      	ldr	r3, [r5, #0]
 801410a:	b103      	cbz	r3, 801410e <_read_r+0x1e>
 801410c:	6023      	str	r3, [r4, #0]
 801410e:	bd38      	pop	{r3, r4, r5, pc}
 8014110:	20000280 	.word	0x20000280

08014114 <_write_r>:
 8014114:	b538      	push	{r3, r4, r5, lr}
 8014116:	4d07      	ldr	r5, [pc, #28]	@ (8014134 <_write_r+0x20>)
 8014118:	4604      	mov	r4, r0
 801411a:	4608      	mov	r0, r1
 801411c:	4611      	mov	r1, r2
 801411e:	2200      	movs	r2, #0
 8014120:	602a      	str	r2, [r5, #0]
 8014122:	461a      	mov	r2, r3
 8014124:	f7fc fc4c 	bl	80109c0 <_write>
 8014128:	1c43      	adds	r3, r0, #1
 801412a:	d102      	bne.n	8014132 <_write_r+0x1e>
 801412c:	682b      	ldr	r3, [r5, #0]
 801412e:	b103      	cbz	r3, 8014132 <_write_r+0x1e>
 8014130:	6023      	str	r3, [r4, #0]
 8014132:	bd38      	pop	{r3, r4, r5, pc}
 8014134:	20000280 	.word	0x20000280

08014138 <__errno>:
 8014138:	4b01      	ldr	r3, [pc, #4]	@ (8014140 <__errno+0x8>)
 801413a:	6818      	ldr	r0, [r3, #0]
 801413c:	4770      	bx	lr
 801413e:	bf00      	nop
 8014140:	2000003c 	.word	0x2000003c

08014144 <__libc_init_array>:
 8014144:	b570      	push	{r4, r5, r6, lr}
 8014146:	4d0d      	ldr	r5, [pc, #52]	@ (801417c <__libc_init_array+0x38>)
 8014148:	4c0d      	ldr	r4, [pc, #52]	@ (8014180 <__libc_init_array+0x3c>)
 801414a:	1b64      	subs	r4, r4, r5
 801414c:	10a4      	asrs	r4, r4, #2
 801414e:	2600      	movs	r6, #0
 8014150:	42a6      	cmp	r6, r4
 8014152:	d109      	bne.n	8014168 <__libc_init_array+0x24>
 8014154:	4d0b      	ldr	r5, [pc, #44]	@ (8014184 <__libc_init_array+0x40>)
 8014156:	4c0c      	ldr	r4, [pc, #48]	@ (8014188 <__libc_init_array+0x44>)
 8014158:	f000 fd22 	bl	8014ba0 <_init>
 801415c:	1b64      	subs	r4, r4, r5
 801415e:	10a4      	asrs	r4, r4, #2
 8014160:	2600      	movs	r6, #0
 8014162:	42a6      	cmp	r6, r4
 8014164:	d105      	bne.n	8014172 <__libc_init_array+0x2e>
 8014166:	bd70      	pop	{r4, r5, r6, pc}
 8014168:	f855 3b04 	ldr.w	r3, [r5], #4
 801416c:	4798      	blx	r3
 801416e:	3601      	adds	r6, #1
 8014170:	e7ee      	b.n	8014150 <__libc_init_array+0xc>
 8014172:	f855 3b04 	ldr.w	r3, [r5], #4
 8014176:	4798      	blx	r3
 8014178:	3601      	adds	r6, #1
 801417a:	e7f2      	b.n	8014162 <__libc_init_array+0x1e>
 801417c:	08014d34 	.word	0x08014d34
 8014180:	08014d34 	.word	0x08014d34
 8014184:	08014d34 	.word	0x08014d34
 8014188:	08014d38 	.word	0x08014d38

0801418c <__retarget_lock_init_recursive>:
 801418c:	4770      	bx	lr

0801418e <__retarget_lock_acquire_recursive>:
 801418e:	4770      	bx	lr

08014190 <__retarget_lock_release_recursive>:
 8014190:	4770      	bx	lr
	...

08014194 <_free_r>:
 8014194:	b538      	push	{r3, r4, r5, lr}
 8014196:	4605      	mov	r5, r0
 8014198:	2900      	cmp	r1, #0
 801419a:	d041      	beq.n	8014220 <_free_r+0x8c>
 801419c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141a0:	1f0c      	subs	r4, r1, #4
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	bfb8      	it	lt
 80141a6:	18e4      	addlt	r4, r4, r3
 80141a8:	f000 f8e0 	bl	801436c <__malloc_lock>
 80141ac:	4a1d      	ldr	r2, [pc, #116]	@ (8014224 <_free_r+0x90>)
 80141ae:	6813      	ldr	r3, [r2, #0]
 80141b0:	b933      	cbnz	r3, 80141c0 <_free_r+0x2c>
 80141b2:	6063      	str	r3, [r4, #4]
 80141b4:	6014      	str	r4, [r2, #0]
 80141b6:	4628      	mov	r0, r5
 80141b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141bc:	f000 b8dc 	b.w	8014378 <__malloc_unlock>
 80141c0:	42a3      	cmp	r3, r4
 80141c2:	d908      	bls.n	80141d6 <_free_r+0x42>
 80141c4:	6820      	ldr	r0, [r4, #0]
 80141c6:	1821      	adds	r1, r4, r0
 80141c8:	428b      	cmp	r3, r1
 80141ca:	bf01      	itttt	eq
 80141cc:	6819      	ldreq	r1, [r3, #0]
 80141ce:	685b      	ldreq	r3, [r3, #4]
 80141d0:	1809      	addeq	r1, r1, r0
 80141d2:	6021      	streq	r1, [r4, #0]
 80141d4:	e7ed      	b.n	80141b2 <_free_r+0x1e>
 80141d6:	461a      	mov	r2, r3
 80141d8:	685b      	ldr	r3, [r3, #4]
 80141da:	b10b      	cbz	r3, 80141e0 <_free_r+0x4c>
 80141dc:	42a3      	cmp	r3, r4
 80141de:	d9fa      	bls.n	80141d6 <_free_r+0x42>
 80141e0:	6811      	ldr	r1, [r2, #0]
 80141e2:	1850      	adds	r0, r2, r1
 80141e4:	42a0      	cmp	r0, r4
 80141e6:	d10b      	bne.n	8014200 <_free_r+0x6c>
 80141e8:	6820      	ldr	r0, [r4, #0]
 80141ea:	4401      	add	r1, r0
 80141ec:	1850      	adds	r0, r2, r1
 80141ee:	4283      	cmp	r3, r0
 80141f0:	6011      	str	r1, [r2, #0]
 80141f2:	d1e0      	bne.n	80141b6 <_free_r+0x22>
 80141f4:	6818      	ldr	r0, [r3, #0]
 80141f6:	685b      	ldr	r3, [r3, #4]
 80141f8:	6053      	str	r3, [r2, #4]
 80141fa:	4408      	add	r0, r1
 80141fc:	6010      	str	r0, [r2, #0]
 80141fe:	e7da      	b.n	80141b6 <_free_r+0x22>
 8014200:	d902      	bls.n	8014208 <_free_r+0x74>
 8014202:	230c      	movs	r3, #12
 8014204:	602b      	str	r3, [r5, #0]
 8014206:	e7d6      	b.n	80141b6 <_free_r+0x22>
 8014208:	6820      	ldr	r0, [r4, #0]
 801420a:	1821      	adds	r1, r4, r0
 801420c:	428b      	cmp	r3, r1
 801420e:	bf04      	itt	eq
 8014210:	6819      	ldreq	r1, [r3, #0]
 8014212:	685b      	ldreq	r3, [r3, #4]
 8014214:	6063      	str	r3, [r4, #4]
 8014216:	bf04      	itt	eq
 8014218:	1809      	addeq	r1, r1, r0
 801421a:	6021      	streq	r1, [r4, #0]
 801421c:	6054      	str	r4, [r2, #4]
 801421e:	e7ca      	b.n	80141b6 <_free_r+0x22>
 8014220:	bd38      	pop	{r3, r4, r5, pc}
 8014222:	bf00      	nop
 8014224:	2000028c 	.word	0x2000028c

08014228 <sbrk_aligned>:
 8014228:	b570      	push	{r4, r5, r6, lr}
 801422a:	4e0f      	ldr	r6, [pc, #60]	@ (8014268 <sbrk_aligned+0x40>)
 801422c:	460c      	mov	r4, r1
 801422e:	6831      	ldr	r1, [r6, #0]
 8014230:	4605      	mov	r5, r0
 8014232:	b911      	cbnz	r1, 801423a <sbrk_aligned+0x12>
 8014234:	f000 fca4 	bl	8014b80 <_sbrk_r>
 8014238:	6030      	str	r0, [r6, #0]
 801423a:	4621      	mov	r1, r4
 801423c:	4628      	mov	r0, r5
 801423e:	f000 fc9f 	bl	8014b80 <_sbrk_r>
 8014242:	1c43      	adds	r3, r0, #1
 8014244:	d103      	bne.n	801424e <sbrk_aligned+0x26>
 8014246:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801424a:	4620      	mov	r0, r4
 801424c:	bd70      	pop	{r4, r5, r6, pc}
 801424e:	1cc4      	adds	r4, r0, #3
 8014250:	f024 0403 	bic.w	r4, r4, #3
 8014254:	42a0      	cmp	r0, r4
 8014256:	d0f8      	beq.n	801424a <sbrk_aligned+0x22>
 8014258:	1a21      	subs	r1, r4, r0
 801425a:	4628      	mov	r0, r5
 801425c:	f000 fc90 	bl	8014b80 <_sbrk_r>
 8014260:	3001      	adds	r0, #1
 8014262:	d1f2      	bne.n	801424a <sbrk_aligned+0x22>
 8014264:	e7ef      	b.n	8014246 <sbrk_aligned+0x1e>
 8014266:	bf00      	nop
 8014268:	20000288 	.word	0x20000288

0801426c <_malloc_r>:
 801426c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014270:	1ccd      	adds	r5, r1, #3
 8014272:	f025 0503 	bic.w	r5, r5, #3
 8014276:	3508      	adds	r5, #8
 8014278:	2d0c      	cmp	r5, #12
 801427a:	bf38      	it	cc
 801427c:	250c      	movcc	r5, #12
 801427e:	2d00      	cmp	r5, #0
 8014280:	4606      	mov	r6, r0
 8014282:	db01      	blt.n	8014288 <_malloc_r+0x1c>
 8014284:	42a9      	cmp	r1, r5
 8014286:	d904      	bls.n	8014292 <_malloc_r+0x26>
 8014288:	230c      	movs	r3, #12
 801428a:	6033      	str	r3, [r6, #0]
 801428c:	2000      	movs	r0, #0
 801428e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014292:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014368 <_malloc_r+0xfc>
 8014296:	f000 f869 	bl	801436c <__malloc_lock>
 801429a:	f8d8 3000 	ldr.w	r3, [r8]
 801429e:	461c      	mov	r4, r3
 80142a0:	bb44      	cbnz	r4, 80142f4 <_malloc_r+0x88>
 80142a2:	4629      	mov	r1, r5
 80142a4:	4630      	mov	r0, r6
 80142a6:	f7ff ffbf 	bl	8014228 <sbrk_aligned>
 80142aa:	1c43      	adds	r3, r0, #1
 80142ac:	4604      	mov	r4, r0
 80142ae:	d158      	bne.n	8014362 <_malloc_r+0xf6>
 80142b0:	f8d8 4000 	ldr.w	r4, [r8]
 80142b4:	4627      	mov	r7, r4
 80142b6:	2f00      	cmp	r7, #0
 80142b8:	d143      	bne.n	8014342 <_malloc_r+0xd6>
 80142ba:	2c00      	cmp	r4, #0
 80142bc:	d04b      	beq.n	8014356 <_malloc_r+0xea>
 80142be:	6823      	ldr	r3, [r4, #0]
 80142c0:	4639      	mov	r1, r7
 80142c2:	4630      	mov	r0, r6
 80142c4:	eb04 0903 	add.w	r9, r4, r3
 80142c8:	f000 fc5a 	bl	8014b80 <_sbrk_r>
 80142cc:	4581      	cmp	r9, r0
 80142ce:	d142      	bne.n	8014356 <_malloc_r+0xea>
 80142d0:	6821      	ldr	r1, [r4, #0]
 80142d2:	1a6d      	subs	r5, r5, r1
 80142d4:	4629      	mov	r1, r5
 80142d6:	4630      	mov	r0, r6
 80142d8:	f7ff ffa6 	bl	8014228 <sbrk_aligned>
 80142dc:	3001      	adds	r0, #1
 80142de:	d03a      	beq.n	8014356 <_malloc_r+0xea>
 80142e0:	6823      	ldr	r3, [r4, #0]
 80142e2:	442b      	add	r3, r5
 80142e4:	6023      	str	r3, [r4, #0]
 80142e6:	f8d8 3000 	ldr.w	r3, [r8]
 80142ea:	685a      	ldr	r2, [r3, #4]
 80142ec:	bb62      	cbnz	r2, 8014348 <_malloc_r+0xdc>
 80142ee:	f8c8 7000 	str.w	r7, [r8]
 80142f2:	e00f      	b.n	8014314 <_malloc_r+0xa8>
 80142f4:	6822      	ldr	r2, [r4, #0]
 80142f6:	1b52      	subs	r2, r2, r5
 80142f8:	d420      	bmi.n	801433c <_malloc_r+0xd0>
 80142fa:	2a0b      	cmp	r2, #11
 80142fc:	d917      	bls.n	801432e <_malloc_r+0xc2>
 80142fe:	1961      	adds	r1, r4, r5
 8014300:	42a3      	cmp	r3, r4
 8014302:	6025      	str	r5, [r4, #0]
 8014304:	bf18      	it	ne
 8014306:	6059      	strne	r1, [r3, #4]
 8014308:	6863      	ldr	r3, [r4, #4]
 801430a:	bf08      	it	eq
 801430c:	f8c8 1000 	streq.w	r1, [r8]
 8014310:	5162      	str	r2, [r4, r5]
 8014312:	604b      	str	r3, [r1, #4]
 8014314:	4630      	mov	r0, r6
 8014316:	f000 f82f 	bl	8014378 <__malloc_unlock>
 801431a:	f104 000b 	add.w	r0, r4, #11
 801431e:	1d23      	adds	r3, r4, #4
 8014320:	f020 0007 	bic.w	r0, r0, #7
 8014324:	1ac2      	subs	r2, r0, r3
 8014326:	bf1c      	itt	ne
 8014328:	1a1b      	subne	r3, r3, r0
 801432a:	50a3      	strne	r3, [r4, r2]
 801432c:	e7af      	b.n	801428e <_malloc_r+0x22>
 801432e:	6862      	ldr	r2, [r4, #4]
 8014330:	42a3      	cmp	r3, r4
 8014332:	bf0c      	ite	eq
 8014334:	f8c8 2000 	streq.w	r2, [r8]
 8014338:	605a      	strne	r2, [r3, #4]
 801433a:	e7eb      	b.n	8014314 <_malloc_r+0xa8>
 801433c:	4623      	mov	r3, r4
 801433e:	6864      	ldr	r4, [r4, #4]
 8014340:	e7ae      	b.n	80142a0 <_malloc_r+0x34>
 8014342:	463c      	mov	r4, r7
 8014344:	687f      	ldr	r7, [r7, #4]
 8014346:	e7b6      	b.n	80142b6 <_malloc_r+0x4a>
 8014348:	461a      	mov	r2, r3
 801434a:	685b      	ldr	r3, [r3, #4]
 801434c:	42a3      	cmp	r3, r4
 801434e:	d1fb      	bne.n	8014348 <_malloc_r+0xdc>
 8014350:	2300      	movs	r3, #0
 8014352:	6053      	str	r3, [r2, #4]
 8014354:	e7de      	b.n	8014314 <_malloc_r+0xa8>
 8014356:	230c      	movs	r3, #12
 8014358:	6033      	str	r3, [r6, #0]
 801435a:	4630      	mov	r0, r6
 801435c:	f000 f80c 	bl	8014378 <__malloc_unlock>
 8014360:	e794      	b.n	801428c <_malloc_r+0x20>
 8014362:	6005      	str	r5, [r0, #0]
 8014364:	e7d6      	b.n	8014314 <_malloc_r+0xa8>
 8014366:	bf00      	nop
 8014368:	2000028c 	.word	0x2000028c

0801436c <__malloc_lock>:
 801436c:	4801      	ldr	r0, [pc, #4]	@ (8014374 <__malloc_lock+0x8>)
 801436e:	f7ff bf0e 	b.w	801418e <__retarget_lock_acquire_recursive>
 8014372:	bf00      	nop
 8014374:	20000284 	.word	0x20000284

08014378 <__malloc_unlock>:
 8014378:	4801      	ldr	r0, [pc, #4]	@ (8014380 <__malloc_unlock+0x8>)
 801437a:	f7ff bf09 	b.w	8014190 <__retarget_lock_release_recursive>
 801437e:	bf00      	nop
 8014380:	20000284 	.word	0x20000284

08014384 <__sfputc_r>:
 8014384:	6893      	ldr	r3, [r2, #8]
 8014386:	3b01      	subs	r3, #1
 8014388:	2b00      	cmp	r3, #0
 801438a:	b410      	push	{r4}
 801438c:	6093      	str	r3, [r2, #8]
 801438e:	da08      	bge.n	80143a2 <__sfputc_r+0x1e>
 8014390:	6994      	ldr	r4, [r2, #24]
 8014392:	42a3      	cmp	r3, r4
 8014394:	db01      	blt.n	801439a <__sfputc_r+0x16>
 8014396:	290a      	cmp	r1, #10
 8014398:	d103      	bne.n	80143a2 <__sfputc_r+0x1e>
 801439a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801439e:	f7ff bde8 	b.w	8013f72 <__swbuf_r>
 80143a2:	6813      	ldr	r3, [r2, #0]
 80143a4:	1c58      	adds	r0, r3, #1
 80143a6:	6010      	str	r0, [r2, #0]
 80143a8:	7019      	strb	r1, [r3, #0]
 80143aa:	4608      	mov	r0, r1
 80143ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143b0:	4770      	bx	lr

080143b2 <__sfputs_r>:
 80143b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143b4:	4606      	mov	r6, r0
 80143b6:	460f      	mov	r7, r1
 80143b8:	4614      	mov	r4, r2
 80143ba:	18d5      	adds	r5, r2, r3
 80143bc:	42ac      	cmp	r4, r5
 80143be:	d101      	bne.n	80143c4 <__sfputs_r+0x12>
 80143c0:	2000      	movs	r0, #0
 80143c2:	e007      	b.n	80143d4 <__sfputs_r+0x22>
 80143c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143c8:	463a      	mov	r2, r7
 80143ca:	4630      	mov	r0, r6
 80143cc:	f7ff ffda 	bl	8014384 <__sfputc_r>
 80143d0:	1c43      	adds	r3, r0, #1
 80143d2:	d1f3      	bne.n	80143bc <__sfputs_r+0xa>
 80143d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080143d8 <_vfiprintf_r>:
 80143d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143dc:	460d      	mov	r5, r1
 80143de:	b09d      	sub	sp, #116	@ 0x74
 80143e0:	4614      	mov	r4, r2
 80143e2:	4698      	mov	r8, r3
 80143e4:	4606      	mov	r6, r0
 80143e6:	b118      	cbz	r0, 80143f0 <_vfiprintf_r+0x18>
 80143e8:	6a03      	ldr	r3, [r0, #32]
 80143ea:	b90b      	cbnz	r3, 80143f0 <_vfiprintf_r+0x18>
 80143ec:	f7ff fcd8 	bl	8013da0 <__sinit>
 80143f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80143f2:	07d9      	lsls	r1, r3, #31
 80143f4:	d405      	bmi.n	8014402 <_vfiprintf_r+0x2a>
 80143f6:	89ab      	ldrh	r3, [r5, #12]
 80143f8:	059a      	lsls	r2, r3, #22
 80143fa:	d402      	bmi.n	8014402 <_vfiprintf_r+0x2a>
 80143fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80143fe:	f7ff fec6 	bl	801418e <__retarget_lock_acquire_recursive>
 8014402:	89ab      	ldrh	r3, [r5, #12]
 8014404:	071b      	lsls	r3, r3, #28
 8014406:	d501      	bpl.n	801440c <_vfiprintf_r+0x34>
 8014408:	692b      	ldr	r3, [r5, #16]
 801440a:	b99b      	cbnz	r3, 8014434 <_vfiprintf_r+0x5c>
 801440c:	4629      	mov	r1, r5
 801440e:	4630      	mov	r0, r6
 8014410:	f7ff fdee 	bl	8013ff0 <__swsetup_r>
 8014414:	b170      	cbz	r0, 8014434 <_vfiprintf_r+0x5c>
 8014416:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014418:	07dc      	lsls	r4, r3, #31
 801441a:	d504      	bpl.n	8014426 <_vfiprintf_r+0x4e>
 801441c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014420:	b01d      	add	sp, #116	@ 0x74
 8014422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014426:	89ab      	ldrh	r3, [r5, #12]
 8014428:	0598      	lsls	r0, r3, #22
 801442a:	d4f7      	bmi.n	801441c <_vfiprintf_r+0x44>
 801442c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801442e:	f7ff feaf 	bl	8014190 <__retarget_lock_release_recursive>
 8014432:	e7f3      	b.n	801441c <_vfiprintf_r+0x44>
 8014434:	2300      	movs	r3, #0
 8014436:	9309      	str	r3, [sp, #36]	@ 0x24
 8014438:	2320      	movs	r3, #32
 801443a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801443e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014442:	2330      	movs	r3, #48	@ 0x30
 8014444:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80145f4 <_vfiprintf_r+0x21c>
 8014448:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801444c:	f04f 0901 	mov.w	r9, #1
 8014450:	4623      	mov	r3, r4
 8014452:	469a      	mov	sl, r3
 8014454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014458:	b10a      	cbz	r2, 801445e <_vfiprintf_r+0x86>
 801445a:	2a25      	cmp	r2, #37	@ 0x25
 801445c:	d1f9      	bne.n	8014452 <_vfiprintf_r+0x7a>
 801445e:	ebba 0b04 	subs.w	fp, sl, r4
 8014462:	d00b      	beq.n	801447c <_vfiprintf_r+0xa4>
 8014464:	465b      	mov	r3, fp
 8014466:	4622      	mov	r2, r4
 8014468:	4629      	mov	r1, r5
 801446a:	4630      	mov	r0, r6
 801446c:	f7ff ffa1 	bl	80143b2 <__sfputs_r>
 8014470:	3001      	adds	r0, #1
 8014472:	f000 80a7 	beq.w	80145c4 <_vfiprintf_r+0x1ec>
 8014476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014478:	445a      	add	r2, fp
 801447a:	9209      	str	r2, [sp, #36]	@ 0x24
 801447c:	f89a 3000 	ldrb.w	r3, [sl]
 8014480:	2b00      	cmp	r3, #0
 8014482:	f000 809f 	beq.w	80145c4 <_vfiprintf_r+0x1ec>
 8014486:	2300      	movs	r3, #0
 8014488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801448c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014490:	f10a 0a01 	add.w	sl, sl, #1
 8014494:	9304      	str	r3, [sp, #16]
 8014496:	9307      	str	r3, [sp, #28]
 8014498:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801449c:	931a      	str	r3, [sp, #104]	@ 0x68
 801449e:	4654      	mov	r4, sl
 80144a0:	2205      	movs	r2, #5
 80144a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144a6:	4853      	ldr	r0, [pc, #332]	@ (80145f4 <_vfiprintf_r+0x21c>)
 80144a8:	f7fb fe6a 	bl	8010180 <memchr>
 80144ac:	9a04      	ldr	r2, [sp, #16]
 80144ae:	b9d8      	cbnz	r0, 80144e8 <_vfiprintf_r+0x110>
 80144b0:	06d1      	lsls	r1, r2, #27
 80144b2:	bf44      	itt	mi
 80144b4:	2320      	movmi	r3, #32
 80144b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144ba:	0713      	lsls	r3, r2, #28
 80144bc:	bf44      	itt	mi
 80144be:	232b      	movmi	r3, #43	@ 0x2b
 80144c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144c4:	f89a 3000 	ldrb.w	r3, [sl]
 80144c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80144ca:	d015      	beq.n	80144f8 <_vfiprintf_r+0x120>
 80144cc:	9a07      	ldr	r2, [sp, #28]
 80144ce:	4654      	mov	r4, sl
 80144d0:	2000      	movs	r0, #0
 80144d2:	f04f 0c0a 	mov.w	ip, #10
 80144d6:	4621      	mov	r1, r4
 80144d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144dc:	3b30      	subs	r3, #48	@ 0x30
 80144de:	2b09      	cmp	r3, #9
 80144e0:	d94b      	bls.n	801457a <_vfiprintf_r+0x1a2>
 80144e2:	b1b0      	cbz	r0, 8014512 <_vfiprintf_r+0x13a>
 80144e4:	9207      	str	r2, [sp, #28]
 80144e6:	e014      	b.n	8014512 <_vfiprintf_r+0x13a>
 80144e8:	eba0 0308 	sub.w	r3, r0, r8
 80144ec:	fa09 f303 	lsl.w	r3, r9, r3
 80144f0:	4313      	orrs	r3, r2
 80144f2:	9304      	str	r3, [sp, #16]
 80144f4:	46a2      	mov	sl, r4
 80144f6:	e7d2      	b.n	801449e <_vfiprintf_r+0xc6>
 80144f8:	9b03      	ldr	r3, [sp, #12]
 80144fa:	1d19      	adds	r1, r3, #4
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	9103      	str	r1, [sp, #12]
 8014500:	2b00      	cmp	r3, #0
 8014502:	bfbb      	ittet	lt
 8014504:	425b      	neglt	r3, r3
 8014506:	f042 0202 	orrlt.w	r2, r2, #2
 801450a:	9307      	strge	r3, [sp, #28]
 801450c:	9307      	strlt	r3, [sp, #28]
 801450e:	bfb8      	it	lt
 8014510:	9204      	strlt	r2, [sp, #16]
 8014512:	7823      	ldrb	r3, [r4, #0]
 8014514:	2b2e      	cmp	r3, #46	@ 0x2e
 8014516:	d10a      	bne.n	801452e <_vfiprintf_r+0x156>
 8014518:	7863      	ldrb	r3, [r4, #1]
 801451a:	2b2a      	cmp	r3, #42	@ 0x2a
 801451c:	d132      	bne.n	8014584 <_vfiprintf_r+0x1ac>
 801451e:	9b03      	ldr	r3, [sp, #12]
 8014520:	1d1a      	adds	r2, r3, #4
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	9203      	str	r2, [sp, #12]
 8014526:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801452a:	3402      	adds	r4, #2
 801452c:	9305      	str	r3, [sp, #20]
 801452e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014604 <_vfiprintf_r+0x22c>
 8014532:	7821      	ldrb	r1, [r4, #0]
 8014534:	2203      	movs	r2, #3
 8014536:	4650      	mov	r0, sl
 8014538:	f7fb fe22 	bl	8010180 <memchr>
 801453c:	b138      	cbz	r0, 801454e <_vfiprintf_r+0x176>
 801453e:	9b04      	ldr	r3, [sp, #16]
 8014540:	eba0 000a 	sub.w	r0, r0, sl
 8014544:	2240      	movs	r2, #64	@ 0x40
 8014546:	4082      	lsls	r2, r0
 8014548:	4313      	orrs	r3, r2
 801454a:	3401      	adds	r4, #1
 801454c:	9304      	str	r3, [sp, #16]
 801454e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014552:	4829      	ldr	r0, [pc, #164]	@ (80145f8 <_vfiprintf_r+0x220>)
 8014554:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014558:	2206      	movs	r2, #6
 801455a:	f7fb fe11 	bl	8010180 <memchr>
 801455e:	2800      	cmp	r0, #0
 8014560:	d03f      	beq.n	80145e2 <_vfiprintf_r+0x20a>
 8014562:	4b26      	ldr	r3, [pc, #152]	@ (80145fc <_vfiprintf_r+0x224>)
 8014564:	bb1b      	cbnz	r3, 80145ae <_vfiprintf_r+0x1d6>
 8014566:	9b03      	ldr	r3, [sp, #12]
 8014568:	3307      	adds	r3, #7
 801456a:	f023 0307 	bic.w	r3, r3, #7
 801456e:	3308      	adds	r3, #8
 8014570:	9303      	str	r3, [sp, #12]
 8014572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014574:	443b      	add	r3, r7
 8014576:	9309      	str	r3, [sp, #36]	@ 0x24
 8014578:	e76a      	b.n	8014450 <_vfiprintf_r+0x78>
 801457a:	fb0c 3202 	mla	r2, ip, r2, r3
 801457e:	460c      	mov	r4, r1
 8014580:	2001      	movs	r0, #1
 8014582:	e7a8      	b.n	80144d6 <_vfiprintf_r+0xfe>
 8014584:	2300      	movs	r3, #0
 8014586:	3401      	adds	r4, #1
 8014588:	9305      	str	r3, [sp, #20]
 801458a:	4619      	mov	r1, r3
 801458c:	f04f 0c0a 	mov.w	ip, #10
 8014590:	4620      	mov	r0, r4
 8014592:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014596:	3a30      	subs	r2, #48	@ 0x30
 8014598:	2a09      	cmp	r2, #9
 801459a:	d903      	bls.n	80145a4 <_vfiprintf_r+0x1cc>
 801459c:	2b00      	cmp	r3, #0
 801459e:	d0c6      	beq.n	801452e <_vfiprintf_r+0x156>
 80145a0:	9105      	str	r1, [sp, #20]
 80145a2:	e7c4      	b.n	801452e <_vfiprintf_r+0x156>
 80145a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80145a8:	4604      	mov	r4, r0
 80145aa:	2301      	movs	r3, #1
 80145ac:	e7f0      	b.n	8014590 <_vfiprintf_r+0x1b8>
 80145ae:	ab03      	add	r3, sp, #12
 80145b0:	9300      	str	r3, [sp, #0]
 80145b2:	462a      	mov	r2, r5
 80145b4:	4b12      	ldr	r3, [pc, #72]	@ (8014600 <_vfiprintf_r+0x228>)
 80145b6:	a904      	add	r1, sp, #16
 80145b8:	4630      	mov	r0, r6
 80145ba:	f3af 8000 	nop.w
 80145be:	4607      	mov	r7, r0
 80145c0:	1c78      	adds	r0, r7, #1
 80145c2:	d1d6      	bne.n	8014572 <_vfiprintf_r+0x19a>
 80145c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80145c6:	07d9      	lsls	r1, r3, #31
 80145c8:	d405      	bmi.n	80145d6 <_vfiprintf_r+0x1fe>
 80145ca:	89ab      	ldrh	r3, [r5, #12]
 80145cc:	059a      	lsls	r2, r3, #22
 80145ce:	d402      	bmi.n	80145d6 <_vfiprintf_r+0x1fe>
 80145d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80145d2:	f7ff fddd 	bl	8014190 <__retarget_lock_release_recursive>
 80145d6:	89ab      	ldrh	r3, [r5, #12]
 80145d8:	065b      	lsls	r3, r3, #25
 80145da:	f53f af1f 	bmi.w	801441c <_vfiprintf_r+0x44>
 80145de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80145e0:	e71e      	b.n	8014420 <_vfiprintf_r+0x48>
 80145e2:	ab03      	add	r3, sp, #12
 80145e4:	9300      	str	r3, [sp, #0]
 80145e6:	462a      	mov	r2, r5
 80145e8:	4b05      	ldr	r3, [pc, #20]	@ (8014600 <_vfiprintf_r+0x228>)
 80145ea:	a904      	add	r1, sp, #16
 80145ec:	4630      	mov	r0, r6
 80145ee:	f000 f879 	bl	80146e4 <_printf_i>
 80145f2:	e7e4      	b.n	80145be <_vfiprintf_r+0x1e6>
 80145f4:	08014cf8 	.word	0x08014cf8
 80145f8:	08014d02 	.word	0x08014d02
 80145fc:	00000000 	.word	0x00000000
 8014600:	080143b3 	.word	0x080143b3
 8014604:	08014cfe 	.word	0x08014cfe

08014608 <_printf_common>:
 8014608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801460c:	4616      	mov	r6, r2
 801460e:	4698      	mov	r8, r3
 8014610:	688a      	ldr	r2, [r1, #8]
 8014612:	690b      	ldr	r3, [r1, #16]
 8014614:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014618:	4293      	cmp	r3, r2
 801461a:	bfb8      	it	lt
 801461c:	4613      	movlt	r3, r2
 801461e:	6033      	str	r3, [r6, #0]
 8014620:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014624:	4607      	mov	r7, r0
 8014626:	460c      	mov	r4, r1
 8014628:	b10a      	cbz	r2, 801462e <_printf_common+0x26>
 801462a:	3301      	adds	r3, #1
 801462c:	6033      	str	r3, [r6, #0]
 801462e:	6823      	ldr	r3, [r4, #0]
 8014630:	0699      	lsls	r1, r3, #26
 8014632:	bf42      	ittt	mi
 8014634:	6833      	ldrmi	r3, [r6, #0]
 8014636:	3302      	addmi	r3, #2
 8014638:	6033      	strmi	r3, [r6, #0]
 801463a:	6825      	ldr	r5, [r4, #0]
 801463c:	f015 0506 	ands.w	r5, r5, #6
 8014640:	d106      	bne.n	8014650 <_printf_common+0x48>
 8014642:	f104 0a19 	add.w	sl, r4, #25
 8014646:	68e3      	ldr	r3, [r4, #12]
 8014648:	6832      	ldr	r2, [r6, #0]
 801464a:	1a9b      	subs	r3, r3, r2
 801464c:	42ab      	cmp	r3, r5
 801464e:	dc26      	bgt.n	801469e <_printf_common+0x96>
 8014650:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014654:	6822      	ldr	r2, [r4, #0]
 8014656:	3b00      	subs	r3, #0
 8014658:	bf18      	it	ne
 801465a:	2301      	movne	r3, #1
 801465c:	0692      	lsls	r2, r2, #26
 801465e:	d42b      	bmi.n	80146b8 <_printf_common+0xb0>
 8014660:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014664:	4641      	mov	r1, r8
 8014666:	4638      	mov	r0, r7
 8014668:	47c8      	blx	r9
 801466a:	3001      	adds	r0, #1
 801466c:	d01e      	beq.n	80146ac <_printf_common+0xa4>
 801466e:	6823      	ldr	r3, [r4, #0]
 8014670:	6922      	ldr	r2, [r4, #16]
 8014672:	f003 0306 	and.w	r3, r3, #6
 8014676:	2b04      	cmp	r3, #4
 8014678:	bf02      	ittt	eq
 801467a:	68e5      	ldreq	r5, [r4, #12]
 801467c:	6833      	ldreq	r3, [r6, #0]
 801467e:	1aed      	subeq	r5, r5, r3
 8014680:	68a3      	ldr	r3, [r4, #8]
 8014682:	bf0c      	ite	eq
 8014684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014688:	2500      	movne	r5, #0
 801468a:	4293      	cmp	r3, r2
 801468c:	bfc4      	itt	gt
 801468e:	1a9b      	subgt	r3, r3, r2
 8014690:	18ed      	addgt	r5, r5, r3
 8014692:	2600      	movs	r6, #0
 8014694:	341a      	adds	r4, #26
 8014696:	42b5      	cmp	r5, r6
 8014698:	d11a      	bne.n	80146d0 <_printf_common+0xc8>
 801469a:	2000      	movs	r0, #0
 801469c:	e008      	b.n	80146b0 <_printf_common+0xa8>
 801469e:	2301      	movs	r3, #1
 80146a0:	4652      	mov	r2, sl
 80146a2:	4641      	mov	r1, r8
 80146a4:	4638      	mov	r0, r7
 80146a6:	47c8      	blx	r9
 80146a8:	3001      	adds	r0, #1
 80146aa:	d103      	bne.n	80146b4 <_printf_common+0xac>
 80146ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80146b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146b4:	3501      	adds	r5, #1
 80146b6:	e7c6      	b.n	8014646 <_printf_common+0x3e>
 80146b8:	18e1      	adds	r1, r4, r3
 80146ba:	1c5a      	adds	r2, r3, #1
 80146bc:	2030      	movs	r0, #48	@ 0x30
 80146be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80146c2:	4422      	add	r2, r4
 80146c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80146c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80146cc:	3302      	adds	r3, #2
 80146ce:	e7c7      	b.n	8014660 <_printf_common+0x58>
 80146d0:	2301      	movs	r3, #1
 80146d2:	4622      	mov	r2, r4
 80146d4:	4641      	mov	r1, r8
 80146d6:	4638      	mov	r0, r7
 80146d8:	47c8      	blx	r9
 80146da:	3001      	adds	r0, #1
 80146dc:	d0e6      	beq.n	80146ac <_printf_common+0xa4>
 80146de:	3601      	adds	r6, #1
 80146e0:	e7d9      	b.n	8014696 <_printf_common+0x8e>
	...

080146e4 <_printf_i>:
 80146e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80146e8:	7e0f      	ldrb	r7, [r1, #24]
 80146ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80146ec:	2f78      	cmp	r7, #120	@ 0x78
 80146ee:	4691      	mov	r9, r2
 80146f0:	4680      	mov	r8, r0
 80146f2:	460c      	mov	r4, r1
 80146f4:	469a      	mov	sl, r3
 80146f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80146fa:	d807      	bhi.n	801470c <_printf_i+0x28>
 80146fc:	2f62      	cmp	r7, #98	@ 0x62
 80146fe:	d80a      	bhi.n	8014716 <_printf_i+0x32>
 8014700:	2f00      	cmp	r7, #0
 8014702:	f000 80d1 	beq.w	80148a8 <_printf_i+0x1c4>
 8014706:	2f58      	cmp	r7, #88	@ 0x58
 8014708:	f000 80b8 	beq.w	801487c <_printf_i+0x198>
 801470c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014710:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014714:	e03a      	b.n	801478c <_printf_i+0xa8>
 8014716:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801471a:	2b15      	cmp	r3, #21
 801471c:	d8f6      	bhi.n	801470c <_printf_i+0x28>
 801471e:	a101      	add	r1, pc, #4	@ (adr r1, 8014724 <_printf_i+0x40>)
 8014720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014724:	0801477d 	.word	0x0801477d
 8014728:	08014791 	.word	0x08014791
 801472c:	0801470d 	.word	0x0801470d
 8014730:	0801470d 	.word	0x0801470d
 8014734:	0801470d 	.word	0x0801470d
 8014738:	0801470d 	.word	0x0801470d
 801473c:	08014791 	.word	0x08014791
 8014740:	0801470d 	.word	0x0801470d
 8014744:	0801470d 	.word	0x0801470d
 8014748:	0801470d 	.word	0x0801470d
 801474c:	0801470d 	.word	0x0801470d
 8014750:	0801488f 	.word	0x0801488f
 8014754:	080147bb 	.word	0x080147bb
 8014758:	08014849 	.word	0x08014849
 801475c:	0801470d 	.word	0x0801470d
 8014760:	0801470d 	.word	0x0801470d
 8014764:	080148b1 	.word	0x080148b1
 8014768:	0801470d 	.word	0x0801470d
 801476c:	080147bb 	.word	0x080147bb
 8014770:	0801470d 	.word	0x0801470d
 8014774:	0801470d 	.word	0x0801470d
 8014778:	08014851 	.word	0x08014851
 801477c:	6833      	ldr	r3, [r6, #0]
 801477e:	1d1a      	adds	r2, r3, #4
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	6032      	str	r2, [r6, #0]
 8014784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014788:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801478c:	2301      	movs	r3, #1
 801478e:	e09c      	b.n	80148ca <_printf_i+0x1e6>
 8014790:	6833      	ldr	r3, [r6, #0]
 8014792:	6820      	ldr	r0, [r4, #0]
 8014794:	1d19      	adds	r1, r3, #4
 8014796:	6031      	str	r1, [r6, #0]
 8014798:	0606      	lsls	r6, r0, #24
 801479a:	d501      	bpl.n	80147a0 <_printf_i+0xbc>
 801479c:	681d      	ldr	r5, [r3, #0]
 801479e:	e003      	b.n	80147a8 <_printf_i+0xc4>
 80147a0:	0645      	lsls	r5, r0, #25
 80147a2:	d5fb      	bpl.n	801479c <_printf_i+0xb8>
 80147a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80147a8:	2d00      	cmp	r5, #0
 80147aa:	da03      	bge.n	80147b4 <_printf_i+0xd0>
 80147ac:	232d      	movs	r3, #45	@ 0x2d
 80147ae:	426d      	negs	r5, r5
 80147b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80147b4:	4858      	ldr	r0, [pc, #352]	@ (8014918 <_printf_i+0x234>)
 80147b6:	230a      	movs	r3, #10
 80147b8:	e011      	b.n	80147de <_printf_i+0xfa>
 80147ba:	6821      	ldr	r1, [r4, #0]
 80147bc:	6833      	ldr	r3, [r6, #0]
 80147be:	0608      	lsls	r0, r1, #24
 80147c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80147c4:	d402      	bmi.n	80147cc <_printf_i+0xe8>
 80147c6:	0649      	lsls	r1, r1, #25
 80147c8:	bf48      	it	mi
 80147ca:	b2ad      	uxthmi	r5, r5
 80147cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80147ce:	4852      	ldr	r0, [pc, #328]	@ (8014918 <_printf_i+0x234>)
 80147d0:	6033      	str	r3, [r6, #0]
 80147d2:	bf14      	ite	ne
 80147d4:	230a      	movne	r3, #10
 80147d6:	2308      	moveq	r3, #8
 80147d8:	2100      	movs	r1, #0
 80147da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80147de:	6866      	ldr	r6, [r4, #4]
 80147e0:	60a6      	str	r6, [r4, #8]
 80147e2:	2e00      	cmp	r6, #0
 80147e4:	db05      	blt.n	80147f2 <_printf_i+0x10e>
 80147e6:	6821      	ldr	r1, [r4, #0]
 80147e8:	432e      	orrs	r6, r5
 80147ea:	f021 0104 	bic.w	r1, r1, #4
 80147ee:	6021      	str	r1, [r4, #0]
 80147f0:	d04b      	beq.n	801488a <_printf_i+0x1a6>
 80147f2:	4616      	mov	r6, r2
 80147f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80147f8:	fb03 5711 	mls	r7, r3, r1, r5
 80147fc:	5dc7      	ldrb	r7, [r0, r7]
 80147fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014802:	462f      	mov	r7, r5
 8014804:	42bb      	cmp	r3, r7
 8014806:	460d      	mov	r5, r1
 8014808:	d9f4      	bls.n	80147f4 <_printf_i+0x110>
 801480a:	2b08      	cmp	r3, #8
 801480c:	d10b      	bne.n	8014826 <_printf_i+0x142>
 801480e:	6823      	ldr	r3, [r4, #0]
 8014810:	07df      	lsls	r7, r3, #31
 8014812:	d508      	bpl.n	8014826 <_printf_i+0x142>
 8014814:	6923      	ldr	r3, [r4, #16]
 8014816:	6861      	ldr	r1, [r4, #4]
 8014818:	4299      	cmp	r1, r3
 801481a:	bfde      	ittt	le
 801481c:	2330      	movle	r3, #48	@ 0x30
 801481e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014822:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8014826:	1b92      	subs	r2, r2, r6
 8014828:	6122      	str	r2, [r4, #16]
 801482a:	f8cd a000 	str.w	sl, [sp]
 801482e:	464b      	mov	r3, r9
 8014830:	aa03      	add	r2, sp, #12
 8014832:	4621      	mov	r1, r4
 8014834:	4640      	mov	r0, r8
 8014836:	f7ff fee7 	bl	8014608 <_printf_common>
 801483a:	3001      	adds	r0, #1
 801483c:	d14a      	bne.n	80148d4 <_printf_i+0x1f0>
 801483e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014842:	b004      	add	sp, #16
 8014844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014848:	6823      	ldr	r3, [r4, #0]
 801484a:	f043 0320 	orr.w	r3, r3, #32
 801484e:	6023      	str	r3, [r4, #0]
 8014850:	4832      	ldr	r0, [pc, #200]	@ (801491c <_printf_i+0x238>)
 8014852:	2778      	movs	r7, #120	@ 0x78
 8014854:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014858:	6823      	ldr	r3, [r4, #0]
 801485a:	6831      	ldr	r1, [r6, #0]
 801485c:	061f      	lsls	r7, r3, #24
 801485e:	f851 5b04 	ldr.w	r5, [r1], #4
 8014862:	d402      	bmi.n	801486a <_printf_i+0x186>
 8014864:	065f      	lsls	r7, r3, #25
 8014866:	bf48      	it	mi
 8014868:	b2ad      	uxthmi	r5, r5
 801486a:	6031      	str	r1, [r6, #0]
 801486c:	07d9      	lsls	r1, r3, #31
 801486e:	bf44      	itt	mi
 8014870:	f043 0320 	orrmi.w	r3, r3, #32
 8014874:	6023      	strmi	r3, [r4, #0]
 8014876:	b11d      	cbz	r5, 8014880 <_printf_i+0x19c>
 8014878:	2310      	movs	r3, #16
 801487a:	e7ad      	b.n	80147d8 <_printf_i+0xf4>
 801487c:	4826      	ldr	r0, [pc, #152]	@ (8014918 <_printf_i+0x234>)
 801487e:	e7e9      	b.n	8014854 <_printf_i+0x170>
 8014880:	6823      	ldr	r3, [r4, #0]
 8014882:	f023 0320 	bic.w	r3, r3, #32
 8014886:	6023      	str	r3, [r4, #0]
 8014888:	e7f6      	b.n	8014878 <_printf_i+0x194>
 801488a:	4616      	mov	r6, r2
 801488c:	e7bd      	b.n	801480a <_printf_i+0x126>
 801488e:	6833      	ldr	r3, [r6, #0]
 8014890:	6825      	ldr	r5, [r4, #0]
 8014892:	6961      	ldr	r1, [r4, #20]
 8014894:	1d18      	adds	r0, r3, #4
 8014896:	6030      	str	r0, [r6, #0]
 8014898:	062e      	lsls	r6, r5, #24
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	d501      	bpl.n	80148a2 <_printf_i+0x1be>
 801489e:	6019      	str	r1, [r3, #0]
 80148a0:	e002      	b.n	80148a8 <_printf_i+0x1c4>
 80148a2:	0668      	lsls	r0, r5, #25
 80148a4:	d5fb      	bpl.n	801489e <_printf_i+0x1ba>
 80148a6:	8019      	strh	r1, [r3, #0]
 80148a8:	2300      	movs	r3, #0
 80148aa:	6123      	str	r3, [r4, #16]
 80148ac:	4616      	mov	r6, r2
 80148ae:	e7bc      	b.n	801482a <_printf_i+0x146>
 80148b0:	6833      	ldr	r3, [r6, #0]
 80148b2:	1d1a      	adds	r2, r3, #4
 80148b4:	6032      	str	r2, [r6, #0]
 80148b6:	681e      	ldr	r6, [r3, #0]
 80148b8:	6862      	ldr	r2, [r4, #4]
 80148ba:	2100      	movs	r1, #0
 80148bc:	4630      	mov	r0, r6
 80148be:	f7fb fc5f 	bl	8010180 <memchr>
 80148c2:	b108      	cbz	r0, 80148c8 <_printf_i+0x1e4>
 80148c4:	1b80      	subs	r0, r0, r6
 80148c6:	6060      	str	r0, [r4, #4]
 80148c8:	6863      	ldr	r3, [r4, #4]
 80148ca:	6123      	str	r3, [r4, #16]
 80148cc:	2300      	movs	r3, #0
 80148ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80148d2:	e7aa      	b.n	801482a <_printf_i+0x146>
 80148d4:	6923      	ldr	r3, [r4, #16]
 80148d6:	4632      	mov	r2, r6
 80148d8:	4649      	mov	r1, r9
 80148da:	4640      	mov	r0, r8
 80148dc:	47d0      	blx	sl
 80148de:	3001      	adds	r0, #1
 80148e0:	d0ad      	beq.n	801483e <_printf_i+0x15a>
 80148e2:	6823      	ldr	r3, [r4, #0]
 80148e4:	079b      	lsls	r3, r3, #30
 80148e6:	d413      	bmi.n	8014910 <_printf_i+0x22c>
 80148e8:	68e0      	ldr	r0, [r4, #12]
 80148ea:	9b03      	ldr	r3, [sp, #12]
 80148ec:	4298      	cmp	r0, r3
 80148ee:	bfb8      	it	lt
 80148f0:	4618      	movlt	r0, r3
 80148f2:	e7a6      	b.n	8014842 <_printf_i+0x15e>
 80148f4:	2301      	movs	r3, #1
 80148f6:	4632      	mov	r2, r6
 80148f8:	4649      	mov	r1, r9
 80148fa:	4640      	mov	r0, r8
 80148fc:	47d0      	blx	sl
 80148fe:	3001      	adds	r0, #1
 8014900:	d09d      	beq.n	801483e <_printf_i+0x15a>
 8014902:	3501      	adds	r5, #1
 8014904:	68e3      	ldr	r3, [r4, #12]
 8014906:	9903      	ldr	r1, [sp, #12]
 8014908:	1a5b      	subs	r3, r3, r1
 801490a:	42ab      	cmp	r3, r5
 801490c:	dcf2      	bgt.n	80148f4 <_printf_i+0x210>
 801490e:	e7eb      	b.n	80148e8 <_printf_i+0x204>
 8014910:	2500      	movs	r5, #0
 8014912:	f104 0619 	add.w	r6, r4, #25
 8014916:	e7f5      	b.n	8014904 <_printf_i+0x220>
 8014918:	08014d09 	.word	0x08014d09
 801491c:	08014d1a 	.word	0x08014d1a

08014920 <__sflush_r>:
 8014920:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014928:	0716      	lsls	r6, r2, #28
 801492a:	4605      	mov	r5, r0
 801492c:	460c      	mov	r4, r1
 801492e:	d454      	bmi.n	80149da <__sflush_r+0xba>
 8014930:	684b      	ldr	r3, [r1, #4]
 8014932:	2b00      	cmp	r3, #0
 8014934:	dc02      	bgt.n	801493c <__sflush_r+0x1c>
 8014936:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014938:	2b00      	cmp	r3, #0
 801493a:	dd48      	ble.n	80149ce <__sflush_r+0xae>
 801493c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801493e:	2e00      	cmp	r6, #0
 8014940:	d045      	beq.n	80149ce <__sflush_r+0xae>
 8014942:	2300      	movs	r3, #0
 8014944:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014948:	682f      	ldr	r7, [r5, #0]
 801494a:	6a21      	ldr	r1, [r4, #32]
 801494c:	602b      	str	r3, [r5, #0]
 801494e:	d030      	beq.n	80149b2 <__sflush_r+0x92>
 8014950:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014952:	89a3      	ldrh	r3, [r4, #12]
 8014954:	0759      	lsls	r1, r3, #29
 8014956:	d505      	bpl.n	8014964 <__sflush_r+0x44>
 8014958:	6863      	ldr	r3, [r4, #4]
 801495a:	1ad2      	subs	r2, r2, r3
 801495c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801495e:	b10b      	cbz	r3, 8014964 <__sflush_r+0x44>
 8014960:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014962:	1ad2      	subs	r2, r2, r3
 8014964:	2300      	movs	r3, #0
 8014966:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014968:	6a21      	ldr	r1, [r4, #32]
 801496a:	4628      	mov	r0, r5
 801496c:	47b0      	blx	r6
 801496e:	1c43      	adds	r3, r0, #1
 8014970:	89a3      	ldrh	r3, [r4, #12]
 8014972:	d106      	bne.n	8014982 <__sflush_r+0x62>
 8014974:	6829      	ldr	r1, [r5, #0]
 8014976:	291d      	cmp	r1, #29
 8014978:	d82b      	bhi.n	80149d2 <__sflush_r+0xb2>
 801497a:	4a2a      	ldr	r2, [pc, #168]	@ (8014a24 <__sflush_r+0x104>)
 801497c:	40ca      	lsrs	r2, r1
 801497e:	07d6      	lsls	r6, r2, #31
 8014980:	d527      	bpl.n	80149d2 <__sflush_r+0xb2>
 8014982:	2200      	movs	r2, #0
 8014984:	6062      	str	r2, [r4, #4]
 8014986:	04d9      	lsls	r1, r3, #19
 8014988:	6922      	ldr	r2, [r4, #16]
 801498a:	6022      	str	r2, [r4, #0]
 801498c:	d504      	bpl.n	8014998 <__sflush_r+0x78>
 801498e:	1c42      	adds	r2, r0, #1
 8014990:	d101      	bne.n	8014996 <__sflush_r+0x76>
 8014992:	682b      	ldr	r3, [r5, #0]
 8014994:	b903      	cbnz	r3, 8014998 <__sflush_r+0x78>
 8014996:	6560      	str	r0, [r4, #84]	@ 0x54
 8014998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801499a:	602f      	str	r7, [r5, #0]
 801499c:	b1b9      	cbz	r1, 80149ce <__sflush_r+0xae>
 801499e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80149a2:	4299      	cmp	r1, r3
 80149a4:	d002      	beq.n	80149ac <__sflush_r+0x8c>
 80149a6:	4628      	mov	r0, r5
 80149a8:	f7ff fbf4 	bl	8014194 <_free_r>
 80149ac:	2300      	movs	r3, #0
 80149ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80149b0:	e00d      	b.n	80149ce <__sflush_r+0xae>
 80149b2:	2301      	movs	r3, #1
 80149b4:	4628      	mov	r0, r5
 80149b6:	47b0      	blx	r6
 80149b8:	4602      	mov	r2, r0
 80149ba:	1c50      	adds	r0, r2, #1
 80149bc:	d1c9      	bne.n	8014952 <__sflush_r+0x32>
 80149be:	682b      	ldr	r3, [r5, #0]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d0c6      	beq.n	8014952 <__sflush_r+0x32>
 80149c4:	2b1d      	cmp	r3, #29
 80149c6:	d001      	beq.n	80149cc <__sflush_r+0xac>
 80149c8:	2b16      	cmp	r3, #22
 80149ca:	d11e      	bne.n	8014a0a <__sflush_r+0xea>
 80149cc:	602f      	str	r7, [r5, #0]
 80149ce:	2000      	movs	r0, #0
 80149d0:	e022      	b.n	8014a18 <__sflush_r+0xf8>
 80149d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80149d6:	b21b      	sxth	r3, r3
 80149d8:	e01b      	b.n	8014a12 <__sflush_r+0xf2>
 80149da:	690f      	ldr	r7, [r1, #16]
 80149dc:	2f00      	cmp	r7, #0
 80149de:	d0f6      	beq.n	80149ce <__sflush_r+0xae>
 80149e0:	0793      	lsls	r3, r2, #30
 80149e2:	680e      	ldr	r6, [r1, #0]
 80149e4:	bf08      	it	eq
 80149e6:	694b      	ldreq	r3, [r1, #20]
 80149e8:	600f      	str	r7, [r1, #0]
 80149ea:	bf18      	it	ne
 80149ec:	2300      	movne	r3, #0
 80149ee:	eba6 0807 	sub.w	r8, r6, r7
 80149f2:	608b      	str	r3, [r1, #8]
 80149f4:	f1b8 0f00 	cmp.w	r8, #0
 80149f8:	dde9      	ble.n	80149ce <__sflush_r+0xae>
 80149fa:	6a21      	ldr	r1, [r4, #32]
 80149fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80149fe:	4643      	mov	r3, r8
 8014a00:	463a      	mov	r2, r7
 8014a02:	4628      	mov	r0, r5
 8014a04:	47b0      	blx	r6
 8014a06:	2800      	cmp	r0, #0
 8014a08:	dc08      	bgt.n	8014a1c <__sflush_r+0xfc>
 8014a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a12:	81a3      	strh	r3, [r4, #12]
 8014a14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a1c:	4407      	add	r7, r0
 8014a1e:	eba8 0800 	sub.w	r8, r8, r0
 8014a22:	e7e7      	b.n	80149f4 <__sflush_r+0xd4>
 8014a24:	20400001 	.word	0x20400001

08014a28 <_fflush_r>:
 8014a28:	b538      	push	{r3, r4, r5, lr}
 8014a2a:	690b      	ldr	r3, [r1, #16]
 8014a2c:	4605      	mov	r5, r0
 8014a2e:	460c      	mov	r4, r1
 8014a30:	b913      	cbnz	r3, 8014a38 <_fflush_r+0x10>
 8014a32:	2500      	movs	r5, #0
 8014a34:	4628      	mov	r0, r5
 8014a36:	bd38      	pop	{r3, r4, r5, pc}
 8014a38:	b118      	cbz	r0, 8014a42 <_fflush_r+0x1a>
 8014a3a:	6a03      	ldr	r3, [r0, #32]
 8014a3c:	b90b      	cbnz	r3, 8014a42 <_fflush_r+0x1a>
 8014a3e:	f7ff f9af 	bl	8013da0 <__sinit>
 8014a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d0f3      	beq.n	8014a32 <_fflush_r+0xa>
 8014a4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014a4c:	07d0      	lsls	r0, r2, #31
 8014a4e:	d404      	bmi.n	8014a5a <_fflush_r+0x32>
 8014a50:	0599      	lsls	r1, r3, #22
 8014a52:	d402      	bmi.n	8014a5a <_fflush_r+0x32>
 8014a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a56:	f7ff fb9a 	bl	801418e <__retarget_lock_acquire_recursive>
 8014a5a:	4628      	mov	r0, r5
 8014a5c:	4621      	mov	r1, r4
 8014a5e:	f7ff ff5f 	bl	8014920 <__sflush_r>
 8014a62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014a64:	07da      	lsls	r2, r3, #31
 8014a66:	4605      	mov	r5, r0
 8014a68:	d4e4      	bmi.n	8014a34 <_fflush_r+0xc>
 8014a6a:	89a3      	ldrh	r3, [r4, #12]
 8014a6c:	059b      	lsls	r3, r3, #22
 8014a6e:	d4e1      	bmi.n	8014a34 <_fflush_r+0xc>
 8014a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a72:	f7ff fb8d 	bl	8014190 <__retarget_lock_release_recursive>
 8014a76:	e7dd      	b.n	8014a34 <_fflush_r+0xc>

08014a78 <__swhatbuf_r>:
 8014a78:	b570      	push	{r4, r5, r6, lr}
 8014a7a:	460c      	mov	r4, r1
 8014a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a80:	2900      	cmp	r1, #0
 8014a82:	b096      	sub	sp, #88	@ 0x58
 8014a84:	4615      	mov	r5, r2
 8014a86:	461e      	mov	r6, r3
 8014a88:	da0d      	bge.n	8014aa6 <__swhatbuf_r+0x2e>
 8014a8a:	89a3      	ldrh	r3, [r4, #12]
 8014a8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014a90:	f04f 0100 	mov.w	r1, #0
 8014a94:	bf14      	ite	ne
 8014a96:	2340      	movne	r3, #64	@ 0x40
 8014a98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014a9c:	2000      	movs	r0, #0
 8014a9e:	6031      	str	r1, [r6, #0]
 8014aa0:	602b      	str	r3, [r5, #0]
 8014aa2:	b016      	add	sp, #88	@ 0x58
 8014aa4:	bd70      	pop	{r4, r5, r6, pc}
 8014aa6:	466a      	mov	r2, sp
 8014aa8:	f000 f848 	bl	8014b3c <_fstat_r>
 8014aac:	2800      	cmp	r0, #0
 8014aae:	dbec      	blt.n	8014a8a <__swhatbuf_r+0x12>
 8014ab0:	9901      	ldr	r1, [sp, #4]
 8014ab2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014ab6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014aba:	4259      	negs	r1, r3
 8014abc:	4159      	adcs	r1, r3
 8014abe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014ac2:	e7eb      	b.n	8014a9c <__swhatbuf_r+0x24>

08014ac4 <__smakebuf_r>:
 8014ac4:	898b      	ldrh	r3, [r1, #12]
 8014ac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ac8:	079d      	lsls	r5, r3, #30
 8014aca:	4606      	mov	r6, r0
 8014acc:	460c      	mov	r4, r1
 8014ace:	d507      	bpl.n	8014ae0 <__smakebuf_r+0x1c>
 8014ad0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014ad4:	6023      	str	r3, [r4, #0]
 8014ad6:	6123      	str	r3, [r4, #16]
 8014ad8:	2301      	movs	r3, #1
 8014ada:	6163      	str	r3, [r4, #20]
 8014adc:	b003      	add	sp, #12
 8014ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ae0:	ab01      	add	r3, sp, #4
 8014ae2:	466a      	mov	r2, sp
 8014ae4:	f7ff ffc8 	bl	8014a78 <__swhatbuf_r>
 8014ae8:	9f00      	ldr	r7, [sp, #0]
 8014aea:	4605      	mov	r5, r0
 8014aec:	4639      	mov	r1, r7
 8014aee:	4630      	mov	r0, r6
 8014af0:	f7ff fbbc 	bl	801426c <_malloc_r>
 8014af4:	b948      	cbnz	r0, 8014b0a <__smakebuf_r+0x46>
 8014af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014afa:	059a      	lsls	r2, r3, #22
 8014afc:	d4ee      	bmi.n	8014adc <__smakebuf_r+0x18>
 8014afe:	f023 0303 	bic.w	r3, r3, #3
 8014b02:	f043 0302 	orr.w	r3, r3, #2
 8014b06:	81a3      	strh	r3, [r4, #12]
 8014b08:	e7e2      	b.n	8014ad0 <__smakebuf_r+0xc>
 8014b0a:	89a3      	ldrh	r3, [r4, #12]
 8014b0c:	6020      	str	r0, [r4, #0]
 8014b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014b12:	81a3      	strh	r3, [r4, #12]
 8014b14:	9b01      	ldr	r3, [sp, #4]
 8014b16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014b1a:	b15b      	cbz	r3, 8014b34 <__smakebuf_r+0x70>
 8014b1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b20:	4630      	mov	r0, r6
 8014b22:	f000 f81d 	bl	8014b60 <_isatty_r>
 8014b26:	b128      	cbz	r0, 8014b34 <__smakebuf_r+0x70>
 8014b28:	89a3      	ldrh	r3, [r4, #12]
 8014b2a:	f023 0303 	bic.w	r3, r3, #3
 8014b2e:	f043 0301 	orr.w	r3, r3, #1
 8014b32:	81a3      	strh	r3, [r4, #12]
 8014b34:	89a3      	ldrh	r3, [r4, #12]
 8014b36:	431d      	orrs	r5, r3
 8014b38:	81a5      	strh	r5, [r4, #12]
 8014b3a:	e7cf      	b.n	8014adc <__smakebuf_r+0x18>

08014b3c <_fstat_r>:
 8014b3c:	b538      	push	{r3, r4, r5, lr}
 8014b3e:	4d07      	ldr	r5, [pc, #28]	@ (8014b5c <_fstat_r+0x20>)
 8014b40:	2300      	movs	r3, #0
 8014b42:	4604      	mov	r4, r0
 8014b44:	4608      	mov	r0, r1
 8014b46:	4611      	mov	r1, r2
 8014b48:	602b      	str	r3, [r5, #0]
 8014b4a:	f7fb ff61 	bl	8010a10 <_fstat>
 8014b4e:	1c43      	adds	r3, r0, #1
 8014b50:	d102      	bne.n	8014b58 <_fstat_r+0x1c>
 8014b52:	682b      	ldr	r3, [r5, #0]
 8014b54:	b103      	cbz	r3, 8014b58 <_fstat_r+0x1c>
 8014b56:	6023      	str	r3, [r4, #0]
 8014b58:	bd38      	pop	{r3, r4, r5, pc}
 8014b5a:	bf00      	nop
 8014b5c:	20000280 	.word	0x20000280

08014b60 <_isatty_r>:
 8014b60:	b538      	push	{r3, r4, r5, lr}
 8014b62:	4d06      	ldr	r5, [pc, #24]	@ (8014b7c <_isatty_r+0x1c>)
 8014b64:	2300      	movs	r3, #0
 8014b66:	4604      	mov	r4, r0
 8014b68:	4608      	mov	r0, r1
 8014b6a:	602b      	str	r3, [r5, #0]
 8014b6c:	f7fb ff60 	bl	8010a30 <_isatty>
 8014b70:	1c43      	adds	r3, r0, #1
 8014b72:	d102      	bne.n	8014b7a <_isatty_r+0x1a>
 8014b74:	682b      	ldr	r3, [r5, #0]
 8014b76:	b103      	cbz	r3, 8014b7a <_isatty_r+0x1a>
 8014b78:	6023      	str	r3, [r4, #0]
 8014b7a:	bd38      	pop	{r3, r4, r5, pc}
 8014b7c:	20000280 	.word	0x20000280

08014b80 <_sbrk_r>:
 8014b80:	b538      	push	{r3, r4, r5, lr}
 8014b82:	4d06      	ldr	r5, [pc, #24]	@ (8014b9c <_sbrk_r+0x1c>)
 8014b84:	2300      	movs	r3, #0
 8014b86:	4604      	mov	r4, r0
 8014b88:	4608      	mov	r0, r1
 8014b8a:	602b      	str	r3, [r5, #0]
 8014b8c:	f7fb ff68 	bl	8010a60 <_sbrk>
 8014b90:	1c43      	adds	r3, r0, #1
 8014b92:	d102      	bne.n	8014b9a <_sbrk_r+0x1a>
 8014b94:	682b      	ldr	r3, [r5, #0]
 8014b96:	b103      	cbz	r3, 8014b9a <_sbrk_r+0x1a>
 8014b98:	6023      	str	r3, [r4, #0]
 8014b9a:	bd38      	pop	{r3, r4, r5, pc}
 8014b9c:	20000280 	.word	0x20000280

08014ba0 <_init>:
 8014ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ba2:	bf00      	nop
 8014ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ba6:	bc08      	pop	{r3}
 8014ba8:	469e      	mov	lr, r3
 8014baa:	4770      	bx	lr

08014bac <_fini>:
 8014bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bae:	bf00      	nop
 8014bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014bb2:	bc08      	pop	{r3}
 8014bb4:	469e      	mov	lr, r3
 8014bb6:	4770      	bx	lr
